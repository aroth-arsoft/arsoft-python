#!/usr/bin/python

import sys
import argparse

from arsoft.config import *

class nsswitch_config:
    def __init__(self):
        self.m_verbose = False
        self.m_nsswitch = None

    def main(self):
        #=============================================================================================
        # process command line
        #=============================================================================================
        parser = argparse.ArgumentParser(description='manages the configuration file for the System Databases and Name Service Switch')
        parser.add_argument('--set', dest='set', action='append', help='list of values for the specified service', metavar='set', nargs='*')
        parser.add_argument('--get', dest='get', action='append', help='returns the values of specified services', nargs='*')
        parser.add_argument('--configfile', help='alternatice configuration file', metavar='configfile', nargs='?')
        parser.add_argument('--verbose', dest='verbose', action='store_true', help='enable verbose output of this script.')

        args = parser.parse_args()
        self.m_verbose = args.verbose
        
        self.m_nsswitch = Nsswitch(args.configfile)
        if not self.m_nsswitch.open():
            sys.stderr.write('Failed to open ' + self.m_nsswitch.filename() + '\n')
            ret = 1
        else:
            if args.set:
                config_changed = False
                ret = 0
                for set_line in args.set:
                    if len(set_line) < 2:
                        sys.stderr.write('Invalid syntax. Set operation must include service name and at least one provider.\n')
                        ret = 1
                    else:
                        service = set_line[0]
                        values = set_line[1:]
                        config_changed = self.m_nsswitch.setService(service, values)
                #print('got set ' + str(service) + ':' + str(args.set))
                #self.m_nsswitch.setService(service, args.set)
                if config_changed:
                    if not self.m_nsswitch.save('/tmp/nsswitch.conf'):
                        ret = 1
            elif args.get:
                for s in args.get:
                    service = s.strip()
                    v = self.m_nsswitch.getService(service)
                    print(str(service) + ': ' + ' '.join(v))
                ret = 0
            else:
                all_services = self.m_nsswitch.services
                for s in all_services:
                    v = self.m_nsswitch.getService(s)
                    print(str(s) + ': ' + ' '.join(v))
                ret = 0
        return ret

if __name__ == "__main__":
    app =  nsswitch_config()
    sys.exit(app.main())
