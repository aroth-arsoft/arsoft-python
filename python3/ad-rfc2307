#!/usr/bin/python3
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; mixedindent off; indent-mode python;

import sys
import argparse
import socket

from arsoft.socket_utils import gethostname_tuple

class ad_rfc2307:

    def verbose(self, msg):
        if self._verbose:
            print(msg)

    def error(self, msg):
        sys.stderr.write(msg + '\n')

    def warning(self, msg):
        sys.stderr.write(msg + '\n')

    def __init__(self):
        self._verbose = False
        self._uri = None
        self._username = None
        self._password = None
        self._saslmech = None
        self._cxn = None
        (self._fqdn, self._hostname, self._domain) = gethostname_tuple()
        self._samba_domain = self._domain
        if '.' in self._samba_domain:
            self._samba_domain = self._samba_domain[0:self._samba_domain.find('.')]
        self._realm = self._domain.upper()

    def _check_extensions(self):
        ext_ldap3_ok = False
        ext_gssapi_ok = False
        try:
            import ldap3
            ext_ldap3_ok = True
        except ImportError:
            pass

        try:
            import gssapi
            ext_gssapi_ok = True
        except ImportError:
            pass

        ret = True
        if not ext_ldap3_ok:
            ret = False
            self.error('Unable to load ldap3 extension. Please make sure that python3-ldap3 is installed.')
        if not ext_gssapi_ok:
            ret = False
            self.error('Unable to load gssapi extension. Please make sure that python3-gssapi is installed.')
        return ret

    def connect(self):
        if not self._check_extensions():
            return False

        if self._username is not None:
            if '@' not in self._username:
                self._username += '@' + self._realm

        from arsoft.ldap.ad import ActiveDirectoryDomain
        self._backend = ActiveDirectoryDomain(domain_name=self._domain, username=self._username, password=self._password, saslmech=self._saslmech, logger=self)
        return self._backend.connect()

    def close(self):
        if self._backend is not None:
            self._backend.close()

    def setup_idmap(self):
        sfu_settings = self._backend.sfu_settings
        if sfu_settings is None:
            return

        idmap = self._backend.idmap
        max_uid_number = sfu_settings.max_uid_number
        max_gid_number = sfu_settings.max_gid_number
        if max_uid_number < self._min_uid:
            if self._fix_issues:
                self.warning('Next SFU UID %i is below the limit of %i. Correcting.' % (max_uid_number, self._min_uid))
                max_uid_number = self._min_uid
            else:
                self.error('Next SFU UID %i is below the limit of %i.' % (max_uid_number, self._min_uid))
        if max_gid_number < self._min_gid:
            if self._fix_issues:
                self.warning('Next SFU GID %i is below the limit of %i. Correcting.' % (max_gid_number, self._min_gid))
                max_gid_number = self._min_gid
            else:
                self.error('Next SFU UID %i is below the limit of %i.' % (max_gid_number, self._min_gid))
        self.verbose('Next available uid %i, gid %i' % (max_uid_number, max_gid_number))

        # create a set of all groups required for all users to map their primary group
        all_primary_groups = set()
        for user in idmap.users:
            if user.normal_account:
                all_primary_groups.add(user.primary_gid)

        # first map all groups so we can use them later for the users
        for group in idmap.groups:
            if group.gid_number == 0 or (group.gid_number < self._min_gid and self._fix_issues):
                add = True
                # skip all builtin groups (with low RID) and if these group is not used as primary group by a user
                if group.is_builtin and group.rid not in all_primary_groups:
                    add = False

                if add:
                    nis_domain = group.name.lower().replace(' ', '')
                    group.nis_domain = nis_domain
                    group.gid_number = max_gid_number

                    idmap.modify(group)
                    max_gid_number += 1

                    sfu_settings.max_gid_number = max_gid_number
                    print('Map group %s for unix with GID %i (%s)' % (group.name, group.gid_number, nis_domain) )
                else:
                    self.verbose('Skip group %s for unix' % (group.name))
            else:
                if group.gid_number >= max_gid_number:
                    max_gid_number = group.gid_number + 1
                self.verbose('Skip already mapped group %s (%i)' % (group.name, group.gid_number))

        for user in idmap.users:
            if not user.normal_account:
                self.verbose('Skip user %s for unix (no normal user account)' % (user.name))
                continue
            if user.uid_number == 0 or (user.uid_number < self._min_uid and self._fix_issues):
                primary_group = idmap.get_group_by_rid(user.primary_gid)
                if primary_group is None:
                    self.verbose('Skip user %s because primary group %i is unknown' % (user.name, user.primary_gid))
                    continue
                user.uid_number = max_uid_number
                user.nis_domain = primary_group.nis_domain
                user.gid_number = primary_group.gid_number
                user.login_shell = '/bin/bash'
                user.unix_home = '/home/%s' % user.name
                idmap.modify(user)
                max_uid_number += 1
                sfu_settings.max_uid_number = max_uid_number
                print('Map user %s for unix with UID %i, GID %i (%s)' % (user.name, user.uid_number, user.gid_number, user.nis_domain))
            else:
                if user.uid_number >= max_uid_number:
                    max_uid_number = user.uid_number + 1
                self.verbose('Skip already mapped user %s (%i)' % (user.name, user.uid_number))
        # if we found higher gid/uid numbers update the SFU settings to avoid trouble on next add of a user/group
        if max_gid_number != sfu_settings.max_gid_number:
            sfu_settings.max_gid_number = max_gid_number
        if max_uid_number != sfu_settings.max_uid_number:
            sfu_settings.max_uid_number = max_uid_number
        return 0

    def list_users(self):
        idmap = self._backend.idmap
        for user in idmap.users:
            if not user.normal_account:
                self.verbose('Skip user %s for unix (no normal user account)' % (user.name))
                continue
            print('%s:*:%i:%i:%s:%s:%s' % (user.name, user.uid_number, user.gid_number, '' if user.display_name is None else user.display_name, user.unix_home, user.login_shell ))

        return 0

    def list_groups(self):
        idmap = self._backend.idmap
        for group in idmap.groups:
            # skip all builtin groups (with low RID)
            if group.is_builtin:
                continue
            member_names = []
            for user in group.members:
                member_names.append(user.name)
            print('%s:*:%i:%s' % (group.name, group.gid_number, ','.join(member_names) ))

        return 0

    def run(self):
        if self._operation == 'idmap':
            ret = self.setup_idmap()
        elif self._operation == 'passwd':
            ret = self.list_users()
        elif self._operation == 'group':
            ret = self.list_groups()
        else:
            sys.stderr.write('Unknown operation %s\n' % (self._operation))
            ret = 2
        return ret

    def main(self):
        #=============================================================================================
        # process command line
        #=============================================================================================
        parser = argparse.ArgumentParser(description='show and modify RFC2307 information in Active Directory.')
        parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='enable verbose output of this script.')
        parser.add_argument('--username', dest='username', type=str, help='specify the user to access the ldap directory.')
        parser.add_argument('--password', dest='password', type=str, help='password for the ldap user.')
        parser.add_argument('-Y', '--saslmech', dest='saslmech', type=str, default='gssapi', help='specify mechanism used to SASL authentication.')
        parser.add_argument('-F', dest='fix_issues', action='store_true', help='fix any encountered issue.')
        parser.add_argument('--min-gid', dest='min_gid', type=int, default=10000, help='Minimum id of a group')
        parser.add_argument('--min-uid', dest='min_uid', type=int, default=10000, help='Minimum id of a user')
        parser.add_argument('operation', choices=['passwd', 'group', 'idmap'], nargs='?', help='operation to preform')

        args = parser.parse_args()

        self._verbose = args.verbose
        self._saslmech = args.saslmech
        self._username = args.username
        self._password = args.password
        self._operation = 'passwd' if args.operation is None else args.operation
        self._min_gid = args.min_gid
        self._min_uid = args.min_uid
        self._fix_issues = args.fix_issues

        if self.connect():
            ret = self.run()
            self.close()
        else:
            sys.stderr.write('Failed to connect to AD for domain %s\n' % (self._domain))
            ret = 1

        return ret

if __name__ == "__main__":
    app =  ad_rfc2307()
    sys.exit(app.main())
