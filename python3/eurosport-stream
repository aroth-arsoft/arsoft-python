#!/usr/bin/python3
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; mixedindent off; indent-mode python;

import os, sys
import argparse
import datetime
import subprocess
import json

from arsoft.eurosport.client import Client
from arsoft.eurosport.Config import Config
from arsoft.eurosport.Login import Login
from arsoft.eurosport.Program import Program
from arsoft.eurosport.Stream import StreamDownloader
from arsoft.eurosport.Channel import Channel
from sys import stdin
import time


class eurosport_stream_app(object):

    QUALITY_NAMES = {
        2: ['low', ('high', 'best') ],
        3: ['low', 'medium', ('high', 'best') ],
        4: ['low', 'medium', 'high', ('highest', 'best') ],
        5: ['lowest', 'low', 'medium', 'high', ('highest', 'best') ],
        6: ['lowest', 'low', 'medium-low', 'medium', 'high', ('highest', 'best') ],
        7: ['lowest', 'low', 'medium-low', 'medium', 'medium-high', 'high', ('highest', 'best') ],
        8: ['lowest', 'lower', 'low', 'medium-low', 'medium', 'medium-high', 'high', ('highest', 'best') ],
        }

    def log(self, msg):
        if self._verbose:
            print(msg)

    def __init__(self):
        self._verbose = False
        self._script_name = os.path.basename(__file__)
        self._config = None

    def cmd_list_streams(self):
        for no, stream in enumerate(self._client.streams()):
            print('#%i: %s' % (no, stream))

    def cmd_list_categories(self):
        categories = self._client.categories()
        #print(json.dumps(categories, indent=4, sort_keys=True))

        for no, category in enumerate(categories):
            tags = category['tags']
            sport_id = int(category['sport'])
            displayName = []
            for t in tags:
                displayName.append(t['displayName'])
            print('#%i: %s (%i)' % (no, ','.join(displayName), sport_id))

    def cmd_list_videos(self):
        videos = self._client.videos()
        print(json.dumps(videos, indent=4, sort_keys=True))

        for no, category in enumerate(videos):
            tags = category['tags']
            sport_id = int(category['sport'])
            displayName = []
            for t in tags:
                displayName.append(t['displayName'])
            print('#%i: %s (%i)' % (no, ','.join(displayName), sport_id))

    def cmd_list_channels(self):
        channels = self._client.channels()
        #print(json.dumps(channels, indent=4, sort_keys=True))
        for no, channel in enumerate(channels):
            print('#%i: %s' % (no+1, channel.name))
            if channel.urls:
                print('  Url:')
                for url_no, url in enumerate(channel.urls):
                    print('    %i: %s' % (url_no + 1, url))

    def cmd_stream_channel(self, channel):
        timeoffset = 0
        if '-' in channel:
            (channel, timeoffset) = channel.split('-', 1)
        if '/' in channel:
            (channel_no, quality) = channel.split('/', 1)
        elif '@' in channel:
            (channel_no, quality) = channel.split('@', 1)
        else:
            channel_no = channel
            quality = self._config.quality
        try:
            channel_no = int(channel_no)
        except:
            channel_no = -1

        channels = self._client.channels()
        ch = None
        try:
            if channel_no >= 0:
                ch = channels[channel_no]
        except IndexError:
            pass

        ret = 0
        if ch:
            try:
                ch.download_playlist(timeoffset=timeoffset)
                if quality is not None:
                    if isinstance(quality, int) and quality < 100:
                        quality_options = ch.get_available_quality_options()
                        if quality > len(quality_options):
                            sys.stderr.write('Invalid stream index %i (max %i)\n' %(quality, len(quality_options)))
                        else:
                            quality = quality_options[quality]
                    elif isinstance(quality, str):
                        if quality == 'best':
                            quality = None
                        else:
                            quality_options = ch.get_available_quality_options()
                            num_streams = len(quality_options)
                            self.log('got %i streams' % num_streams)
                            if num_streams in self.QUALITY_NAMES:
                                found = False
                                self.log('possible qualtiy names %s, requested %s' % (self.QUALITY_NAMES[num_streams], quality))
                                for index, e in enumerate(self.QUALITY_NAMES[num_streams]):
                                    self.log("got %i, %s" % (index, e))
                                    if isinstance(e, str) and e == quality:
                                        self.log('Found quality %s at index %i' % (quality, index))
                                        quality = index
                                        found = True
                                        break
                                    elif hasattr(e, '__iter__') and quality in e:
                                        self.log('Found quality %s at index %i' % (quality, index))
                                        quality = index
                                        found = True
                                        break
                                quality = quality_options[quality] if found else None
                ch.set_quality(quality)
            except Channel.InvalidData:
                ch = None
            except Channel.NoLiveStream:
                ch = None
            except Channel.NoCatchupStream:
                ch = None

            if ch:
                print(ch.active_stream)
                sd = StreamDownloader(ch.active_stream)


                #vlc_args = ['vlc', '-']
                #p = subprocess.Popen(vlc_args, stdout=sys.stderr, stderr=sys.stderr, stdin=subprocess.PIPE, shell=False)
                #if p:
                    #while 1:
                        #try:
                            #p.stdin.write(sd.get_next_part())
                        #except StreamDownloader.NoDataAvailable:
                            #time.sleep(1)
                            #continue
                        #except KeyboardInterrupt:
                            #sd.stop()
                            #break
                        #except BrokenPipeError:
                            #sd.stop()
                            #break
                    #p.terminate()
        else:
            sys.stderr.write('Unable to find channel %s\n' %channel_no)
            ret = 2
        return ret

    def main(self, argv=None):
        #=============================================================================================
        # process command line
        #=============================================================================================
        default_config_file = os.path.expanduser('~/.config/eurosport-stream')
        parser = argparse.ArgumentParser(description='send e-mail')
        parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='enable verbose output of this script.')
        parser.add_argument('-d', '--debug', dest='debug', action='store_true', help='enable debug mode.')
        parser.add_argument('--config', dest='config_file', default=default_config_file, help='Specify config file')
        parser.add_argument('--email', dest='email', help='Eurosport login account name')
        parser.add_argument('--password', dest='password', help='Eurosport password')
        parser.add_argument('--lang', dest='language', help='Language of the stream; e.g. de, en, fr')
        parser.add_argument('--geo', dest='geo', help='Geo-location code')
        parser.add_argument('--devtype', dest='devtype', help='Overwrite device type')
        parser.add_argument('--product', dest='productid', help='Overwrite product id')
        parser.add_argument('-s', '--schedule', dest='show_schedule', action='store_true', help='show the schedule of the selected channel.')
        parser.add_argument('channel', default='list', nargs='?', help='select channel for playback; if not specified list of available streams is displayed')

        ret = 0

        args = parser.parse_args()
        self._verbose = args.verbose
        self._debug = args.debug
        if self._debug:
            import json

        save_config = False
        if self._debug:
            print('Config file: %s' % args.config_file)
        self._config = Config(filename=args.config_file)

        if not self._config.credentials.email and args.email is not None:
            self._config.credentials.email = args.email
            save_config = True
        if not self._config.credentials.password and args.password is not None:
            self._config.credentials.password = args.password
            save_config = True

        if args.geo is not None:
            self._config.geo = args.geo
            save_config = True
        if args.language is not None:
            self._config.language = args.language
            save_config = True
        if args.devtype is not None:
            self._config.devtype = args.devtype
            save_config = True
        if args.productid is not None:
            self._config.productid = args.productid
            save_config = True

        if save_config:
            #print('save config')
            self._config.save(filename=args.config_file)

        options = {}
        options['debug'] = self._debug
        if self._config.geo is not None:
            options['geoloc'] = self._config.geo
        if self._config.country is not None:
            options['country'] = self._config.country
        if self._config.language is not None:
            options['language'] = self._config.language
        if self._config.devtype is not None:
            options['devtype'] = self._config.devtype
        if self._config.productid is not None:
            options['productid'] = self._config.productid

        self._client = Client(self._config)
        try:
            self._client.login()
        except Login.IsNotConfigured:
            sys.stderr.write('Missing login credentials.\n')
            ret = 1
        except Login.InvalidLoginData as e:
            sys.stderr.write('Invalid login credentials: %s.\n' % e)
            ret = 1
        except Login.HTTPError as e:
            sys.stderr.write('%s. Unable to login to Eurosport.\n' % e)
            ret = 3
        except Login.NetworkError as e:
            sys.stderr.write('Network error. Unable to login to Eurosport.\n')
            ret = 2
        except Login.InvalidContext:
            sys.stderr.write('Invalid context.\n')
            ret = 4
        except Login.LoginIncorrect:
            sys.stderr.write('Incorrect login credentials.\n')
            ret = 5

        if args.channel == 'list' or args.channel == '*':
            self.cmd_list_channels()
        else:
            if args.show_schedule:
                self.cmd_channel_schedule(args.channel)
            else:
                self.cmd_stream_channel(args.channel)
        #self.cmd_list_categories()
        #self.cmd_list_videos()
        return 0

        if channels is None:
            sys.stderr.write('Unable to get channel information.\n')
            ret = 6
        elif not channels:
            sys.stderr.write('No channel information available.\n')
            ret = 7
        else:
            channel = args.channel
            timeoffset = 0
            if '-' in args.channel:
                (channel, timeoffset) = channel.split('-', 1)
            if '/' in channel:
                (channel_no, quality) = channel.split('/', 1)
            elif '@' in channel:
                (channel_no, quality) = channel.split('@', 1)
            else:
                channel_no = channel
                quality = self._config.quality
            try:
                channel_no = int(channel_no)
            except ValueError:
                channel_no = -1
            try:
                if quality is not None:
                    quality = int(quality)
            except ValueError:
                pass


        return ret

if __name__ == "__main__":
    app = eurosport_stream_app()
    sys.exit(app.main(sys.argv))
