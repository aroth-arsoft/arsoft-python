#!/usr/bin/python3
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; mixedindent off; indent-mode python;

import sys
import argparse
import socket

from arsoft.timestamp import parse_timedelta, format_timedelta, UTC
from datetime import datetime, timedelta, tzinfo
import time
from arsoft.mail.mail import Mail
from arsoft.mail.sendmail import sendmail
from arsoft.utils import getlogin
from arsoft.socket_utils import gethostname_tuple

class ad_password_expire:
    
    ADMINISTRATOR_NOTE = """
If you get one or more certificate error in your browser:
- common name in certificate does not match the hostname in the URL.
  This is caused by usage of dynamic DNS.
- certificate was not signed/issued by a trusted CA known to your browser. 
  Since your browser does not include the company CA certificate in this list you will get this error
  unless you add the company CA certificate to the list of trusted certificates in your browser. Please
  check the manual of your browser.
These kind of errors can be safely ignored (when you can trust your Administrator) and you can go ahead and
overwrite the browser security warning and continue on to the kpasswd web service.

Your Administrator

PS: If you have any trouble changing your password just reply to this mail to contact your Administrator.
"""
    
    BODYTEXT = """You %(uid)s receive this message because your password for %(realm)s expires in %(expireat)s.

You have to change your password within the specified time frame. If you do not change your password in the given time, 
you will not be able to use the services.

To change your password either use the kpasswd tool from your operating system or use the following web service with your browser:

%(weburl)s
"""
    BODYTEXT_FATAL = """You %(uid)s receive this message because your password for %(realm)s expired at %(expireat)s.

You will not be able to use any services until you change your password.

To change your password either use the kpasswd tool from your operating system or use the following web service with your browser:

%(weburl)s
"""
    BODYTEXT_MUST_CHANGE = """You %(uid)s receive this message because you are required to change your password.

You will not be able to use any services until you change your password.

To change your password either use the kpasswd tool from your operating system or use the following web service with your browser:

%(weburl)s
"""

    SUBJECT_MUST_CHANGE = 'FATAL: %(uid)s you are required to change password.'
    SUBJECT_FATAL = 'FATAL: %(uid)s your password has expired %(expireat)s.'
    SUBJECT_CRITICAL = 'CRITICAL: %(uid)s your password expires in %(timeleft)s.'
    SUBJECT_WARNING = 'WARNING: %(uid)s your password expires in %(timeleft)s.'
    SUBJECT_REMINDER = 'REMINDER: %(uid)s your password expires in %(timeleft)s.'

    SUBTREE = -1
    LEVEL = -1
    BASE = -1

    
    def verbose(self, msg):
        if self._verbose:
            print(msg)
            
    def error(self, msg):
        sys.stderr.write(msg + '\n')

    def __init__(self):
        self._verbose = False
        self._uri = None
        self._ldapbase = None
        self._username = None
        self._password = None
        self._saslmech = None
        self._cxn = None
        self._actually_sendmail = True
        (self._fqdn, self._hostname, self._domain) = gethostname_tuple()
        self._samba_domain = self._domain
        if '.' in self._samba_domain:
            self._samba_domain = self._samba_domain[0:self._samba_domain.find('.')]

    def connect(self):
        try:
            import ldap3
        except ImportError:
            self.error('Unable to load ldap3 extension. Please make sure that python3-ldap3 is installed.')
            return False
        
        if self._samba4:
            try:
                import gssapi
            except ImportError:
                self.error('Unable to load gssapi extension. Please make sure that python3-gssapi is installed.')
                return False
            from arsoft.ldap.ad import ActiveDirectoryDomain
            self._backend = ActiveDirectoryDomain(domain_name=self._domain, username=self._username, password=self._password, saslmech=self._saslmech, logger=self)
        else:
            from arsoft.ldap.heimdal import HeimdalDomain
            self._backend = HeimdalDomain(domain_name=self._domain, username=self._username, password=self._password, saslmech=self._saslmech, logger=self)
        return self._backend.connect()

    def close(self):
        if self._backend is not None:
            self._backend.close()

    def check_pwexpire(self):
        pwsettings = self._backend.password_settings
        if not pwsettings.is_password_expire_enabled:
            self.verbose('password expire has been disabled.')
            return 0

        max_passwd_age = timedelta(days=pwsettings.max_password_age)
        now = datetime.utcnow().replace(tzinfo=UTC)

        for user in self._backend.users:

            if user.is_disabled:
                self.verbose('Account %s is disabled' % user.uid)
                continue

            if not user.normal_account:
                self.verbose('Account %s not a normal user acount' % user.uid)
                continue

            if user.password_does_not_expire:
                self.verbose('Account %s password does not expire' % user.uid)
                continue

            if user.password_not_required:
                self.verbose('Account %s password is not required' % user.uid)
                continue

            if user.must_change_password or user.password_expired:
                self.verbose('%s must change password' % (user.uid))
                self._send_message(uid, mailaddr, expireat=None, timeleft=0, must_change=True)
            else:
                # calculate the point in time when the current password expires
                if user.password_expire is not None:
                    pwend = user.password_expire
                else:
                    pwend = user.password_last_set + max_passwd_age
                # and now calculate now long this point is from now
                pwend_diff = pwend - now
                if self._verbose:
                    if pwend:
                        if pwend_diff < timedelta(0):
                            pwend_str = 'expired at %s %s ago' % ( str(pwend), format_timedelta(pwend_diff))
                        else:
                            pwend_str = '%s in %s' % ( str(pwend), format_timedelta(pwend_diff))
                    else:
                        pwend_str = 'No expire date for password available'
                    print('%s %s' % (user.uid, pwend_str))
                if pwend_diff is not None:
                    if pwend_diff < timedelta(0):
                        self._send_message(uid, mailaddr, expireat=pwend, timeleft=pwend_diff, fatal=True)
                    elif pwend_diff < self._critical:
                        self._send_message(uid, mailaddr, expireat=pwend, timeleft=pwend_diff, critical=True)
                    elif pwend_diff < self._warning:
                        self._send_message(uid, mailaddr, expireat=pwend, timeleft=pwend_diff, warning=True)
                    elif pwend_diff < self._reminder:
                        self._send_message(uid, mailaddr, expireat=pwend, timeleft=pwend_diff)
                    else:
                        # no message
                        pass
            ret = 0

        return ret

    def run(self):
        return self.check_pwexpire()

    def _send_message(self, uid, mailaddr, expireat, timeleft, critical=False, warning=False, fatal=False, must_change=False):
        timeleft_text = format_timedelta(timeleft)
        message_details = {'uid':uid, 'realm':self._realm, 'weburl':self._weburl, 
                           'expireat':str(expireat), 'timeleft':timeleft_text }
        if must_change:
            bodytext = self.BODYTEXT_MUST_CHANGE % message_details
        elif fatal:
            bodytext = self.BODYTEXT_FATAL % message_details
        else:
            bodytext = self.BODYTEXT % message_details
        # add common administrator note
        bodytext += self.ADMINISTRATOR_NOTE % message_details
        if must_change:
            subject = self.SUBJECT_MUST_CHANGE % message_details
        elif fatal:
            subject = self.SUBJECT_FATAL % message_details
        elif critical:
            subject = self.SUBJECT_CRITICAL % message_details
        elif warning:
            subject = self.SUBJECT_WARNING % message_details
        else:
            subject = self.SUBJECT_REMINDER % message_details

        if not mailaddr:
            # send message to root to always get a message out to someone
            mailaddr = 'root'

        # assume everything goes as planned
        ret = True
        msg = Mail(sender=self._sender, to=[mailaddr], subject=subject, bodytext=bodytext)
        if self._actually_sendmail:
            sendmail(msg)
        else:
            if self._verbose:
                print(msg)
            else:
                print(subject)
        return ret

    def main(self):
        #=============================================================================================
        # process command line
        #=============================================================================================
        parser = argparse.ArgumentParser(description='shows information about expiring password in the Heimdal Kerberos DIT.')
        parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='enable verbose output of this script.')
        parser.add_argument('--check-message', dest='check_message_only', action='store_true', help='Do not use any real data, just check if the messages are ok.')
        parser.add_argument('--noop', dest='noop', action='store_true', help='do not actually send mails, just test.')
        parser.add_argument('--heimdal', dest='heimdal', action='store_true', help='use heimdal schema.')
        parser.add_argument('--username', dest='username', type=str, help='specify the user to access the ldap directory.')
        parser.add_argument('--password', dest='password', type=str, help='password for the ldap user.')
        parser.add_argument('--base', dest='base', type=str, help='specify the base dn for ldap search operation.')
        parser.add_argument('-Y', '--saslmech', dest='saslmech', type=str, default='gssapi', help='specify mechanism used to SASL authentication.')
        parser.add_argument('--reminder', dest='reminder', type=str, default='60d', help='specify the time when a reminder message will be sent.')
        parser.add_argument('--warn', dest='warning', type=str, default='30d', help='specify the time when a warning message will be sent.')
        parser.add_argument('--crit', dest='critical', type=str, default='8d', help='specify the time when a critical message will be sent.')
        parser.add_argument('--sender', dest='sender', type=str, default='root', help='specify the sender mail address.')
        parser.add_argument('--realm', dest='realm', type=str, default='Kerberos on ' + self._fqdn, help='specify the name of the service in the message.')
        parser.add_argument('--weburl', dest='weburl', type=str, default='https://' + self._fqdn + '/cpw', help='specify the name of the service in the message.')

        args = parser.parse_args()

        self._verbose = args.verbose
        self._saslmech = args.saslmech
        if args.noop:
            self._actually_sendmail = False

        self._sender = args.sender
        self._realm = args.realm
        self._weburl = args.weburl
        self._username = args.username
        self._password = args.password
        self._reminder = parse_timedelta(args.reminder)
        self._warning = parse_timedelta(args.warning)
        self._critical = parse_timedelta(args.critical)
        if args.heimdal:
            self._samba4 = False
        else:
            self._samba4 = True
        self._check_message_only = args.check_message_only
        if self._verbose:
            print('mail sender: ' + str(self._sender))
            print('realm: ' + str(self._realm))
            print('web url: ' + str(self._weburl))
            print('Samba4: ' + str(self._samba4))
            print('reminder: ' + str(self._reminder))
            print('warning: ' + str(self._warning))
            print('critical: ' + str(self._critical))
        
        if self._check_message_only:
            now = datetime.utcnow()
            uid = getlogin()
            self._send_message(uid=uid, mailaddr=uid, expireat=now, timeleft=timedelta(0), critical=True, warning=False, fatal=False)
            return 0

        if self.connect():
            ret = self.run()
            self.close()
        else:
            sys.stderr.write('Failed to connect to AD for domain %s\n' % (self._domain))
            ret = 1

        return ret

if __name__ == "__main__":
    app =  ad_password_expire()
    sys.exit(app.main())
