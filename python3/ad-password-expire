#!/usr/bin/python3
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; mixedindent off; indent-mode python;

import sys
import argparse
import socket

from arsoft.timestamp import parse_date, parse_timedelta, format_timedelta, ad_timestamp_to_datetime, UTC
from datetime import datetime, timedelta, tzinfo
import time
from arsoft.mail.mail import Mail
from arsoft.mail.sendmail import sendmail
from arsoft.utils import getlogin
from arsoft.socket_utils import gethostname_tuple

AD_UF_ACCOUNTDISABLE = 2

class ad_password_expire:
    
    ADMINISTRATOR_NOTE = """
If you get one or more certificate error in your browser:
- common name in certificate does not match the hostname in the URL.
  This is caused by usage of dynamic DNS.
- certificate was not signed/issued by a trusted CA known to your browser. 
  Since your browser does not include the company CA certificate in this list you will get this error
  unless you add the company CA certificate to the list of trusted certificates in your browser. Please
  check the manual of your browser.
These kind of errors can be safely ignored (when you can trust your Administrator) and you can go ahead and
overwrite the browser security warning and continue on to the kpasswd web service.

Your Administrator

PS: If you have any trouble changing your password just reply to this mail to contact your Administrator.
"""
    
    BODYTEXT = """You %(uid)s receive this message because your password for %(realm)s expires in %(expireat)s.

You have to change your password within the specified time frame. If you do not change your password in the given time, 
you will not be able to use the services.

To change your password either use the kpasswd tool from your operating system or use the following web service with your browser:

%(weburl)s
"""
    BODYTEXT_FATAL = """You %(uid)s receive this message because your password for %(realm)s expired at %(expireat)s.

You will not be able to use any services until you change your password.

To change your password either use the kpasswd tool from your operating system or use the following web service with your browser:

%(weburl)s
"""
    BODYTEXT_MUST_CHANGE = """You %(uid)s receive this message because you are required to change your password.

You will not be able to use any services until you change your password.

To change your password either use the kpasswd tool from your operating system or use the following web service with your browser:

%(weburl)s
"""

    SUBJECT_MUST_CHANGE = 'FATAL: %(uid)s you are required to change password.'
    SUBJECT_FATAL = 'FATAL: %(uid)s your password has expired %(expireat)s.'
    SUBJECT_CRITICAL = 'CRITICAL: %(uid)s your password expires in %(timeleft)s.'
    SUBJECT_WARNING = 'WARNING: %(uid)s your password expires in %(timeleft)s.'
    SUBJECT_REMINDER = 'REMINDER: %(uid)s your password expires in %(timeleft)s.'
    
    def verbose(self, msg):
        if self._verbose:
            print(msg)
            
    def error(self, msg):
        sys.stderr.write(msg + '\n')

    def __init__(self):
        self._verbose = False
        self._uri = None
        self._ldapbase = None
        self._username = None
        self._password = None
        self._saslmech = None
        self._cxn = None
        self._actually_sendmail = True
        (self._fqdn, self._hostname, self._domain) = gethostname_tuple()
        self._samba_domain = self._domain
        if '.' in self._samba_domain:
            self._samba_domain = self._samba_domain[0:self._samba_domain.find('.')]

    def connect(self, uri, username, password, saslmech):
        self.verbose('connect to %s as %s (%s)' % (uri, username, saslmech) )

        try:
            import ldap3
        except ImportError:
            self.error('Unable to load ldap3 extension. Please make sure that python3-ldap3 is installed.')
            return False
        
        if self._samba4:
            try:
                import gssapi
            except ImportError:
                self.error('Unable to load gssapi extension. Please make sure that python3-gssapi is installed.')
                return False
                

        from arsoft.ldap import LdapConnection

        self._cxn = LdapConnection(uri, username, password, saslmech, logger=self)
        return self._cxn.connect()

    def close(self):
        if self._cxn is not None:
            self._cxn.close()

    def _ldap_search( self, searchBase, searchFilter, attrsFilter, scope):
        return self._cxn.search(searchBase, searchFilter, attrsFilter, scope)
    
    def _heimdal_ldap_run(self):
        import ldap3
        now = datetime.utcnow().replace(tzinfo=UTC)
        
        searchBase = self._base
        searchFilter = '(&(objectClass=krb5KDCEntry)(krb5PasswordEnd=*))'
        attrsFilter = ['uid', 'krb5PrincipalName','krb5PasswordEnd', 'mail', 'sambaAcctFlags']
        if self._verbose:
            print('Search %s (%s)' % (searchBase, searchFilter))

        if self._ldap_search(searchBase, searchFilter, attrsFilter, ldap3.SUBTREE):
            if not self._cxn.entries:
                self.verbose('Empty result set')

            for rec in self._cxn.entries:
                (dn, values) = rec[0]
                uid = values['uid'][0]
                princ = values['krb5PrincipalName'][0]
                if 'krb5PasswordEnd' in values:
                    pwend = parse_date(values['krb5PasswordEnd'][0])
                else:
                    pwend = None
                if 'mail' in values:
                    mailaddr = values['mail'][0]
                else:
                    mailaddr = None
                if 'sambaAcctFlags' in values:
                    sambaAcctFlags = values['sambaAcctFlags'][0]
                else:
                    sambaAcctFlags = ''
                disabled = True if 'D' in sambaAcctFlags else False
                
                if disabled:
                    if self._verbose:
                        print('%s (%s) account disabled' % (uid, princ))
                    continue

                if pwend is not None:
                    pwend_diff = pwend - now
                else:
                    pwend_diff = None

                if self._verbose:
                    if pwend:
                        if pwend_diff < timedelta(0):
                            pwend_str = 'expired at %s %s ago' % ( str(pwend), format_timedelta(pwend_diff))
                        else:
                            pwend_str = '%s in %s' % ( str(pwend), format_timedelta(pwend_diff))
                    else:
                        pwend_str = 'No expire date for password available'
                    print('%s (%s) %s' % (uid, princ, pwend_str))
                if pwend_diff is not None:
                    if pwend_diff < timedelta(0):
                        self._send_message(uid, mailaddr, expireat=pwend, timeleft=pwend_diff, fatal=True)
                    elif pwend_diff < self._critical:
                        self._send_message(uid, mailaddr, expireat=pwend, timeleft=pwend_diff, critical=True)
                    elif pwend_diff < self._warning:
                        self._send_message(uid, mailaddr, expireat=pwend, timeleft=pwend_diff, warning=True)
                    elif pwend_diff < self._reminder:
                        self._send_message(uid, mailaddr, expireat=pwend, timeleft=pwend_diff)
                    else:
                        # no message
                        pass
            ret = 0
        else:
            sys.stderr.write('Nothing found.\n')
            ret = 2
        return ret
    
    
    def _ad_password_settings(self):
        import ldap3
        # from /usr/lib/python2.7/dist-packages/samba/netcmd/domain.py
        # class cmd_domain_passwordsettings(Command):
        searchBase = self._base
        searchFilter = None
        attrsFilter = ["pwdProperties", "pwdHistoryLength", "minPwdLength",
                 "minPwdAge", "maxPwdAge", "lockoutDuration", "lockoutThreshold",
                 "lockOutObservationWindow"]
        cur_max_pwd_age = 0
        
        res = self._ldap_search(searchBase, searchFilter, attrsFilter, ldap3.BASE)
        if res is not None:
            pwd_props = int(res[0]["pwdProperties"][0])
            pwd_hist_len = int(res[0]["pwdHistoryLength"][0])
            cur_min_pwd_len = int(res[0]["minPwdLength"][0])
            # ticks -> days
            cur_min_pwd_age = int(abs(int(res[0]["minPwdAge"][0])) / (1e7 * 60 * 60 * 24))
            if int(res[0]["maxPwdAge"][0]) == -0x8000000000000000:
                cur_max_pwd_age = 0
            else:
                cur_max_pwd_age = int(abs(int(res[0]["maxPwdAge"][0])) / (1e7 * 60 * 60 * 24))
            cur_account_lockout_threshold = int(res[0]["lockoutThreshold"][0])
            # ticks -> mins
            if int(res[0]["lockoutDuration"][0]) == -0x8000000000000000:
                cur_account_lockout_duration = 0
            else:
                cur_account_lockout_duration = abs(int(res[0]["lockoutDuration"][0])) / (1e7 * 60)
            cur_reset_account_lockout_after = abs(int(res[0]["lockOutObservationWindow"][0])) / (1e7 * 60)

        return { 'maxPwdAge': cur_max_pwd_age }

    

    def _ad_ldap_run(self):
        import ldap3
        now = datetime.utcnow().replace(tzinfo=UTC)

        max_gid_number = 10000
        max_uid_number = 10000
        searchBase = 'CN=%s,CN=ypservers,CN=ypServ30,CN=RpcServices,CN=System,' % self._samba_domain + self._base
        searchFilter = None
        attrsFilter = ['msSFU30MaxGidNumber', 'msSFU30MaxUidNumber']
        result = self._ldap_search(searchBase, searchFilter, attrsFilter, ldap3.SUBTREE)
        if result is not None:
            if not result:
                self.verbose('Empty result set')

            if 'msSFU30MaxGidNumber' in result[0]:
                max_gid_number = int(result[0]['msSFU30MaxGidNumber'])
            if 'msSFU30MaxUidNumber' in result[0]:
                max_uid_number = int(result[0]['msSFU30MaxUidNumber'])

        pwsettings = self._ad_password_settings()
        if pwsettings['maxPwdAge'] == 0:
            self.verbose('password expire has been disabled.')
            return 0
        
        max_passwd_age = timedelta(days=pwsettings['maxPwdAge'])

        searchBase = self._base
        searchFilter = '(objectClass=user)'
        attrsFilter = ['name', 'sAMAccountName', 'pwdLastSet', 'accountExpires', 'userAccountControl']
        if self._verbose:
            print('Search %s (%s)' % (searchBase, searchFilter))

        result = self._ldap_search(searchBase, searchFilter, attrsFilter, ldap3.SUBTREE)
        if result is not None:
            if not result:
                self.verbose('Empty result set')

            for entry in result:
                #uid = entry['name']
                #samaccountname = entry['sAMAccountName']
                uid = entry['sAMAccountName']
                useraccountcontrol = int(entry.get('userAccountControl', 0))
                pwdlastset_raw = int(entry.get('pwdLastSet', 0))
                pwdlastset = ad_timestamp_to_datetime( pwdlastset_raw )
                accountexpires = ad_timestamp_to_datetime( int(entry.get('accountExpires', 0)) )
                mailaddr = None
                
                if useraccountcontrol & AD_UF_ACCOUNTDISABLE:
                    self.verbose('Account %s is disabled' % uid)
                    continue
                
                #print('dn %s' % entry.dn)
                #print('uid %s' % uid)
                #print('pwdlastset %s' % pwdlastset)
                #print('accountexpires %s' % accountexpires)
                
                pwend = pwdlastset + max_passwd_age
                
                #print('pwd_expire_time %s' % pwend)

                pwend_diff = pwend - now
                
                if pwdlastset_raw == 0:
                    self.verbose('%s must change password' % (uid))
                    self._send_message(uid, mailaddr, expireat=None, timeleft=0, must_change=True)
                else:
                    if self._verbose:
                        if pwend:
                            if pwend_diff < timedelta(0):
                                pwend_str = 'expired at %s %s ago' % ( str(pwend), format_timedelta(pwend_diff))
                            else:
                                pwend_str = '%s in %s' % ( str(pwend), format_timedelta(pwend_diff))
                        else:
                            pwend_str = 'No expire date for password available'
                        print('%s %s' % (uid, pwend_str))
                    if pwend_diff is not None:
                        if pwend_diff < timedelta(0):
                            self._send_message(uid, mailaddr, expireat=pwend, timeleft=pwend_diff, fatal=True)
                        elif pwend_diff < self._critical:
                            self._send_message(uid, mailaddr, expireat=pwend, timeleft=pwend_diff, critical=True)
                        elif pwend_diff < self._warning:
                            self._send_message(uid, mailaddr, expireat=pwend, timeleft=pwend_diff, warning=True)
                        elif pwend_diff < self._reminder:
                            self._send_message(uid, mailaddr, expireat=pwend, timeleft=pwend_diff)
                        else:
                            # no message
                            pass
            ret = 0
        else:
            sys.stderr.write('Nothing found.\n')
            ret = 2
        return ret

    def run(self):
        if self._samba4:
            if self._verbose:
                print('check Samba4 for password expiry information')
            return self._ad_ldap_run()
        else:
            if self._verbose:
                print('check LDAP for password expiry information')
            return self._heimdal_ldap_run()

    def _send_message(self, uid, mailaddr, expireat, timeleft, critical=False, warning=False, fatal=False, must_change=False):
        timeleft_text = format_timedelta(timeleft)
        message_details = {'uid':uid, 'realm':self._realm, 'weburl':self._weburl, 
                           'expireat':str(expireat), 'timeleft':timeleft_text }
        if must_change:
            bodytext = self.BODYTEXT_MUST_CHANGE % message_details
        elif fatal:
            bodytext = self.BODYTEXT_FATAL % message_details
        else:
            bodytext = self.BODYTEXT % message_details
        # add common administrator note
        bodytext += self.ADMINISTRATOR_NOTE % message_details
        if must_change:
            subject = self.SUBJECT_MUST_CHANGE % message_details
        elif fatal:
            subject = self.SUBJECT_FATAL % message_details
        elif critical:
            subject = self.SUBJECT_CRITICAL % message_details
        elif warning:
            subject = self.SUBJECT_WARNING % message_details
        else:
            subject = self.SUBJECT_REMINDER % message_details

        if not mailaddr:
            # send message to root to always get a message out to someone
            mailaddr = 'root'

        # assume everything goes as planned
        ret = True
        msg = Mail(sender=self._sender, to=[mailaddr], subject=subject, bodytext=bodytext)
        if self._actually_sendmail:
            sendmail(msg)
        else:
            if self._verbose:
                print(msg)
            else:
                print(subject)
        return ret

    def main(self):
        #=============================================================================================
        # process command line
        #=============================================================================================
        parser = argparse.ArgumentParser(description='shows information about expiring password in the Heimdal Kerberos DIT.')
        parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='enable verbose output of this script.')
        parser.add_argument('--check-message', dest='check_message_only', action='store_true', help='Do not use any real data, just check if the messages are ok.')
        parser.add_argument('--noop', dest='noop', action='store_true', help='do not actually send mails, just test.')
        parser.add_argument('--uri', dest='uri', type=str, help='specify the address of the ldap server.')
        parser.add_argument('-l', '--localhost', dest='localhost', action='store_true', help='connect to local OpenLDAP server.')
        parser.add_argument('--samba4', dest='samba4', action='store_true', help='use the local Samba config.')
        parser.add_argument('--heimdal', dest='heimdal', action='store_true', help='use heimdal schema.')
        parser.add_argument('--username', dest='username', type=str, help='specify the user to access the ldap directory.')
        parser.add_argument('--password', dest='password', type=str, help='password for the ldap user.')
        parser.add_argument('--base', dest='base', type=str, help='specify the base dn for ldap search operation.')
        parser.add_argument('-Y', '--saslmech', dest='saslmech', type=str, default='gssapi', help='specify mechanism used to SASL authentication.')
        parser.add_argument('--reminder', dest='reminder', type=str, default='60d', help='specify the time when a reminder message will be sent.')
        parser.add_argument('--warn', dest='warning', type=str, default='30d', help='specify the time when a warning message will be sent.')
        parser.add_argument('--crit', dest='critical', type=str, default='8d', help='specify the time when a critical message will be sent.')
        parser.add_argument('--sender', dest='sender', type=str, default='root', help='specify the sender mail address.')
        parser.add_argument('--realm', dest='realm', type=str, default='Kerberos on ' + self._fqdn, help='specify the name of the service in the message.')
        parser.add_argument('--weburl', dest='weburl', type=str, default='https://' + self._fqdn + '/cpw', help='specify the name of the service in the message.')

        args = parser.parse_args()

        self._verbose = args.verbose
        self._saslmech = args.saslmech
        if args.noop:
            self._actually_sendmail = False

        self._sender = args.sender
        self._realm = args.realm
        self._weburl = args.weburl
        self._username = args.username
        self._password = args.password
        self._reminder = parse_timedelta(args.reminder)
        self._warning = parse_timedelta(args.warning)
        self._critical = parse_timedelta(args.critical)
        if args.samba4:
            self._samba4 = True
        elif args.heimdal:
            self._samba4 = False
        else:
            self._samba4 = True
        self._check_message_only = args.check_message_only
        if self._verbose:
            print('mail sender: ' + str(self._sender))
            print('realm: ' + str(self._realm))
            print('web url: ' + str(self._weburl))
            print('Samba4: ' + str(self._samba4))
            print('reminder: ' + str(self._reminder))
            print('warning: ' + str(self._warning))
            print('critical: ' + str(self._critical))
        
        if args.samba4:
            sys.stderr.write('Samba4 backend not yet implemented.\n')
            return 1
        
        if self._check_message_only:
            now = datetime.utcnow()
            uid = getlogin()
            self._send_message(uid=uid, mailaddr=uid, expireat=now, timeleft=timedelta(0), critical=True, warning=False, fatal=False)
            return 0

        if args.uri is not None:
            if args.uri.startswith('ldap://') or \
                args.uri.startswith('ldaps://') or \
                args.uri.startswith('ldapi://'):
                self._uri = args.uri
            else:
                if args.uri[0] == '/':
                    self._uri = "ldapi://" + str(args.uri)
                else:
                    self._uri = "ldap://" + str(args.uri)
        else:
            if args.localhost == True:
                self._uri = "ldap://localhost"
            else:
                ldapserver = None
                try:
                    import ldap
                    self._uri = ldap.get_option(ldap.OPT_URI)
                    if self._uri is None:
                        ldapserver = ldap.get_option(ldap.OPT_SERVER)
                except ImportError:
                    pass
                if ldapserver is None:
                    self._uri = "ldap://localhost"
                else:
                    self._uri = "ldap://" + str(ldapserver)

        if args.base is None or len(args.base) == 0:
            if self._samba4:
                if '.' in self._domain:
                    self._base = ''
                    for e in self._domain.split('.'):
                        if self._base:
                            self._base = self._base + ',DC=' + e
                        else:
                            self._base = 'DC=' + e
                else:
                    self._base = 'DC=' + self._domain
            else:
                self._base = None
                try:
                    import ldap
                    self._base = ldap.get_option(ldap.OPT_DEFBASE)
                except ImportError:
                    pass
        else:
            self._base = args.base

        if self._verbose:
            print('base: %s' % self._base)

        if self.connect(self._uri, self._username, self._password, self._saslmech):
            ret = self.run()
            self.close()
        else:
            sys.stderr.write('Failed to connect to %s\n' % (self._uri))
            ret = 1

        return ret

if __name__ == "__main__":
    app =  ad_password_expire()
    sys.exit(app.main())
