#!/usr/bin/python3
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; mixedindent off; indent-mode python;

import os
import os.path
import argparse
import sys
import tempfile
import socket
from arsoft.dnsutils import get_dns_srv_record, get_dns_host_record, get_dns_ptr_record, gethostname_tuple, is_valid_ipv4, is_valid_ipv6
from arsoft.utils import rmtree
from arsoft.sshutils import *
import arsoft.openvpn
import dns.exception

__version__ = '1.0'

class PuppetSetupApp(object):
    def __init__(self):
        self.verbose = False
        self._config = None
        self._apt_update_required = False
        self._cxn = None
        self._session_key = None
        self._sudo = None
        self.puppet_server = None
        self.puppet_server_ip = None
        self.puppet_server_port = 8140

    def __del__(self):
        self._disconnect()

    def version(self):
        print('Version: %s' % str(__version__))
        print('SSH: %s' % str(SSH_EXECUTABLE))
        print('SSH keygen: %s' % str(SSH_KEYGEN_EXECUTABLE))
        print('SSH copy id: %s' % str(SSH_COPY_ID_EXECUTABLE))
        print('SCP: %s' % str(SCP_EXECUTABLE))
        return 0

    def _add_apt_source(self, sourcename, url, keyid, distcode=None, components=['main'], has_source=True, distcode_remap={}):
        distro_cs="`lsb_release -cs`" if distcode is None else ("'%s'" %distcode)
        distro_cs_map=''
        for k,v in distcode_remap.items():
            distro_cs_map += '[ "$distro_cs" = \'%s\' ] && distro_cs=\'%s\'\n' % (k,v)

        components_str = ' '.join(components)
        sourcefilename = os.path.join('/etc/apt/sources.list.d', sourcename + '.list')
        script = """
distro_cs=%(distro_cs)s
url="%(url)s"
%(distro_cs_map)s
line_deb="deb $url $distro_cs %(components_str)s"
line_deb_src="deb-src $url $distro_cs %(components_str)s"
tmpfile=`mktemp`
echo "# Automatically generate source file for APT" > "$tmpfile"
echo "$line_deb" >> "$tmpfile"
[ %(has_source)i -ne 0 ] && echo "$line_deb_src" >> "$tmpfile"
if [ -f "%(sourcefilename)s" ]; then

    has_deb_line=`grep -E -o "^${line_deb}[[:space:]]*\$" "%(sourcefilename)s" 2>/dev/null`
    if [ %(has_source)i -ne 0 ]; then
        has_deb_src_line=`grep -E -o "^${line_deb_src}[[:space:]]*\$" "%(sourcefilename)s" 2>/dev/null`
    else
        has_deb_src_line='not needed'
    fi

    if [ -z "$has_deb_line" -o -z "$has_deb_src_line" ]; then
        install -m 0644 -o root -g root "$tmpfile" "%(sourcefilename)s"; RES=$?
        if [ $RES -eq 0 ]; then
            apt-key adv --recv-keys --keyserver keyserver.ubuntu.com %(keyid)s; RES=$?
        fi
    else
        RES=3
    fi
else
    install -m 0644 -o root -g root "$tmpfile" "%(sourcefilename)s"; RES=$?
    if [ $RES -eq 0 ]; then
        apt-key adv --recv-keys --keyserver keyserver.ubuntu.com %(keyid)s; RES=$?
    fi
fi
rm -f "$tmpfile"
exit $RES
""" % { 'distro_cs':distro_cs,
       'distro_cs_map':distro_cs_map,
       'url':url,
       'keyid':keyid,
       'components_str':components_str, 
       'has_source':has_source,
       'sourcename':sourcename,
       'sourcefilename':sourcefilename }
        (sts, stdout, stderr) = self._cxn.runcmdAndGetData(script=script, sudo=True)
        print('_add_apt_source %s sts=%i' % (sourcename, sts))
        if sts == 0:
            self._apt_update_required = True
            ret = True
        elif sts == 3:
            # source already present, no update required
            ret = True
        else:
            ret = False
        return ret


    def _get_apt_proxy_server(self):
        ret = None
        try:
            proxy_servers = get_dns_srv_record('apt-proxy2')
            if len(proxy_servers) > 0:
                (hostname, port) = proxy_servers[0]
                ret = 'http://%s:%i' % (hostname, port)
        except dns.exception.DNSException:
            pass
        return ret

    def _apt_config(self):
        script = """
proxy_conf_file='/etc/apt/apt.conf.d/02proxy'
proxy_url='%(proxy_url)s'
if [ -z "$proxy_url" ]; then
    if [ -f "$proxy_conf_file" ]; then
        rm "$proxy_conf_file"; RES=$?
    else
        RES=0
    fi
else
    tmpfile=`mktemp`
    echo "Acquire::http { Proxy \"$proxy_url\"; }" > "$tmpfile"
    mv "$tmpfile" "$proxy_conf_file"; RES=$?
    rm -f "$tmpfile"
fi
exit $RES
""" % { 'sudo_command': self.sudo_command,
       'proxy_url':'' if self.apt_proxy_server is None else self.apt_proxy_server }
        (sts, stdout, stderr) = self._cxn.runcmdAndGetData(script=script, sudo=self.use_sudo)
        ret = True if sts == 0 else False
        return ret
    
    def _apt_update(self):
        if self._apt_update_required:
            (sts, stdout, stderr) = self._cxn.runcmdAndGetData(args=['apt-get', '-qq', 'update'], sudo=self.use_sudo)
            ret = True if sts == 0 else False
            if not ret:
                sys.stderr.write('Failed to update package sources.\n%s\n%s\n' % (stdout, stderr))
        else:
            ret = True
        return ret
    
    def _apt_install(self, packages):
        self._apt_update()
        args = ['apt-get', 'install', '-q', '-y']
        args.extend(packages)
        (sts, stdout, stderr) = self._cxn.runcmdAndGetData(args, sudo=True)
        ret = True if sts == 0 else False
        if not ret:
            sys.stderr.write('Failed to install packages %s.\n%s\n%s\n' % (','.join(packages), stdout, stderr))
        return ret
    
    def _get_local_puppet_server(self):
        ret = (None, None)
        try:
            puppet_servers = get_dns_srv_record('puppet')
            if len(puppet_servers) > 0:
                ret = puppet_servers[0]
        except dns.exception.DNSException:
            pass
        return ret

    def _rename_host(self, new_hostname):
        args = ['managehosts', 'set-hostname', new_hostname]
        (sts, stdout, stderr) = self._cxn.runcmdAndGetData(args, sudo=True)
        ret = True if sts == 0 else False
        if not ret:
            sys.stderr.write('Failed to rename host to %s. %s\n' % (new_hostname, stderr))
        return ret

    def _enforce_fqdn(self):
        if is_valid_ipv4(self.target_hostname_full) or is_valid_ipv6(self.target_hostname_full):
            if self.verbose:
                print('_enforce_fqdn %s (skip  because ip address)' % self.target_hostname_full)
            ret = True
        else:
            if self.verbose:
                print('_enforce_fqdn %s' % self.target_hostname_full)
            script = """
current_fqdn=`hostname -f`
if [ "$current_fqdn" != "%(fqdn)s" ]; then
    managehosts set-hostname "%(fqdn)s"; RES=$?
else
    RES=0
fi
exit $RES
""" % { 'fqdn':self.target_hostname_full }
            (sts, stdout, stderr) = self._cxn.runcmdAndGetData(script=script, sudo=self.use_sudo)
            ret = True if sts == 0 else False
            if not ret:
                sys.stderr.write('Failed to enforce full qualified hostname %s.\n%s\n%s\n' % (self.target_hostname_full, stdout, stderr))
        return ret

    def _add_puppet_server_host_entry(self):
        script = """
managehosts add "%(hostname)s" "%(addr)s"
""" % { 'hostname':self.puppet_server,
       'addr':self.puppet_server_ip}
        (sts, stdout, stderr) = self._cxn.runcmdAndGetData(script=script, sudo=self.use_sudo)
        ret = True if sts == 0 else False
        if not ret:
            sys.stderr.write('Failed to add puppet server %s as %s. %s\n' % (self.puppet_server, self.puppet_server_ip, stderr))
        return ret

    def _install_openvpn_config(self, config_file):
        if not arsoft.openvpn.ZippedConfigFile.is_zip_config_file(config_file):
            sys.stderr.write('The given file %s is not a valid OpenVPN configuration.\n' % (config_file))
            ret = False
        else:
            zipcfg = arsoft.openvpn.ZippedConfigFile(config_file)
            ret = zipcfg.ssh_install(self.target_hostname_full, keyfile=self.keyfile, username=self.username, verbose=self.verbose)
            if not ret:
                sys.stderr.write('Failed install openvpn config file %s. %s\n' % (config_file, stderr))
            else:
                vpnname, ext = os.path.splitext(zipcfg.config_file.suggested_filename)
                args = ['openvpn-admin', '--start', vpnname]
                (sts, stdout, stderr) = self._cxn.runcmdAndGetData(args, sudo=self.use_sudo)
                ret = True if sts == 0 else False
                if not ret:
                    sys.stderr.write('Failed to start VPN %s. %s\n' % (vpnname, stderr))
        return ret

    def _puppet_agent_run(self, screen_session='puppet-setup'):
        screen = ScreenSession(self._cxn)

        script = """
puppet_bin=`which puppet`
logfile='/tmp/puppet-setup.log'
vardir='/var/lib/puppet'
ssldir='/var/lib/puppet/ssl'
if [ -z "$puppet_bin" ]; then
    [ -x '/opt/puppetlabs/puppet/bin/puppet' ] && puppet_bin='/opt/puppetlabs/puppet/bin/puppet' || true
fi
if [ -z "$puppet_bin" ]; then
    echo "Unable to find puppet agent executable." | tee --append "$logfile"
    exit 2
fi
echo "Use puppet executable: $puppet_bin" | tee --append "$logfile"
"$puppet_bin" agent --enable | tee --append "$logfile"
"$puppet_bin" agent -tv --waitforcert 30 --server "%s" --vardir "$vardir" --ssldir "$ssldir" 2>&1 | tee --append "$logfile"
""" %  self.puppet_server

        (sts, stdout, stderr) = screen.runcmdAndGetData(script=script, useTerminal=True, allocateTerminal=True, sudo=self.use_sudo)
        #(sts, stdout, stderr) = self._cxn.runcmdAndGetData(script=script, useTerminal=True, allocateTerminal=True, sudo=True)
        ret = True if sts == 0 else False
        if not ret:
            sys.stderr.write('puppet run failed (%i).\n%s\n%s\n' % (sts, stdout, stderr))

        # next step retrieve the log file
        script_lines = []
        script_lines.append(self._cxn.to_commandline(['cat', '/tmp/puppet-setup.log']))
        script_lines.append(self._cxn.to_commandline(['rm', '-f', '/tmp/puppet-setup.log']))
        script = '\n'.join(script_lines)
        (sts, stdout, stderr) = self._cxn.runcmdAndGetData(script=script, useTerminal=True, sudo=self.use_sudo)
        return ret

    def _verify_sudo(self):
        if self.sudo_command:
            (sts, stdout, stderr) = self._cxn.runcmdAndGetData(args=['id', '-u'], sudo=True)
            ret = True if sts == 0 else False
            if ret:
                id = -1
                if stdout:
                    id = int(stdout.strip())
                    ret = True if id == 0 else False
                else:
                    ret = False
                if not ret:
                    sys.stderr.write('Sudo is not working on remote machine %s. Got id %i instead of 0.\n' % (self.target_hostname_full, id))
            else:
                sys.stderr.write('Sudo is not working on remote machine %s.\n%s\n%s\n' % (self.target_hostname_full, stdout, stderr))
        else:
            # no sudo is required, so it's ok
            ret = True
        return ret


    def _disconnect(self):
        self._session_key = None
        self._sudo = None
        if self._cxn:
            self._cxn.close()
            self._cxn = None

    def _connect(self):
        self._cxn = None
        self._session_key = None
        self._sudo = None

        use_local = False
        if self.local_fqdn == self.target_hostname_full:
            use_local = True

        if use_local:
            self._cxn = LocalConnection(verbose=self.verbose)
            if self.sudo_password:
                self._sudo = LocalSudoSession(sudo_password=self.sudo_password)
        else:
            self._cxn = SSHConnection(hostname=self.target_hostname_full, username=self.username, keyfile=self.keyfile, verbose=self.verbose)
            if self.keyfile is None:
                self._session_key = SSHSessionKey(self._cxn)

            if self.sudo_password:
                self._sudo = SSHSudoSession(self._cxn, sudo_password=self.sudo_password)
        return True


    @property
    def has_sudo(self):
        return True if self._sudo else False

    def main(self):
        #=============================================================================================
        # process command line
        #=============================================================================================
        parser = argparse.ArgumentParser(description='set up puppet on a host')
        parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='enable verbose output.')
        parser.add_argument('--version', dest='version', action='store_true', help='enable the version and exits.')
        parser.add_argument('-u', '--username', dest='username', default='root', help='username to connect to the remote machine.')
        parser.add_argument('-k', '--keyfile', dest='keyfile', help='keyfile to connect to the remote machine.')
        parser.add_argument('-p', '--password', dest='password', help='password to access the remote machine.')
        parser.add_argument('--sudo-password', dest='sudo_password', default='pass', help='sudo password to get super user access on the remote machine.')
        parser.add_argument('--openvpn', dest='openvpn_zipfile', metavar='ZIPFILE', help='path to the OpenVPN configuration zip.')
        parser.add_argument('--rename-host', dest='rename_host', metavar='HOSTNAME', help='path to the OpenVPN configuration zip.')
        parser.add_argument('--apt-proxy', dest='apt_proxy_server', metavar='HOSTNAME', help='hostname of the apt proxy server')
        parser.add_argument('--puppet-server', dest='puppet_server', metavar='HOSTNAME', help='hostname of the puppet server')
        parser.add_argument('--no-sudo', dest='use_sudo', action='store_false', help='use sudo to run command to remote machine')
        parser.add_argument('hostname', help='name of the host to setup')

        args = parser.parse_args()
        self.verbose = args.verbose
        self.target_hostname = args.hostname
        self.target_hostname_full = None
        self.target_domainname = None
        self.username = args.username
        self.password = args.password
        self.keyfile = args.keyfile
        self.apt_proxy_server = args.apt_proxy_server
        self.puppet_server = args.puppet_server
        self.use_sudo = args.use_sudo
        self.sudo_password = args.sudo_password
        if '@' in self.target_hostname:
            (self.username, self.target_hostname) = self.target_hostname.split('@', 1)

        if args.version:
            return self.version()

        # get the local domain information
        (self.local_fqdn, self.local_hostname, self.local_domainname) = gethostname_tuple()
        if self.target_hostname == 'localhost' or self.target_hostname == 'loopback':
            self.target_hostname = self.local_fqdn

        if self.apt_proxy_server is None:
            self.apt_proxy_server = self._get_apt_proxy_server()
        if self.puppet_server is None:
            self.puppet_server, self.puppet_server_port = self._get_local_puppet_server()
        if self.puppet_server:
            self.puppet_server_ip = socket.gethostbyname(self.puppet_server)

        if is_valid_ipv4(self.target_hostname) or is_valid_ipv6(self.target_hostname):
            self.target_hostname_full = self.target_hostname
            target_ptr_record = None
            try:
                target_ptr_record = get_dns_ptr_record(self.target_hostname)
            except dns.exception.DNSException:
                pass
            if target_ptr_record:
                target_ptr_record_str = str(target_ptr_record[0])
                if '.' in target_ptr_record_str:
                    (hostname, domain) = target_ptr_record_str.split('.', 1)
                    self.target_domainname = domain
                    self.target_hostname = hostname
        else:
            (self.target_fqdn, tmp, self.target_domainname) = gethostname_tuple(self.target_hostname)
            if self.target_domainname is None or self.target_domainname == 'localdomain':
                query_hostname = self.target_hostname + '.' + self.local_domainname
                target_host_record = get_dns_host_record(query_hostname)
                if len(target_host_record) > 0:
                    (self.target_hostname_full, hostname, self.target_domainname) = gethostname_tuple(query_hostname)
                else:
                    self.target_hostname_full = None
                    self.target_domainname = None

        if self.target_domainname is None:
            sys.stderr.write("""Unable to determine full qualified domain name for target host %s.
Unable to continue without it. Make sure the hostname is correct and DNS is working properly.
""" % self.target_hostname)
            return 1

        self.sudo_askpass_script = None
        if self.use_sudo and self.username != 'root':
            self.sudo_command = 'sudo '
        else:
            self.sudo_command = ''

        packages_to_install = []
        packages_to_install.append('arsoft-base')
        packages_to_install.append('python-arsoft')
        packages_to_install.append('python3-arsoft')
        packages_to_install.append('puppet-agent')
        
        if args.openvpn_zipfile:
            packages_to_install.append('openvpn')
            packages_to_install.append('arsoft-python-openvpn')

        ret = True
        self._screen_ready = False
        if ret:
            ret = self._connect()

        if ret:
            ret = self._verify_sudo()

        if ret:
            ret = self._apt_config()
            if not ret:
                sys.stderr.write('Failed to apply APT configuration (e.g. proxy)\n')

        if ret:
            ret = self._add_apt_source('ppa-aroth', 'http://ppa.launchpad.net/aroth/ppa/ubuntu', keyid='AFF68B78')
            if not ret:
                sys.stderr.write('Failed to add PPA aroth\n')

        if ret:
            ret = self._add_apt_source('puppetlabs-pc1', 'http://apt.puppetlabs.com/', keyid='4BD6EC30', components=['PC1'],
                                       has_source=False,
                                       distcode_remap={'yakkety':'xenial', 'zephyr':'xenial'})
            if not ret:
                sys.stderr.write('Failed to add PuppetLabs APT repository\n')

        if ret:
            ret = self._apt_install(packages_to_install)

        if ret:
            if args.rename_host:
                ret = self._rename_host(args.rename_host)
            else:
                ret = self._enforce_fqdn()

        if ret:
            if args.openvpn_zipfile:
                ret = self._install_openvpn_config(args.openvpn_zipfile)
                if ret:
                    ret = self._add_puppet_server_host_entry()

        if ret:
            ret = self._puppet_agent_run()

        self._disconnect()

        return 0 if ret else 1

if __name__ == "__main__":
    app =  PuppetSetupApp()
    sys.exit(app.main())
