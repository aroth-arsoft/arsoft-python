#!/usr/bin/python3
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; mixedindent off; indent-mode python;

import sys
import argparse
import socket

from arsoft.timestamp import parse_date, parse_timedelta, format_timedelta, UTC
from datetime import datetime, timedelta, tzinfo
import time
from arsoft.mail.mail import Mail
from arsoft.mail.sendmail import sendmail

class heimdal_password_expire:
    BODYTEXT = """You %(uid)s receive this message because your password for %(realm)s expires in %(expireat)s.

You have to change your password within the specified time frame. If you do not change your password in the given time, 
you will not be able to use the services.

To change your password either use the kpasswd tool from your operating system or use the following web service with your browser:

%(weburl)s

Your Administrator
"""
    BODYTEXT_FATAL = """You %(uid)s receive this message because your password for %(realm)s expired at %(expireat)s.

You will not be able to use any services until you change your password.

To change your password either use the kpasswd tool from your operating system or use the following web service with your browser:

%(weburl)s

Your Administrator
"""

    SUBJECT_FATAL = 'FATAL: %(uid)s your password has expired %(expireat)s.'
    SUBJECT_CRITICAL = 'CRITICAL: %(uid)s your password expires in %(timeleft)s.'
    SUBJECT_WARNING = 'WARNING: %(uid)s your password expires in %(timeleft)s.'
    SUBJECT_REMINDER = 'REMINDER: %(uid)s your password expires in %(timeleft)s.'

    def __init__(self):
        self._verbose = False
        self._uri = None
        self._ldapbase = None
        self._username = None
        self._password = None
        self._saslmech = None
        self._cxn = None
        self._actually_sendmail = True
        self._fqdn = socket.getfqdn()

    def connect(self, uri, username, password, saslmech):
        if self._verbose:
            print('connect to ' + uri)
            
        if self._samba4:
            return False

        try:
            import ldap
        except ImportError:
            return False

        from arsoft.ldap import LdapConnection

        self._cxn = LdapConnection(uri, username, password, saslmech)
        return self._cxn.connect()

    def close(self):
        if self._cxn is not None:
            self._cxn.close()

    def _ldap_search( self, searchBase, searchFilter, attrsFilter, scope=None):
        import ldap
        return self._cxn.search(searchBase, searchFilter, attrsFilter, ldap.SCOPE_ONELEVEL if scope is None else scope)
    
    def _ldap_run(self):
        import ldap
        now = datetime.utcnow().replace(tzinfo=UTC)
        
        searchBase = self._base
        searchFilter = '(&(objectClass=krb5KDCEntry)(krb5PasswordEnd=*))'
        attrsFilter = ['uid', 'krb5PrincipalName','krb5PasswordEnd', 'mail', 'sambaAcctFlags']

        result_set = self._search(searchBase, searchFilter, attrsFilter, ldap.SCOPE_SUBTREE)
        if result_set is not None:
            for rec in result_set:
                (dn, values) = rec[0]
                uid = values['uid'][0]
                princ = values['krb5PrincipalName'][0]
                if 'krb5PasswordEnd' in values:
                    pwend = parse_date(values['krb5PasswordEnd'][0])
                else:
                    pwend = None
                if 'mail' in values:
                    mailaddr = values['mail'][0]
                else:
                    mailaddr = None
                if 'sambaAcctFlags' in values:
                    sambaAcctFlags = values['sambaAcctFlags'][0]
                else:
                    sambaAcctFlags = ''
                disabled = True if 'D' in sambaAcctFlags else False
                
                if disabled:
                    if self._verbose:
                        print(uid + ' (' + princ + ') account disabled')
                    continue

                if pwend is not None:
                    pwend_diff = pwend - now
                else:
                    pwend_diff = None

                if self._verbose:
                    if pwend:
                        if pwend_diff < timedelta(0):
                            pwend_str = 'expired at %s %s ago' % ( str(pwend), format_timedelta(pwend_diff))
                        else:
                            pwend_str = '%s in %s' % ( str(pwend), format_timedelta(pwend_diff))
                    else:
                        pwend_str = 'No expire date for password available'
                    print('%s (%s) %s' % (uid, princ, pwend_str))
                if pwend_diff is not None:
                    if pwend_diff < timedelta(0):
                        self._send_message(uid, mailaddr, expireat=pwend, timeleft=pwend_diff, fatal=True)
                    elif pwend_diff < self._critical:
                        self._send_message(uid, mailaddr, expireat=pwend, timeleft=pwend_diff, critical=True)
                    elif pwend_diff < self._warning:
                        self._send_message(uid, mailaddr, expireat=pwend, timeleft=pwend_diff, warning=True)
                    elif pwend_diff < self._reminder:
                        self._send_message(uid, mailaddr, expireat=pwend, timeleft=pwend_diff)
                    else:
                        # no message
                        pass
            ret = 0
        else:
            sys.stderr.write('Nothing found.\n')
            ret = 2
        return ret

    def run(self):
        if self._samba4:
            return 2
        else:
            return self._ldap_run()

    def _send_message(self, uid, mailaddr, expireat, timeleft, critical=False, warning=False, fatal=False):
        timeleft_text = format_timedelta(timeleft)
        message_details = {'uid':uid, 'realm':self._realm, 'weburl':self._weburl, 
                           'expireat':str(expireat), 'timeleft':timeleft_text }
        if fatal:
            bodytext = self.BODYTEXT_FATAL % message_details
        else:
            bodytext = self.BODYTEXT % message_details
        if fatal:
            subject = self.SUBJECT_FATAL % message_details
        elif critical:
            subject = self.SUBJECT_CRITICAL % message_details
        elif warning:
            subject = self.SUBJECT_WARNING % message_details
        else:
            subject = self.SUBJECT_REMINDER % message_details

        if not mailaddr:
            # send message to root to always get a message out to someone
            mailaddr = 'root'

        # assume everything goes as planned
        ret = True
        msg = Mail(sender=self._sender, to=[mailaddr], subject=subject, bodytext=bodytext)
        if self._actually_sendmail:
            sendmail(msg)
        else:
            if self._verbose:
                print(msg)
        return ret

    def main(self):
        #=============================================================================================
        # process command line
        #=============================================================================================
        parser = argparse.ArgumentParser(description='shows information about expiring password in the Heimdal Kerberos DIT.')
        parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='enable verbose output of this script.')
        parser.add_argument('--noop', dest='noop', action='store_true', help='do not actually send mails, just test.')
        parser.add_argument('--uri', dest='uri', type=str, help='specify the address of the ldap server.')
        parser.add_argument('-l', '--localhost', dest='localhost', action='store_true', help='connect to local OpenLDAP server.')
        parser.add_argument('--samba4', dest='samba4', action='store_true', help='use the local Samba config.')
        parser.add_argument('--username', dest='username', type=str, help='specify the user to access the ldap directory.')
        parser.add_argument('--password', dest='password', type=str, help='password for the ldap user.')
        parser.add_argument('--base', dest='base', type=str, help='specify the base dn for ldap search operation.')
        parser.add_argument('-Y', '--saslmech', dest='saslmech', type=str, default='simple', help='specify mechanism used to SASL authentication.')
        parser.add_argument('--reminder', dest='reminder', type=str, default='60d', help='specify the time when a reminder message will be sent.')
        parser.add_argument('--warn', dest='warning', type=str, default='30d', help='specify the time when a warning message will be sent.')
        parser.add_argument('--crit', dest='critical', type=str, default='8d', help='specify the time when a critical message will be sent.')
        parser.add_argument('--sender', dest='sender', type=str, default='root', help='specify the sender mail address.')
        parser.add_argument('--realm', dest='realm', type=str, default='Kerberos on ' + self._fqdn, help='specify the name of the service in the message.')
        parser.add_argument('--weburl', dest='weburl', type=str, default='https://' + self._fqdn + '/cpw', help='specify the name of the service in the message.')

        args = parser.parse_args()

        self._verbose = args.verbose
        self._saslmech = args.saslmech
        if args.noop:
            self._actually_sendmail = False

        self._sender = args.sender
        self._realm = args.realm
        self._weburl = args.weburl
        self._reminder = parse_timedelta(args.reminder)
        self._warning = parse_timedelta(args.warning)
        self._critical = parse_timedelta(args.critical)
        self._samba4 = args.samba4
        if self._verbose:
            print('mail sender: ' + str(self._sender))
            print('realm: ' + str(self._realm))
            print('web url: ' + str(self._weburl))
            print('Samba4: ' + str(self._samba4))
            print('reminder: ' + str(self._reminder))
            print('warning: ' + str(self._warning))
            print('critical: ' + str(self._critical))
        
        if args.samba4:
            sys.stderr.write('Samba4 backend not yet implemented.\n')
            return 1

        if args.uri is not None:
            if args.uri.startswith('ldap://') or \
                args.uri.startswith('ldaps://') or \
                args.uri.startswith('ldapi://'):
                self._uri = args.uri
            else:
                if args.uri[0] == '/':
                    self._uri = "ldapi://" + str(args.uri)
                else:
                    self._uri = "ldap://" + str(args.uri)
        else:
            if args.localhost == True:
                self._uri = "ldap://localhost"
            else:
                ldapserver = None
                try:
                    import ldap
                    self._uri = ldap.get_option(ldap.OPT_URI)
                    if self._uri is None:
                        ldapserver = ldap.get_option(ldap.OPT_SERVER)
                except ImportError:
                    pass
                if ldapserver is None:
                    self._uri = "ldap://localhost"
                else:
                    self._uri = "ldap://" + str(ldapserver)

        if args.base is None or len(args.base) == 0:
            self._base = None
            try:
                import ldap
                self._base = ldap.get_option(ldap.OPT_DEFBASE)
            except ImportError:
                pass
        else:
            self._base = args.base
            
        if self.connect(self._uri, self._username, self._password, self._saslmech):
            ret = self.run()
            self.close()
        else:
            sys.stderr.write('Failed to connect to %s\n' % (self._uri))
            ret = 1

        return ret

if __name__ == "__main__":
    app =  heimdal_password_expire()
    sys.exit(app.main())
