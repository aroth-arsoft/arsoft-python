#!/usr/bin/python3
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; mixedindent off; indent-mode python;

import sys
import argparse
import subprocess

from arsoft.config import *

class nsswitch_config:
    def __init__(self):
        self._verbose = False

    def main(self):
        #=============================================================================================
        # process command line
        #=============================================================================================
        parser = argparse.ArgumentParser(description='manages the configuration file for the System Databases and Name Service Switch')
        parser.add_argument('--set', dest='set', action='append', help='list of values for the specified service', metavar='set', nargs='*')
        parser.add_argument('--get', dest='get', action='append', help='returns the values of specified services', nargs='*')
        parser.add_argument('--configfile', help='alternatice configuration file', metavar='configfile', nargs='?')
        parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='enable verbose output of this script.')
        parser.add_argument('--no-nscd-reload', dest='nscd_reload', default=True, action='store_false', help='do not reload the nscd.')

        args = parser.parse_args()
        self._verbose = args.verbose
        
        switchfile = Nsswitch(args.configfile)
        if not switchfile.open():
            sys.stderr.write('Failed to open ' + switchfile.filename() + '\n')
            ret = 1
        else:
            if args.set:
                config_changed = False
                ret = 0
                for set_line in args.set:
                    if len(set_line) < 2:
                        sys.stderr.write('Invalid syntax. Set operation must include service name and at least one provider.\n')
                        ret = 1
                    else:
                        service = set_line[0]
                        values = set_line[1:]
                        if self._verbose:
                            print(('Set service %s to %s' % (service, ','.join(values))))
                        config_changed = switchfile.setService(service, values)
                if config_changed:
                    if not switchfile.save():
                        ret = 1
                    elif args.nscd_reload == True:
                        # restart the nscd daemon to drop all chanced entries
                        subprocess.call(["/usr/sbin/service", "nscd", "restart"])
            elif args.get:
                for s in args.get:
                    service = s.strip()
                    v = switchfile.getService(service)
                    print((str(service) + ': ' + ' '.join(v)))
                ret = 0
            else:
                all_services = switchfile.services
                for s in all_services:
                    v = switchfile.getService(s)
                    print((str(s) + ': ' + ' '.join(v)))
                ret = 0
        return ret

if __name__ == "__main__":
    app =  nsswitch_config()
    sys.exit(app.main())
