#!/usr/bin/python3
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; mixedindent off; indent-mode python;

import os, sys
import argparse

import pycurl
from datetime import datetime, timedelta

from arsoft.fritzbox import *

class NagiosPluginApp(object):
        
    def _buildNagiosPerfData(self, data_dict):
        ret = '|'
        for key, value in data_dict.items():
            ret = ret + key + '='
            if value is not None:
                if isinstance(value, list):
                    ret = ret + ','.join(value)
                else:
                    ret = ret + str(value)
            ret = ret + ';'
        return ret
        
        
class FritxBoxStatusApp(NagiosPluginApp):

    def __init__(self):
        self._verbose = False

    def main(self, argv=None):
        #=============================================================================================
        # process command line
        #=============================================================================================
        parser = argparse.ArgumentParser(description='backup the given subversion repository')
        parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='enable verbose output of this script.')
        parser.add_argument('address', nargs='?', default='fritz.box', help='specifies the address of the FritxBox.')
        parser.add_argument('--dsl', dest='status_dsl', action='store_true', help='outputs the DSL link status.')
        parser.add_argument('--wan', dest='status_wan', action='store_true', help='outputs the WAN status.')
        parser.add_argument('--dns', dest='status_dns', action='store_true', help='outputs the DNS status.')
        parser.add_argument('--physical', dest='status_physical', action='store_true', help='outputs the physical link status.')
        parser.add_argument('--nagios', dest='status_nagios', action='store_true', help='outputs the status suitable for nagios.')

        parser.add_argument('--minup', dest='minup', nargs='?', type=int, help='outputs the status suitable for nagios.')
        parser.add_argument('--maxup', dest='maxup', nargs='?', type=int, help='outputs the status suitable for nagios.')
        parser.add_argument('--mindown', dest='mindown', nargs='?', type=int, help='outputs the status suitable for nagios.')
        parser.add_argument('--maxdown', dest='maxdown', nargs='?', type=int, help='outputs the status suitable for nagios.')

        args = parser.parse_args()

        self._verbose = args.verbose
        
        status = True
        critical = False

        fritz = FritzBox(args.address)
        if args.status_dsl:
            print(str(fritz.dslLinkStatus()))
            critical = True if fritz.isDSLConnected() else False

        elif args.status_wan:
            print(str(fritz.connectionStatus()) + ': ' + str(fritz.connectDuration()) + ', ' + str(fritz.wanAddress()))
            critical = True if fritz.isConnected() else False

        elif args.status_dns:
            dnsservers = fritz.dnsServer()
            if dnsservers is None or len(dnsservers) == 0:
                print('No DNS servers available')
                status = False
            else:
                print(','.join(dnsservers))
                status = True
                
        elif args.status_physical:
            print(str(fritz.physicalLinkStatus()) + ': ' + str(fritz.physicalLinkDownStream()) + ', ' + str(fritz.physicalLinkUpStream()))
            critical = True if fritz.isPhysicalConnected() else False
            
        elif args.status_nagios:
            # first pre-fill the perfdata dictionary with all fields
            perfdata = {
                'downStream': None,
                'upStream': None,
                'wanAddress': None,
                'wanConnectTime': None,
                'wanConnectDuration': None,
                'dnsServers': None
                }
            if fritz.isPhysicalConnected():

                if fritz.isDSLConnected():

                    cxnok = True
                    
                    # DSL is connected, so we can get the up+down link streams
                    perfdata['downStream'] = fritz.physicalLinkDownStream()
                    perfdata['upStream'] = fritz.physicalLinkUpStream()

                    if args.mindown is not None and args.mindown > fritz.physicalLinkDownStream():
                        print('WARNING: Downstream bitrate ' + str(fritz.physicalLinkDownStream()) + ' too low! (min=' + str(args.mindown) + ')')
                        status = False
                        cxnok = False
                    if args.maxdown is not None and args.maxdown < fritz.physicalLinkDownStream():
                        print('WARNING: Downstream bitrate ' + str(fritz.physicalLinkDownStream()) + ' too high! (max=' + str(args.maxdown) + ')')
                        status = False
                        cxnok = False
                        
                    if args.minup is not None and args.minup > fritz.physicalLinkUpStream():
                        print('WARNING: Upstream bitrate ' + str(fritz.physicalLinkUpStream()) + ' too low! (min=' + str(args.minup) + ')')
                        status = False
                        cxnok = False
                    if args.maxup is not None and args.maxup < fritz.physicalLinkUpStream():
                        print('WARNING: Upstream bitrate ' + str(fritz.physicalLinkUpStream()) + ' too high! (max=' + str(args.maxup) + ')')
                        status = False
                        cxnok = False

                    if fritz.isConnected():
                        # It's connected to the internet as well, so
                        # everything fine so far
                        perfdata['wanAddress'] = fritz.wanAddress()
                        perfdata['wanConnectTime'] = fritz.connectTime()
                        perfdata['wanConnectDuration'] = fritz.connectDuration()
                        perfdata['dnsServers'] = fritz.dnsServer()

                        print(str(fritz.connectionStatus()) + ': ' + str(fritz.connectDuration()) + ', ' + str(fritz.wanAddress()))
                    else:
                        critical = True 
                        print('CRITICAL: Not connected! (' + str(fritz.connectionStatus()) + ')')
                else:
                    critical = True 
                    print('CRITICAL: DSL link is not up! (' + str(fritz.dslLinkStatus()) + ')')
            else:
                critical = True 
                print('CRITICAL: Physical link is not up! (' + str(fritz.physicalLinkStatus()) + ')')

        else:
            print('Physical link status: ' + str(fritz.physicalLinkStatus()))
            print('Physical link down: ' + str(fritz.physicalLinkDownStream()) + ' bit/sec')
            print('Physical link up: ' + str(fritz.physicalLinkUpStream()) + ' bit/sec')
            print('DSL link status: ' + str(fritz.dslLinkStatus()))
            print('WAN connection status: ' + str(fritz.connectionStatus()))
            print('WAN connection error: ' + str(fritz.lastConnectionError()))
            print('WAN connect time: ' + str(fritz.connectTime()))
            print('WAN connect duration: ' + str(fritz.connectDuration()))
            print('WAN address: ' + str(fritz.wanAddress()))
            print('DNS servers: ' + str(fritz.dnsServer()))
            #print('userList: ' + str(fritz.userList()))

        if critical == True:
            ret = 2
        elif status == False:
            ret = 1
        else:
            ret = 0
        return ret

if __name__ == "__main__":
    app = FritxBoxStatusApp()
    sys.exit(app.main(sys.argv))
