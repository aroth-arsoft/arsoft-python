#!/usr/bin/python
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; mixedindent off; indent-mode python;

import os,sys
from datetime import datetime, timedelta

from arsoft.nagios import NagiosPlugin, OK, WARNING, CRITICAL, UNKNOWN
from arsoft.openvpn import StatusFile, ConfigFile, Config
from arsoft.timestamp import parse_timedelta, format_timedelta, UTC

def _check_certificate(prefix, perfdata_key, cert):
    exit_code = UNKNOWN
    exit_message = None
    if cert:
        cert_file = cert.filename
        now = datetime.utcnow().replace(tzinfo=UTC)
        if len(cert.certificates) > 0:
            min_expire_in = timedelta(days=100*365)
            for cert in cert.certificates:
                expire_in = cert.expire_date - now
                if expire_in < min_expire_in:
                    min_expire_in = expire_in
                if expire_in < threshold_critical:
                    exit_code = CRITICAL
                    exit_message = '%s expires in %s at %s' % (prefix, format_timedelta(expire_in), expire_date)
                elif expire_in < threshold_warning:
                    exit_code = WARNING
                    exit_message = '%s expires in %s at %s' % (prefix, format_timedelta(expire_in), expire_date)
                else:
                    exit_code = OK
            np.set_value(perfdata_key, min_expire_in.days)
        else:
            np.exclude_value(perfdata_key)
            exit_code = CRITICAL
            exit_message = '%s no certificate in %s' % (prefix, cert_file)
    else:
        np.exclude_value(perfdata_key)
        exit_code = CRITICAL
        exit_message = 'No %s available' % (prefix)
    return (exit_code, exit_message)

## Create the plugin option
np = NagiosPlugin(must_threshold=False, optional_threshold=True, has_host_argument=False)
np.add_arg('n', 'name', 'name of the VPN configuration')
np.add_arg('C', 'clients', 'number of clients required (server only).', default=0, required=0)
np.add_arg('r', 'running', 'if not specified checks if VPN is running; if set to zero checks if VPN is stopped.', default=1, required=0)
np.add_flag('s', 'cert', 'check only certificates', default=False)
    
## This starts the actual plugin activation
np.activate()

check_certificates = np['cert']
running = True if int(np['running']) != 0 else False

config = Config()
if not config.get_config_file(np['name']):
    exit_code = CRITICAL
    exit_message = 'VPN %s is not configured.' % (str(np['name']))
else:
    if check_certificates:
        if np['warning']:
            threshold_warning = timedelta(days=int(np['warning']))
        else:
            threshold_warning = timedelta(days=30)
        if np['critical']:
            threshold_critical = timedelta(days=int(np['critical']))
        else:
            threshold_critical = timedelta(days=15)
        
        np.add_value('cert_days', has_argument=False, value=-1)
        np.add_value('ca_days', has_argument=False, value=-1)
        np.add_value('crl_days', has_argument=False, value=-1)

        np.set_value_range('cert_days', warning=str(threshold_warning.days) + ':', critical=str(threshold_critical.days) + ':')
        np.set_value_range('ca_days', warning=str(threshold_warning.days) + ':', critical=str(threshold_critical.days) + ':')
        np.set_value_range('crl_days', warning=str(threshold_warning.days) + ':', critical=str(threshold_critical.days) + ':')

        config_file = ConfigFile(config_name=np['name'])
        
        if config_file.cert_file:
            (exit_code, exit_message) = _check_certificate('Certificate file', 'cert_days', config_file.cert_file)
        else:
            exit_code = CRITICAL
            exit_message = 'VPN %s no certificate configured.' % (str(np['name']))

        if exit_code == OK:
            if config_file.ca_file:
                (exit_code, exit_message) = _check_certificate('CA file', 'ca_days', config_file.ca_file)
            else:
                exit_code = CRITICAL
                exit_message = 'VPN %s no CA certificate configured.' % (str(np['name']))

        if exit_code == OK:
            if config_file.crl_file:
                (exit_code, exit_message) = _check_certificate('CRL file', 'crl_days', config_file.crl_file)
            else:
                np.exclude_value('crl_days')
        if exit_code == OK:
            exit_message = 'All certificates ok'
    else:
        if not config.is_running(np['name']):
            if running == False:
                exit_code = OK
                exit_message = 'VPN is stopped.'
            else:
                exit_code = CRITICAL
                exit_message = 'VPN %s is not running.' % (str(np['name']))
        else:
            now = datetime.now()
            
            config_file = ConfigFile(config_name=np['name'])
            status_file = StatusFile(config_file=config_file)
            if config_file.client:
                np.add_value('device_read', has_argument=False, value=0, uom='B')
                np.add_value('device_write', has_argument=False, value=0, uom='B')
                np.add_value('connection_read', has_argument=False, value=0, uom='B')
                np.add_value('connection_write', has_argument=False, value=0, uom='B')
                np.add_value('auth_read', has_argument=False, value=0, uom='B')
                np.add_value('auth_write', has_argument=False, value=0, uom='B')
                np.add_value('pre_compress', has_argument=False, value=0, uom='B')
                np.add_value('post_compress', has_argument=False, value=0, uom='B')
                np.add_value('compress_ratio', has_argument=False, value=0, uom='%')
                np.add_value('pre_decompress', has_argument=False, value=0, uom='B')
                np.add_value('post_decompress', has_argument=False, value=0, uom='B')
                np.add_value('decompress_ratio', has_argument=False, value=0, uom='%')

                statistics = status_file.statistics
                state = status_file.state
                if statistics is not None:
                    #print('got stats %s' % (statistics))
                    np.set_value('device_read', statistics.device_read)
                    np.set_value('device_write', statistics.device_write)
                    np.set_value('connection_write', statistics.connection_write)
                    np.set_value('connection_read', statistics.connection_read)
                    np.set_value('auth_read', statistics.auth_read)
                    np.set_value('auth_write', statistics.auth_write)
                    np.set_value('pre_compress', statistics.pre_compress)
                    np.set_value('post_compress', statistics.post_compress)
                    np.set_value('compress_ratio', statistics.compress_ratio)
                    np.set_value('pre_decompress', statistics.pre_decompress)
                    np.set_value('post_decompress', statistics.post_decompress)
                    np.set_value('decompress_ratio', statistics.decompress_ratio)

                if running:
                    delta = now - status_file.last_update
                    if delta > timedelta(minutes=5):
                        exit_code = WARNING
                        exit_message = 'status has not been since %s' % (str(status_file.last_update))
                    else:
                        (exit_code, exit_message) = np.check_values()

                    if exit_code == OK:
                        if state is not None:
                            if state.is_connected:
                                exit_message = 'Connected to %s as %s' % (state.remoteip, state.localip)
                            else:
                                exit_code = WARNING
                                exit_message = state.long_state
                        else:
                            exit_message = 'Connected'
                else:
                    if status_file.running:
                        exit_code = CRITICAL
                        exit_message = 'VPN is running, but it should be stopped.'
                    else:
                        exit_code = OK
                        exit_message = 'VPN is stopped.'

            elif config_file.server:
                state = status_file.state
                
                np.add_value('numclients', has_argument=False, value='0')
                
                if np['clients'] is not None:
                    np.set_value_range('numclients', warning=(np['clients']), critical=None)

                if status_file.connected_clients is not None:
                    np.set_value('numclients', len(status_file.connected_clients))

                if running:
                    if status_file.last_update is None:
                        exit_code = CRITICAL
                        exit_message = 'failed to read status file of VPN %s.' % (str(np['name']))
                    else:
                        delta = now - status_file.last_update
                        if delta > timedelta(minutes=5):
                            exit_code = WARNING
                            exit_message = 'status has not been since %s' % (str(status_file.last_update))
                        else:
                            (exit_code, exit_message) = np.check_values()

                    if exit_code == OK:
                        if state is not None:
                            if state.is_connected:
                                exit_message = '%s with %i clients' % (state.localip, len(status_file.connected_clients))
                            else:
                                exit_code = WARNING
                                exit_message = '%s (%s)' % (state.name, state.description)
                        else:
                            exit_message = '%i clients' % (len(status_file.connected_clients))
                else:
                    if status_file.running:
                        exit_code = CRITICAL
                        exit_message = 'VPN is running, but it should be stopped.'
                    else:
                        exit_code = OK
                        exit_message = 'VPN is stopped.'
            else:
                exit_code = CRITICAL
                exit_message = 'VPN %s configuration is neither client nor server.' % (str(np['name']))

np.nagios_exit(exit_code, exit_message)
