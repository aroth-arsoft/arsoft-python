#!/usr/bin/python
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; mixedindent off; indent-mode python;

import os,sys
from datetime import datetime, timedelta

from arsoft.nagios import NagiosPlugin, OK, WARNING, CRITICAL, UNKNOWN
from arsoft.openvpn import StatusFile, ConfigFile, Config

## Create the plugin option
np = NagiosPlugin(must_threshold=False)
np.add_arg('n', 'name', 'name of the VPN configuration')
np.add_arg('c', 'clients', 'number of clients required (server only).', default=0, required=0)
np.add_arg('r', 'running', 'if not specified checks if VPN is running; if set to zero checks if VPN is stopped.', default=1, required=0)

## This starts the actual plugin activation
np.activate()

running = True if int(np['running']) != 0 else False

config = Config()
if not config.get_config_file(np['name']):
    exit_code = CRITICAL
    exit_message = 'VPN %s is not configured.' % (str(np['name']))
elif not config.is_running(np['name']):
    if running == False:
        exit_code = OK
        exit_message = 'VPN is stopped.'
    else:
        exit_code = CRITICAL
        exit_message = 'VPN %s is not running.' % (str(np['name']))
else:
    now = datetime.now()
    
    config_file = ConfigFile(config_name=np['name'])
    status_file = StatusFile(config_file=config_file)
    if config_file.client:
        np.add_value('device_read', has_argument=False, value=0, uom='B')
        np.add_value('device_write', has_argument=False, value=0, uom='B')
        np.add_value('connection_read', has_argument=False, value=0, uom='B')
        np.add_value('connection_write', has_argument=False, value=0, uom='B')
        np.add_value('auth_read', has_argument=False, value=0, uom='B')
        np.add_value('auth_write', has_argument=False, value=0, uom='B')
        np.add_value('pre_compress', has_argument=False, value=0, uom='B')
        np.add_value('post_compress', has_argument=False, value=0, uom='B')
        np.add_value('compress_ratio', has_argument=False, value=0, uom='%')
        np.add_value('pre_decompress', has_argument=False, value=0, uom='B')
        np.add_value('post_decompress', has_argument=False, value=0, uom='B')
        np.add_value('decompress_ratio', has_argument=False, value=0, uom='%')

        statistics = status_file.statistics
        state = status_file.state
        if statistics is not None:
            #print('got stats %s' % (statistics))
            np.set_value('device_read', statistics.device_read)
            np.set_value('device_write', statistics.device_write)
            np.set_value('connection_write', statistics.connection_write)
            np.set_value('connection_read', statistics.connection_read)
            np.set_value('auth_read', statistics.auth_read)
            np.set_value('auth_write', statistics.auth_write)
            np.set_value('pre_compress', statistics.pre_compress)
            np.set_value('post_compress', statistics.post_compress)
            np.set_value('compress_ratio', statistics.compress_ratio)
            np.set_value('pre_decompress', statistics.pre_decompress)
            np.set_value('post_decompress', statistics.post_decompress)
            np.set_value('decompress_ratio', statistics.decompress_ratio)

        if running:
            delta = now - status_file.last_update
            if delta > timedelta(minutes=5):
                exit_code = WARNING
                exit_message = 'status has not been since %s' % (str(status_file.last_update))
            else:
                (exit_code, exit_message) = np.check_values()

            if exit_code == OK:
                if state is not None:
                    if state.is_connected:
                        exit_message = 'Connected to %s as %s' % (state.remoteip, state.localip)
                    else:
                        exit_code = WARNING
                        exit_message = state.long_state
                else:
                    exit_message = 'Connected'
        else:
            if status_file.running:
                exit_code = CRITICAL
                exit_message = 'VPN is running, but it should be stopped.'
            else:
                exit_code = OK
                exit_message = 'VPN is stopped.'

    elif config_file.server:
        state = status_file.state
        
        np.add_value('numclients', has_argument=False, value='0')
        
        if np['clients'] is not None:
            np.set_value_range('numclients', warning=(np['clients']), critical=None)

        if status_file.connected_clients is not None:
            np.set_value('numclients', len(status_file.connected_clients))

        if running:
            if status_file.last_update is None:
                exit_code = CRITICAL
                exit_message = 'failed to read status file of VPN %s.' % (str(np['name']))
            else:
                delta = now - status_file.last_update
                if delta > timedelta(minutes=5):
                    exit_code = WARNING
                    exit_message = 'status has not been since %s' % (str(status_file.last_update))
                else:
                    (exit_code, exit_message) = np.check_values()

            if exit_code == OK:
                if state is not None:
                    if state.is_connected:
                        exit_message = '%s with %i clients' % (state.localip, len(status_file.connected_clients))
                    else:
                        exit_code = WARNING
                        exit_message = '%s (%s)' % (state.name, state.description)
                else:
                    exit_message = '%i clients' % (len(status_file.connected_clients))
        else:
            if status_file.running:
                exit_code = CRITICAL
                exit_message = 'VPN is running, but it should be stopped.'
            else:
                exit_code = OK
                exit_message = 'VPN is stopped.'
    else:
        exit_code = CRITICAL
        exit_message = 'VPN %s configuration is neither client nor server.' % (str(np['name']))

np.nagios_exit(exit_code, exit_message)
