#!/usr/bin/python
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; mixedindent off; indent-mode python;

import sys
import argparse
from datetime import datetime
import os.path
from arsoft.backup.BackupApp import BackupApp
from arsoft.backup.BackupConfig import BackupConfig
from arsoft.backup.DiskManager import DiskManager
from arsoft.filelist import FileList, FileListItem
from arsoft.rsync import Rsync

class ARSoftBackupApp(BackupApp):

    def __init__(self):
        BackupApp.__init__(self, 'arsoft-backup')
        self._verbose = False
        self._dryrun = False

    def _check_config(self):
        ret = True
        backup_dir = self.config.backup_directory
        if backup_dir is None or len(backup_dir) == 0:
            sys.stderr.write('No backup directory configured in %s\n' % (self.config.main_conf) )
            ret = False
        if self._verbose:
            print(self.config)
        return ret
    
    def _mkdir(self, dir):
        ret = True
        if os.path.exists(dir):
            if not os.path.isdir(dir):
                sys.stderr.write('%s is not a directory\n' % (dir) )
                ret = False
        else:
            try:
                os.makedirs(dir)
            except IOError as e:
                sys.stderr.write('Failed to create directory %s; error %s\n' % (dir, str(e)) )
                ret = False
        return ret

    def _prepare_backup_dir(self):
        ret = True
        backup_dir = self.config.backup_directory
        if backup_dir is None or len(backup_dir) == 0:
            sys.stderr.write('No backup directory configured in %s\n' % (self.config.main_conf) )
            ret = False
        else:
            if Rsync.is_rsync_url(backup_dir):
                # assume the given URL is good
                pass
            else:
                if not self._mkdir(backup_dir):
                    ret = False
            if ret:
                if self.config.intermediate_backup_directory:
                    if not self._mkdir(self.config.intermediate_backup_directory):
                        ret = False
        return ret

    def _on_system_startup(self):
        if self.config.eject_unused_backup_discs:
            print('eject unused discs')
            if self._diskmgr.eject():
                ret = 0
            else:
                ret = 1
        else:
            # nothing to do here
            ret = 0
        return ret
    
    def _do_rsync(self):
        backup_dir = self.config.backup_directory
        if not self.config.use_filesystem_snapshots and self.config.use_timestamp_for_backup_dir:
            now = datetime.utcnow()
            nowstr = now.strftime(self.config.timestamp_format_for_backup_dir)
            backup_dir = os.path.join(backup_dir, nowstr)
        if backup_dir[-1] != '/':
            backup_dir += '/'

        # build the final filelist
        source_filelist = FileList()
        if self.config.filelist_include:
            source_filelist.append(self.config.filelist_include)
        source_filelist.append(self.intermediate_filelist)
        #print(source_filelist)

        if not source_filelist.empty():
            inst = Rsync(source=source_filelist, dest=backup_dir, delete=True, deleteExcluded=True, 
                         use_ssh=self.config.use_ssh_for_rsync, ssh_key=self.config.ssh_identity_file,
                         dryrun=self._dryrun, verbose=self._verbose)
            ret = inst.execute()
        else:
            # everything OK since there is nothing to do
            ret = True
        return ret
    
    def _perform_backup(self):
        if not self._check_config():
            return 1
        disk_loaded = False
        disk_ready = False
        # load all available external discs
        if not self._diskmgr.is_disk_ready():
            if not self._diskmgr.load():
                sys.stderr.write('Failed to load external discs\n')
                ret = 1
            else:
                disk_loaded = True
                disk_ready = True
        else:
            disk_ready = True
        
        if disk_ready:
            disk_ready = self._prepare_backup_dir()
            
        if disk_ready:
            ret = 0
            # notify all plugin about the ready disk
            self.plugin_notify_disk_ready()

            self.plugin_notify_start_backup()
            self.plugin_notify_perform_backup()
            self.plugin_notify_backup_complete()

            self.plugin_notify_start_rsync()

            # rsync to backup destination/backup_dir
            if not self._do_rsync():
                sys.stderr.write('rsync failed\n')
                ret = 1

            self.plugin_notify_rsync_complete()

            # create new snapshot of the disc
            # remove old snapshot from the disc

        if disk_loaded:
            self.plugin_notify_disk_eject()
            
            if not self._diskmgr.eject():
                sys.stderr.write('Failed to eject external discs\n')
                ret = 1
        return ret

    def main(self, argv=None):
        #=============================================================================================
        # process command line
        #=============================================================================================
        parser = argparse.ArgumentParser(description='frontend for the AR Soft backup functionality.')
        parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='enable verbose output of this script.')
        parser.add_argument('-n', '--dry-run', dest='dryrun', action='store_true', help='Don\'t actually run any commands; just print them.')

        parser.add_argument('-R', '--root-directory', dest='rootdir', default='/', help='specifies the root directory for operations.')
        parser.add_argument('-C', '--config-directory', dest='configdir', default='/etc/arsoft-backup', help='name of the directory containing the backup configuration.')
        parser.add_argument('-S', '--state-directory', dest='statedir', default='/var/lib/arsoft-backup', help='name of the directory containing the state of all backup jobs.')
        parser.add_argument('--system-startup', dest='system_startup', action='store_true', help='prepare the backup discs after the system has been started.')
        parser.add_argument('--backup', dest='perform_backup', action='store_true', help='starts a new backup.')

        args = parser.parse_args()

        self._verbose = args.verbose
        self._dryrun = args.dryrun
        
        rootdir = os.path.abspath(args.rootdir)
        if not os.path.isdir(rootdir):
            sys.stderr.write('Given root directory %s does not exist.\n' % (rootdir))
            ret = 2
        else:
            configdir = rootdir + args.configdir
            statedir = rootdir + args.statedir

            if not self.reinitialize(configdir, statedir):
                sys.stderr.write('Failed to load configuration from %s.\n' % (args.configdir)) 
                ret = 1
            else:
                if self._verbose:
                    print(self.config)
                if args.system_startup:
                    ret = self._on_system_startup()
                elif args.perform_backup:
                    ret = self._perform_backup()
                else:
                    sys.stderr.write('No operation specified.\n')
                    parser.print_help()
                    ret = 1
        self.cleanup()
        return ret


if __name__ == "__main__":
    app = ARSoftBackupApp()
    sys.exit(app.main(sys.argv))
