#!/usr/bin/python
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; mixedindent off; indent-mode python;

import sys
import argparse
from datetime import datetime
import os.path
from arsoft.backup.BackupApp import BackupApp
from arsoft.backup.BackupConfig import BackupConfig
from arsoft.filelist import FileList, FileListItem
from arsoft.rsync import Rsync

class ARSoftBackupApp(BackupApp):

    def __init__(self):
        BackupApp.__init__(self, 'arsoft-backup')
        self._verbose = False
        self._dryrun = False

    def _check_config(self):
        ret = True
        backup_dir = self.config.backup_directory
        if backup_dir is None or len(backup_dir) == 0:
            sys.stderr.write('No backup directory configured in %s\n' % (self.config.main_conf) )
            ret = False
        if self._verbose:
            print(self.config)
        return ret

    def _on_system_startup(self):
        if self.config.eject_unused_backup_discs:
            print('eject unused discs')
            if self._diskmgr.eject():
                ret = 0
            else:
                ret = 1
        else:
            # nothing to do here
            ret = 0
        return ret
    
    def _do_rsync(self):
        backup_dir = self.session.backup_dir
        if backup_dir is None:
            return False

        previous_backup_dir = None
        if self.config.use_filesystem_hardlinks:
            if self.previous_backups.last_full_backup:
                previous_backup_dir = self.previous_backups.last_full_backup.fullpath

        if backup_dir[-1] != '/':
            backup_dir += '/'

        # build the final filelist (include and exclude)
        source_filelist_include = FileList()
        if self.config.filelist_include:
            source_filelist_include.append(self.config.filelist_include)
        source_filelist_include.append(self.filelist_include)
        
        source_filelist_exclude = FileList()
        if self.config.filelist_exclude:
            source_filelist_exclude.append(self.config.filelist_exclude)
        source_filelist_exclude.append(self.filelist_exclude)

        if not source_filelist_include.empty():
            if Rsync.is_link_dest_valid(backup_dir, previous_backup_dir):
                linkDest = previous_backup_dir
            else:
                linkDest = None
            inst = Rsync(source=source_filelist_include, dest=backup_dir, linkDest=previous_backup_dir, exclude=source_filelist_exclude,
                         delete=True, deleteExcluded=True, 
                         use_ssh=self.config.use_ssh_for_rsync, ssh_key=self.config.ssh_identity_file,
                         dryrun=self._dryrun, verbose=self._verbose)
            ret = inst.execute()
        else:
            # everything OK since there is nothing to do
            ret = True
        return ret
    
    def _perform_backup(self):
        if not self._check_config():
            return 1
        
        success = True
        failure_message = None
        self.load_previous()

        BackupApp.start_session(self)

        if not BackupApp.prepare_destination(self):
            success = False
            failure_message = 'Failed to prepare backup'
        else:
            ret = 0
            self.plugin_notify_start_backup()
            self.plugin_notify_perform_backup()
            self.plugin_notify_backup_complete()

            self.plugin_notify_start_rsync()

            # rsync to backup destination/backup_dir
            if not self._do_rsync():
                success = False
                failure_message = 'rsync failure'

            self.plugin_notify_rsync_complete()

            # remove old data and state
            self.manage_retention()

        if not BackupApp.shutdown_destination(self):
            success = False
            failure_message = 'Failed to shut down backup correctly'

        BackupApp.finish_session(self, success, failure_message)
        
        if success:
            ret = 0
        else:
            ret = -1
        return ret
    
    def _show_status(self):
        if not self._check_config():
            return 1

        print('Active Plugins:   %s' % (','.join(self.config.active_plugins)))
        print('Backup directory: %s' % (self.config.backup_directory))
        print('Retention time:   %s' % (self.config.retention_time))
        print('Retention count:   %s' % (self.config.retention_count))

        if not self.load_previous():
            return 1

        print('Last success: %s' % (self.job_state.last_success))
        print('Last failure: %s' % (self.job_state.last_failure))
        for item in self.job_state.history:
            print('%s (%s)' % (item.date, 'Success' if item.success else 'Failure'))
            print('  Log file:  %s' % (item.logfile))
            print('  Start:     %s ' % (item.startdate))
            print('  End:       %s ' % (item.enddate))
            print('  Directory: %s' % (item.backup_dir))

        print('Previous backups:')
        for bak in self.previous_backups:
            if bak.session is None:
                print('  %s in %s' % (bak.timestamp, bak.fullpath))
            else:
                print('  %s in %s (got session)' % (bak.timestamp, bak.fullpath))
        
        if self.previous_backups.last_full_backup:
            print('Last backup: %s in %s' % (self.previous_backups.last_full_backup.timestamp, self.previous_backups.last_full_backup.fullpath))
        else:
            print('Last backup: None')

        ret = 0
        return ret
    
    def _show_log(self):
        ret = 0
        
        print('Last success: %s' % (self.job_state.last_success))
        print('Last failure: %s' % (self.job_state.last_failure))
        for item in self.job_state.history:
            print('%s (%s)' % (item.date, 'Success' if item.success else 'Failure'))
            print('  Log file:  %s' % (item.logfile))
            print('  Start:     %s ' % (item.startdate))
            print('  End:       %s ' % (item.enddate))
            print('  Directory: %s' % (item.backup_dir))

        return ret
    
    def _cleanup(self):
        if not self._check_config():
            return 1

        print('Backup directory: %s' % (self.config.backup_directory))
        print('Retention time:   %s' % (self.config.retention_time))
        print('Retention count:   %s' % (self.config.retention_count))

        if not self.load_previous():
            return 1
        self.manage_retention()
        return 0

    def main(self, argv=None):
        #=============================================================================================
        # process command line
        #=============================================================================================
        parser = argparse.ArgumentParser(description='frontend for the AR Soft backup functionality.')
        parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='enable verbose output of this script.')
        parser.add_argument('-n', '--dry-run', dest='dryrun', action='store_true', help='Don\'t actually run any commands; just print them.')

        parser.add_argument('-R', '--root-directory', dest='rootdir', default='/', help='specifies the root directory for operations.')
        parser.add_argument('-C', '--config-directory', dest='configdir', default='/etc/arsoft-backup', help='name of the directory containing the backup configuration.')
        parser.add_argument('-S', '--state-directory', dest='statedir', default='/var/lib/arsoft-backup', help='name of the directory containing the state of all backup jobs.')
        parser.add_argument('--system-startup', dest='system_startup', action='store_true', help='prepare the backup discs after the system has been started.')
        parser.add_argument('--backup', dest='perform_backup', action='store_true', help='starts a new backup.')
        parser.add_argument('--status', dest='show_status', action='store_true', help='shows the status of the backup.')
        parser.add_argument('--cleanup', dest='cleanup', action='store_true', help='clean up the backups')
        parser.add_argument('--log', dest='show_log', action='store_true', help='shows the log/history of the backup.')

        args = parser.parse_args()

        self._verbose = args.verbose
        self._dryrun = args.dryrun
        
        rootdir = os.path.abspath(args.rootdir)
        if not os.path.isdir(rootdir):
            sys.stderr.write('Given root directory %s does not exist.\n' % (rootdir))
            ret = 2
        else:
            configdir = os.path.realpath(rootdir + args.configdir)
            statedir = os.path.realpath(rootdir + args.statedir)

            if not self.reinitialize(configdir, statedir):
                sys.stderr.write('Failed to load configuration from %s.\n' % (args.configdir)) 
                ret = 1
            else:
                if self._verbose:
                    print(self.config)
                if args.system_startup:
                    ret = self._on_system_startup()
                elif args.perform_backup:
                    ret = self._perform_backup()
                elif args.show_status:
                    ret = self._show_status()
                elif args.show_log:
                    ret = self._show_log()
                elif args.cleanup:
                    ret = self._cleanup()
                else:
                    sys.stderr.write('No operation specified.\n')
                    parser.print_help()
                    ret = 1
        self.cleanup()
        return ret


if __name__ == "__main__":
    app = ARSoftBackupApp()
    sys.exit(app.main(sys.argv))
