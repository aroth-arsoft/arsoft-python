#!/usr/bin/python

from xml.dom.minidom import parse, getDOMImplementation
import argparse
import sys

class autofs_ldap_auth_config(object):

    def __init__(self):
        self.m_conf_file = '/etc/autofs_ldap_auth.conf'
        self._close()
        
    def _close(self):
        self.m_dom = None
        self.m_authrequired = None
        self.m_usetls = None
        self.m_tlsrequired = None
        
    def _read(self):
        self._close()
        try:
            auth_conf_fobj = open(self.m_conf_file, 'r')
        except:
            auth_conf_fobj = None
            pass
        if auth_conf_fobj is None:
            print('failed to open ' + self.m_conf_file)
            ret = False
        else:
            self.m_dom = parse(auth_conf_fobj)
            auth_conf_fobj.close()
            if self.m_dom is None:
                print('failed to parse ' + self.m_conf_file)
                ret = False
            else:
                ret = self._load()
        return ret
        
    def _load(self):
        ret = False
        if self.m_dom is not None:
            elems = self.m_dom.getElementsByTagName("autofs_ldap_sasl_conf")
            if elems is not None and len(elems) > 0:
                sasl_conf = elems[0]
                if sasl_conf.hasAttribute('authrequired'):
                    self.m_authrequired = sasl_conf.getAttribute('authrequired')
                else:
                    self.m_authrequired = 'no'
                if sasl_conf.hasAttribute('usetls'):
                    self.m_usetls = sasl_conf.getAttribute('usetls')
                else:
                    self.m_usetls = 'no'
                if sasl_conf.hasAttribute('tlsrequired'):
                    self.m_tlsrequired = sasl_conf.getAttribute('tlsrequired')
                else:
                    self.m_tlsrequired = 'no'
                ret = True
        return ret
        
    def _save(self):
        impl = getDOMImplementation()
        if self.m_dom is None:
            self.m_dom = impl.createDocument(None, "autofs_ldap_sasl_conf", None)        
        
        elems = self.m_dom.getElementsByTagName("autofs_ldap_sasl_conf")
        if elems is not None and len(elems) > 0:
            sasl_conf = elems[0]
            sasl_conf.setAttribute('usetls', self.m_usetls)
            sasl_conf.setAttribute('tlsrequired', self.m_tlsrequired)
            sasl_conf.setAttribute('authrequired', self.m_authrequired)

    def _write(self):
        self._save()
        if self.m_dom is not None:
            auth_conf_fobj_w = open(self.m_conf_file, 'w')
            self.m_dom.writexml(auth_conf_fobj_w, indent="    ", addindent="", newl="\n")
            ret = True
        else:
            ret = False
        return ret
        
    def _dump(self):
        if self.m_dom is not None:
            print('sasl authrequired: ' + str(self.m_authrequired))
            print('sasl usetls: ' + str(self.m_usetls))
            print('sasl tlsrequired: ' + str(self.m_tlsrequired))
        else:
            print('no DOM')

    def main(self):
        #=============================================================================================
        # process command line
        #=============================================================================================
        parser = argparse.ArgumentParser(description='configures the authentication for autofs')
        parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='enable verbose output of this script.')
        parser.add_argument('--usetls', dest='usetls', action='store', help='specify to use TLS to access LDAP or not.', choices=['yes', 'no'])
        parser.add_argument('--tlsrequired', dest='tlsrequired', action='store', help='specify to if TLS is required not.', choices=['yes', 'no'])
        parser.add_argument('--authrequired', dest='authrequired', action='store', help='specify to use authenticate to LDAP or not.', choices=['yes', 'no'])

        args = parser.parse_args()

        hasChanged = False
        self._read()
        if args.verbose:
            self._dump()
        if args.usetls is not None:
            if self.m_usetls != args.usetls:
                self.m_usetls = args.usetls
                hasChanged = True
        if args.tlsrequired is not None:
            if self.m_tlsrequired != args.tlsrequired:
                self.m_tlsrequired = args.tlsrequired
                hasChanged = True
        if args.authrequired is not None:
            if self.m_authrequired != args.authrequired:
                self.m_authrequired = args.authrequired
                hasChanged = True
        if args.verbose:
            self._dump()
        if hasChanged:
            if args.verbose:
                print('save changed configuration')
            if self._write():
                ret = 2
            else:
                ret = 1
        else:
            if args.verbose:
                print('configuration unchanged')
            ret = 0
        return ret

if __name__ == "__main__":
    app =  autofs_ldap_auth_config()
    ret = app.main()
    sys.exit(ret)
