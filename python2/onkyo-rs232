#!/usr/bin/python
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; mixedindent off; indent-mode python;

# onkyo-rs232 <cmd> <cmd2> <cmd3> ...

import sys, time
import serial
import argparse
import re
from arsoft.eiscp.core import eISCP, command_to_iscp, iscp_to_command

__version__ = '1.0'

DEFAULT_DEVFILE = '/dev/ttyUSB0'

ONKYO_HIGHLEVEL_COMMANDS = {
    'power_on': 'PWR01',
    'power_off': 'PWR00',
    'mute_on': 'AMT01',
    'mute_off': 'AMT00',
    'mute_status': 'AMTQSTN',

    'sleep_status': 'SLPQSTN',
    'sleep_off': 'SLPOFF',

    'input_status': 'SLIQSTN',

    'sound_mode_stereo': 'LMD00',
    'sound_mode_direct': 'LMD01',
    'sound_mode_surround': 'LMD02',
    'sound_mode_film': 'LMD03',
    'sound_mode_thx': 'LMD04',
    'sound_mode_action': 'LMD05',
    'sound_mode_musical': 'LMD06',
    'sound_mode_mono_movie': 'LMD07',
    'sound_mode_orechstra': 'LMD08',
    'sound_mode_unplugged': 'LMD09',
    'sound_mode_studio_mix': 'LMD0A',
    'sound_mode_tvlogic': 'LMD0B',
    'sound_mode_all_ch_stereo': 'LMD0C',
    'sound_mode_theater_dimensional': 'LMD0D',
    'sound_mode_enhanced': 'LMD0E',
    'sound_mode_mono': 'LMD0F',
    'sound_mode_pure_audio': 'LMD11',
    'sound_mode_multiplex': 'LMD12',
    'sound_mode_full_mono': 'LMD13',
    'sound_mode_dolby_virtual': 'LMD14',
    'sound_mode_51_surround': 'LMD40',
    'sound_mode_dolby_ex_dts_ex': 'LMD41',
    'sound_mode_thx_surround_ex': 'LMD42',
    'sound_mode_u2_cinema': 'LMD50',
    'sound_mode_music_mode': 'LMD51',
    'sound_mode_games_mode': 'LMD52',
    'sound_mode_plii_movie': 'LMD80',
    'sound_mode_plii_music': 'LMD81',
    'sound_mode_neo6_cinema': 'LMD82',
    'sound_mode_neo6_music': 'LMD83',
    'sound_mode_plii_thx_cinema': 'LMD84',
    'sound_mode_neo6_thx_cinema': 'LMD85',
    'sound_mode_plii_game': 'LMD86',
    'sound_mode_neural_surround': 'LMD87',
    'sound_mode_neural_thx': 'LMD88',
    'sound_mode_plii_thx_games': 'LMD89',
    'sound_mode_neo6_thx_games': 'LMD8A',
    
    'master_volume_up': 'MVLUP',
    'master_volume_down': 'MVLDOWN',
    }

SPECIAL_HIGHLEVEL_COMMANDS = [
    'mute_toggle',
    'input'
    ]

ONKYO_HIGHLEVEL_COMMANDS_WITH_ARGS = {
    re.compile(r'sleep([0-9]{1,2})'): lambda arg: 'SLP%02i' % int(arg),
    re.compile(r'input([0-9]{2}|[a-zA-Z0-9/]+)'): lambda arg: 'SLI%02X' % onkyo_input_channel_as_num(arg),
    }

ONKYO_INPUT_NUM_STR = {
    0x01: ('CBL/SAT', 'CABLE', 'SATELLITE' ),
    0x02: ('GAME', ),
    0x03: ('AUX1', ),
    0x04: ('AUX2', ),
    0x05: ('PC', ),
    0x06: ('VIDEO7', ),
    0x10: ('BD/DVD', 'BD', 'DVD'),
    0x20: ('TAPE1', ),
    0x21: ('TAPE2', ),
    0x22: ('PHONO', ),
    0x23: ('CD', ),
    0x24: ('FM', ),
    0x25: ('AM', ),
    0x26: ('TUNER', ),
    0x27: ('DLNA', ),
    0x28: ('INTERNET RADIO', 'NETRADIO'),
    0x29: ('USB(Front)', ),
    0x2A: ('USB(Rear)', ),
    0x2B: ('NET', ),
    0x2C: ('USB(toggle)',),
    0x40: ('Universal PORT', ),
    0x30: ('Multi CH', 'MCH'),
    0x31: ('XM', ),
    0x32: ('SERIUS', )
    }

def onkyo_input_channel_as_num(arg):
    try:
        ret = int(arg)
    except ValueError:
        ret = None
        arg_lower = arg.lower()
        for input_num, input_names in ONKYO_INPUT_NUM_STR.items():
            for name in input_names:
                if name.lower() == arg_lower:
                    ret = input_num
                    break
    return ret

class OnkyoRS232(object):
    def __init__(self):
        self.verbose = False
        self.quiet = False
        self.devfile = None
        self.host = None
        self.ser = None
        self.net = None
        
    def _get_raw_command(self, cmd):
        cmd = cmd.lower()
        if cmd in ONKYO_HIGHLEVEL_COMMANDS:
            raw_cmd = ONKYO_HIGHLEVEL_COMMANDS[cmd]
            ret = '!1' + raw_cmd if self.ser is not None else raw_cmd
        else:
            ret = None
            for re_cmd, re_raw_cmd in ONKYO_HIGHLEVEL_COMMANDS_WITH_ARGS.iteritems():
                m = re_cmd.match(cmd)
                if m:
                    if m.groups:
                        raw_cmd = re_raw_cmd(m.group(1))
                    ret = '!1' + raw_cmd if self.ser is not None else raw_cmd
                    break
        return ret
    
    def _is_special_command(self, cmd):
        cmd = cmd.lower()
        ret = True if cmd in SPECIAL_HIGHLEVEL_COMMANDS else False
        return ret
    
    def _special_command(self, cmd):
        cmd = cmd.lower()
        if cmd == 'mute_toggle':
            status_cmd = ONKYO_HIGHLEVEL_COMMANDS['mute_status']
            if self.ser is not None:
                self.ser.write(status_cmd + '\r\n')      #write a string
                resp = self.ser.readline()
                mute_is_off = True if int(resp[6]) == 0 else False
                #print('got resp %s -> %x' % (resp, int(resp[6])))
            elif self.net is not None:
                resp = self.net.raw(status_cmd + '\r\n')      #write a string
                mute_is_off = True if int(resp[4]) == 0 else False
                #print('got resp %s -> %x' % (resp, int(resp[4])))
            else:
                mute_is_off = False
            if mute_is_off:
                #print('mute is off')
                ret = self._get_raw_command('mute_on')
            else:
                #print('mute is on')
                ret = self._get_raw_command('mute_off')
        elif cmd == 'input':
            status_cmd = ONKYO_HIGHLEVEL_COMMANDS['input_status']
            if self.ser is not None:
                self.ser.write(status_cmd + '\r\n')      #write a string
                resp = self.ser.readline()
                input_num = int(resp[5:7], 16)
                #print('got resp %s -> %x' % (resp, int(resp[6])))
            elif self.net is not None:
                resp = self.net.raw(status_cmd + '\r\n')      #write a string
                input_num = int(resp[3:5], 16)
            else:
                input_num = 0
            if input_num in ONKYO_INPUT_NUM_STR:
                input_names = ONKYO_INPUT_NUM_STR[input_num]
                print(input_names[0])
            else:
                print('Unknown %x' % input_num)
            ret = None
        else:
            ret = None
        return ret
    
    def discover(self, timeout=5):
        for receiver in eISCP.discover(timeout=timeout):
            print('%s %s:%s' % (receiver.info['model_name'], receiver.host, receiver.port) )
        return 0
    
    def version(self):
        print('Version %s' % __version__)
        return 0

    def list_commands(self):
        for (cmd_name, cmd_raw) in ONKYO_HIGHLEVEL_COMMANDS.iteritems():
            print(cmd_name)
        for (cmd_name) in SPECIAL_HIGHLEVEL_COMMANDS:
            print(cmd_name)
        for (cmd_name_re, cmd_raw_re) in ONKYO_HIGHLEVEL_COMMANDS_WITH_ARGS.iteritems():
            print(cmd_name_re.pattern)
        return 0

    def main(self):
        #=============================================================================================
        # process command line
        #=============================================================================================
        parser = argparse.ArgumentParser(description='send control command to a Onkyo using a RS232/LAN connection.')
        parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='enable verbose output.')
        parser.add_argument('-q', '--quiet', dest='quiet', action='store_true', help='do not output the response.')
        parser.add_argument('-r', '--raw', dest='use_raw_command', action='store_true', help='interpret given commands as raw (without !1 prefix).')
        parser.add_argument('--discover', dest='discover', action='store_true', help='try to discover any devices in the network.')
        parser.add_argument('--remote', dest='remote', action='store_true', help='use Onkyo Remote')
        parser.add_argument('--version', dest='version', action='store_true', help='shows the version and exits.')
        parser.add_argument('--port', dest='port', metavar='PORT', type=int, help='use the specified serial port number.')
        parser.add_argument('--usbport', dest='usbport', metavar='USBPORT', type=int, help='use the specified USB serial port number.')
        parser.add_argument('--dev', dest='device', metavar='DEV', help='use the specified device file for communication.')
        parser.add_argument('--list-commands', dest='list_commands', action='store_true', help='shows the list of available commands.')
        parser.add_argument('-H', '--host', dest='host', metavar='HOST', help='use the specified host for communication.')
        parser.add_argument('-P', '--udpport', dest='udpport', default=60128, metavar='PORT', type=int, help='use the specified UDP port number.')
        parser.add_argument('command', metavar='CMD', nargs='*', help='commands to send to the receiver')

        args = parser.parse_args()
        self.verbose = args.verbose
        self.quiet = args.quiet
        self.use_raw_command = args.use_raw_command

        if args.version:
            return self.version()

        if args.list_commands:
            return self.list_commands()

        if args.discover:
            return self.discover()
        
        if args.device:
            self.devfile = args.device
        elif args.port:
            self.devfile = '/dev/ttyS%i' % args.port
        elif args.usbport:
            self.devfile = '/dev/ttyUSB%i' % args.usbport
        elif args.host:
            self.host = args.host
        elif args.remote:
            self.host = 'onkyo'
        else:
            self.devfile = DEFAULT_DEVFILE

        if self.devfile:
            try:
                self.ser = serial.Serial(self.devfile, 9600, timeout=1)
            except IOError as e:
                self.ser = None
                sys.stderr.write('Failed to open serial port %s; %s\n' % (self.devfile, str(e)))
                ret = 2

            if self.ser:
                ret = 0
                cmd_in_progress = 0
                num_commands = len(args.command)
                for cmd in args.command:
                    if self.use_raw_command:
                        raw_cmd = "!1%s" % cmd
                    else:
                        if self._is_special_command(cmd):
                            raw_cmd = self._special_command(cmd)
                        else:
                            raw_cmd = self._get_raw_command(cmd)

                    if raw_cmd:
                        if self.verbose:
                            print("send %s" % raw_cmd)
                        self.ser.write(raw_cmd + '\r\n')      #write a string
                        if raw_cmd[5] == 'Q':
                            resp = self.ser.readline()
                            if not self.quiet:
                                sys.stdout.write(resp)
                        elif cmd_in_progress + 1 < num_commands:
                            time.sleep(0.2)
                    cmd_in_progress = cmd_in_progress + 1
                self.ser.close()             #close port 
        elif self.host:
            self.net = eISCP(self.host, args.udpport)
            
            if self.net:
                ret = 0
                cmd_in_progress = 0
                num_commands = len(args.command)
                for cmd in args.command:
                    if self.use_raw_command:
                        raw_cmd = cmd
                    else:
                        if self._is_special_command(cmd):
                            raw_cmd = self._special_command(cmd)
                        else:
                            raw_cmd = self._get_raw_command(cmd)

                    if raw_cmd:
                        if self.verbose:
                            print("send %s" % raw_cmd)
                        response = self.net.raw(raw_cmd + '\r\n')      #write a string
                        if raw_cmd[3] == 'Q':
                            #response = iscp_to_command(response)
                            if not self.quiet:
                                sys.stdout.write(str(response))
                        elif cmd_in_progress + 1 < num_commands:
                            time.sleep(0.2)
                    cmd_in_progress = cmd_in_progress + 1
                self.net.disconnect()
            ret = 0
        return ret

if __name__ == "__main__":
    app =  OnkyoRS232()
    sys.exit(app.main())
