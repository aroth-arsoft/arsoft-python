#!/usr/bin/python
import os,sys
import re

from arsoft.nagios import NagiosPlugin, OK, WARNING, CRITICAL, UNKNOWN
from arsoft.utils import runcmdAndGetData

## Create the plugin option
np = NagiosPlugin(must_threshold=False)

np.add_value('uptime', 'number of seconds the printer is running', guitext='up time', uom='s', warning=True)

## This starts the actual plugin activation
np.activate()

## Use a custom load average file, if specified to
## This is really only used for debugging purposes, and showing off the
## 'add_arg' method
if np['host']:
    target_host = np['host']
else:
    np.nagios_exit(UNKNOWN, 'No hostname for printer specified.')

script_dir = os.path.dirname(os.path.realpath(__file__))
test_file_dir = os.path.join(script_dir, 'test_data')

def run_ipptool_test(test_name):
    args = [ '/usr/bin/ipptool', 'ipp://' + target_host + '/', '-t', os.path.join(test_file_dir, test_name) ]
    (sts, stdoutdata, stderrdata) = runcmdAndGetData(args)
    if sts == 0:
        ATTRRE = re.compile(
                r'^\s*(?P<attribute>[a-zA-Z\-]+)\s+\((?P<attrtype>[a-zA-Z\-]+)\)\s+=\s+(?P<value>.*)$'
                )

        attributes = {}
        for line in stdoutdata.split('\n'):
            mo = ATTRRE.match(line)
            if mo:
                attribute = mo.group('attribute')
                attrtype = mo.group('attrtype')
                value = mo.group('value')
                attributes[attribute] = { 'type':attrtype, 'value':value}
    else:
        attributes = None
    return attributes, sts, stderrdata

def get_attr(attributes, attr_name, default=None):
    if attr_name in attributes:
        ret = attributes[attr_name]['value']
    else:
        ret = default
    return ret

printer_attributes, sts, stderrdata = run_ipptool_test('check_ipp.test')
if printer_attributes is not None:
    printer_name = get_attr(printer_attributes, 'printer-name')
    printer_make_and_model = get_attr(printer_attributes, 'printer-make-and-model')
    if printer_name is not None and printer_make_and_model is not None:
    
        #jobs_attributes = run_ipptool_test('check_ipp_jobs.test')
        #print(jobs_attributes)
        
        #completed_jobs_attributes = run_ipptool_test('check_ipp_completed_jobs.test')
        #print(completed_jobs_attributes)

        up_time = get_attr(printer_attributes, 'printer-up-time', 0)
        ## set the values
        np.set_value('uptime', up_time)

        (exit_code, exit_message) = np.check_values()

        if exit_code == OK:
            exit_message = '%s %s' % (printer_name, printer_make_and_model)

        np.nagios_exit(exit_code, exit_message)
    else:
        np.nagios_exit(CRITICAL, 'invalid data without printer name')
else:
    np.nagios_exit(CRITICAL, 'ipptool returned error %i: %s' % (sts, stderrdata))
