#!/usr/bin/python
import os,sys
import re
import datetime

LINE_PATTERN = r'^\[\s*(?P<timestamp>[0-9]{2}\:[0-9]{2}\:[0-9]{2})\]\s((?P<loglevel>[A-Z][a-z]+)\:\s+)?(?P<message>.*)$'
START_END_DATE_PATTERN = r'^(Start|End) date is (?P<timestamp>.*)$'

logfile = '/var/log/rkhunter.log'
line_re = re.compile(LINE_PATTERN)
start_end_date_re = re.compile(START_END_DATE_PATTERN)

def _parse_timestamp(timestamp, ref_timestamp):
    ret = datetime.datetime.strptime(timestamp, '%H:%M:%S')
    if ret:
        if not ref_timestamp:
            ref_timestamp = datetime.datetime.now()
        ret = ret.replace(year=ref_timestamp.year, month=ref_timestamp.month, day=ref_timestamp.day)
    return ret

class MessageObject(object):
    def __init__(self, timestamp=None, loglevel=None, message=None):
        self.timestamp = timestamp
        if loglevel is not None:
            self.loglevel = loglevel.upper()
        else:
            self.loglevel = None
        self.message = message

class rkhunter_mk_check_plugin(object):
    def __init__(self, logfile='/var/log/rkhunter.log'):
        self.start_date = None
        self.end_date = None
        self.num_infects = 0
        self.num_criticals = 0
        self.num_errors = 0
        self.num_warnings = 0
        self.num_infos = 0
        self.num_file_properties_changed = 0
        self.changed_file_properties = []
        self.current_message = None
        self.check_time = 0
        self.check_age = 0

        self._process(logfile)

    def _process_message(self, msgobj):
        if msgobj.loglevel == 'WARNING':
            if 'The file properties have changed:' in msgobj.message:
                self.num_file_properties_changed += 1
                f_start = msgobj.message.find('File:')
                if f_start > 0:
                    f_start += 6
                    f_end = msgobj.message.find('\n', f_start)
                    f_name = msgobj.message[f_start:f_end]
                    self.changed_file_properties.append(f_name)
            else:
                self.num_warnings += 1
        elif msgobj.loglevel == 'ERROR':
            self.num_errors += 1
        elif msgobj.loglevel == 'INFO':
            self.num_infos += 1

    def _process(self, logfile):
        try:
            f = open(logfile, 'r')
            for line in f:
                mo = line_re.match(line)
                if mo:
                    mogrp = mo.groupdict()
                    message_text = mo.group('message')
                    loglevel = mo.group('loglevel') if 'loglevel' in mogrp else None

                    if self.start_date is None:
                        modate = start_end_date_re.match(message_text)
                        if modate:
                            self.start_date = datetime.datetime.strptime(modate.group('timestamp'), "%a %b %d %H:%M:%S %Z %Y")
                    elif self.end_date is None:
                        modate = start_end_date_re.match(message_text)
                        if modate:
                            self.end_date = datetime.datetime.strptime(modate.group('timestamp'), "%a %b %d %H:%M:%S %Z %Y")

                    timestamp = _parse_timestamp(mo.group('timestamp'), self.start_date)

                    if loglevel is None:
                        if self.current_message is not None:
                            self.current_message.message += '\n' + message_text
                    else:
                        if self.current_message is not None:
                            self._process_message(self.current_message)
                        self.current_message = MessageObject(timestamp, loglevel, message_text)
            f.close()
            if self.current_message is not None:
                self._process_message(self.current_message)

        except IOError as e:
            exit_code = CRITICAL
            exit_message = str(e)

        if self.start_date is not None and self.end_date is not None:
            now = datetime.datetime.now()
            self.check_time = (self.end_date - self.start_date).total_seconds()
            self.check_age = (now - self.end_date).total_seconds()

    def output(self):
        print('check_time %i' % self.check_time)
        print('check_age %i' % self.check_age)
        print('num_infects %i' % self.num_infects)
        print('num_criticals %i' % self.num_criticals)
        print('num_errors %i' % self.num_errors)
        print('num_warnings %i' % self.num_warnings)
        print('num_infos %i' % self.num_infos)
        print('num_file_properties_changed %i' % self.num_file_properties_changed)
        print('changed_file_properties %s' % ','.join(self.changed_file_properties))

if __name__ == "__main__":
    print("<<<rkhunter>>>")
    pl = rkhunter_mk_check_plugin()
    pl.output()



