#!/usr/bin/python
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; mixedindent off; indent-mode python;

import os
import errno
import time
import yaml
import glob
from arsoft.inifile import IniFile
from arsoft.check_mk import *
from arsoft.utils import runcmdAndGetData

class puppet_agent_check_mk_plugin(object):

    DEFAULTS = '/etc/default/puppet'
    STATE_DIR = '/var/lib/puppet/state'
    LOCKFILE = STATE_DIR + '/agent_disabled.lock'
    STATEFILE = STATE_DIR + '/last_run_summary.yaml'
    PIDFILE = '/var/run/puppet/agent.pid'

    def __init__(self):
        self._time_last_run = 0
        self._config_num = 0
        self._version = ''
        self._num_failed = 0
        self._num_failed_to_restart = 0
        self._num_changed = 0
        self._num_skipped = 0
        self._num_restarted = 0
        self._num_out_of_sync = 0
        self._num_total = 0
        self._last_run_summary = {}
        self._lock_file = {}
        self._pid = 0
        self._running = False
        self._enabled = True
        self._disabled_message = ''
        self._start = True

        self._get_config()
        if has_systemd():
            self._pid, self._running = systemd_status('puppet')
        else:
            self._pid, self._running = check_running(self.PIDFILE)
        self._load_last_run_summary()
        self._load_lock_file()

    def _get_config(self):
        if has_systemd():
            self._start = systemd_is_enabled('puppet')
        else:
            self._start = is_debian_service_enabled('puppet')

    def _load_lock_file(self):
        try:
            with open(self.LOCKFILE, 'r') as f:
                self._lock_file = yaml.load(f)
        except IOError:
            pass
        
        try:
            self._disabled_message = self._lock_file['disabled_message']
            self._enabled = False
        except KeyError:
            pass

    def _load_last_run_summary(self):
        now = time.time()
        try:
            with open(self.STATEFILE, 'r') as f:
                self._last_run_summary = yaml.load(f)
        except IOError:
            pass

        try:
            self._time_last_run = saveint(self._last_run_summary['time']['last_run'])
            self._config_num = saveint(self._last_run_summary['version']['config'])
            self._version = self._last_run_summary['version']['puppet']
            if 'resources' in self._last_run_summary:
                self._num_failed = saveint(self._last_run_summary['resources']['failed'])
                self._num_failed_to_restart = saveint(self._last_run_summary['resources']['failed_to_restart'])
                self._num_changed = saveint(self._last_run_summary['resources']['changed'])
                self._num_skipped = saveint(self._last_run_summary['resources']['skipped'])
                self._num_restarted = saveint(self._last_run_summary['resources']['restarted'])
                self._num_out_of_sync = saveint(self._last_run_summary['resources']['out_of_sync'])
                self._num_total = saveint(self._last_run_summary['resources']['total'])
        except KeyError:
            pass

        self._time_since_last = now - self._time_last_run

    def status(self):
        print('time_last_run;%i' % self._time_last_run)
        print('version;%s' % self._version)
        print('enabled;%i' % self._enabled)
        print('disabled_message;%s' % self._disabled_message)
        print('config;%i' % self._config_num)
        print('num_failed;%i' % self._num_failed)
        print('num_failed_to_restart;%i' % self._num_failed_to_restart)
        print('num_changed;%i' % self._num_changed)
        print('num_skipped;%i' % self._num_skipped)
        print('num_restarted;%i' % self._num_restarted)
        print('num_out_of_sync;%i' % self._num_out_of_sync)
        print('num_total;%i' % self._num_total)
        print('pid;%i' % self._pid)
        print('start;%i' % self._start)
        print('running;%i' % self._running)

if __name__ == "__main__":
    print("<<<puppet_agent:sep(59)>>>")
    pl = puppet_agent_check_mk_plugin()
    pl.status()



