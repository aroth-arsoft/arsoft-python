#!/usr/bin/python
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; mixedindent off; indent-mode python;

from arsoft.crypto import CertificateFile
import os.path
from arsoft.timestamp import timestamp_from_datetime
from arsoft.utils import runcmdAndGetData
import time

class postfix_cert_mk_check_plugin(object):

    def __init__(self):
        pass

    def _get_cert_expire(self, cert):
        ret = 0
        if cert:
            cert_file = str(cert.filename)
            if os.path.isfile(cert_file):
                num_certs = len(cert.certificates)
                if num_certs:
                    min_expire_cert = None
                    for cert in cert.certificates:
                        if min_expire_cert is None:
                            min_expire_cert = cert.expire_date
                        elif cert.expire_date < min_expire_cert:
                            min_expire_cert = cert.expire_date
                    if min_expire_cert:
                        ret = timestamp_from_datetime(min_expire_cert)
        return ret

    def _get_crl_expire(self, crl):
        ret = 0
        if crl:
            crl_file = str(crl.filename)
            if os.path.isfile(crl_file):
                if not crl.valid:
                    pass
                else:
                    num_revoked = len(crl.revoked)
        return ret

    def status(self):
        (sts, stdoutdata, stderrdata) = runcmdAndGetData('/usr/sbin/postconf')
        if sts == 0:
            for line in stdoutdata.splitlines():
                (key, value) = line.split('=',1)
                value = value.lstrip()
                key = key.rstrip()
                if 'cert_file' in key or 'CAfile' in key:
                    if os.path.isfile(value):
                        cert = CertificateFile(value)
                        print('%s %i' % (key, self._get_cert_expire(cert)))

if __name__ == "__main__":
    print("<<<postfix_cert>>>")
    pl = postfix_cert_mk_check_plugin()
    pl.status()



