#!/usr/bin/python
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; mixedindent off; indent-mode python;

from arsoft.utils import runcmdAndGetData
from arsoft.timestamp import strptime_as_timestamp
from arsoft.check_mk import *
import re
import os
import errno
import time
import sys

class systemd_check_mk_plugin(object):

    SYSTEMCTL = '/bin/systemctl'
    VERSION_RE = re.compile(r'^systemd\s+(?P<version>[0-9]+)?$')
    TIMEDATECTL = '/usr/bin/timedatectl'

    def __init__(self):
        self._version = ''
        self._features_enabled = []
        self._features_disabled = []
        self._timedate_info = {}
        self._failed_services = []

        self._get_version()
        self._get_timedate_status()
        self._get_failed()

    def _get_version(self):
        if not os.path.isfile(self.SYSTEMCTL):
            return
        (sts, stdoutdata, stderrdata) = runcmdAndGetData([self.SYSTEMCTL, '--version'])
        if sts == 0:
            lines = stdoutdata.splitlines()
            if lines:
                mo = self.VERSION_RE.match(lines[0])
                if mo:
                    mogrp = mo.groupdict()
                    self._version = mo.group('version')
                    for feature in lines[1].split(' '):
                        if feature[0] == '+':
                            self._features_enabled.append(feature[1:])
                        elif feature[0] == '-':
                            self._features_disabled.append(feature[1:])

    def _extract_time_server_from_status(self, status_line):
        idx = status_line.find('time server')
        if idx >= 0:
            server_info = status_line[idx + 12:]
            if ' ' in server_info:
                addr, name = server_info.split(' ', 1)
                if name[0] == '(':
                    if name[-1] == ')':
                        name = name[1:-1]
                    elif name[-2] == ')' and name[-1] == '.':
                        name = name[1:-2]
            else:
                addr = server_info
                name = server_info
            if not 'time_server' in self._timedate_info:
                print('set ts')
                self._timedate_info['time_server'] = [ addr, name ]

    def _get_timedate_status(self):
        if not os.path.isfile(self.TIMEDATECTL):
            return
        (sts, stdoutdata, stderrdata) = runcmdAndGetData([self.TIMEDATECTL, '--no-pager', 'status'], env={'LANG':'C'})
        if sts == 0:
            got_header = False
            for line in stdoutdata.splitlines():
                if not line:
                    got_header = True
                    continue
                if got_header:
                    pass
                else:
                    if not ':' in line:
                        continue
                    key, value = line.split(':', 1)
                    key = key.strip().replace(' ', '_').lower()
                    if key.startswith('next_') or key.startswith('last_'):
                        break 
                    value = value.strip()
                    if value == 'yes':
                        value = 1
                    elif value == 'no':
                        value = 0
                    if key.endswith('time'):
                        if key == 'rtc_time':
                            fmt = '%a %Y-%m-%d %H:%M:%S'
                        else:
                            fmt = '%a %Y-%m-%d %H:%M:%S %Z'
                        value = strptime_as_timestamp(value, fmt)
                    self._timedate_info[key] = value
        (sts, stdoutdata, stderrdata) = runcmdAndGetData([self.SYSTEMCTL, '--no-pager', 'status', 'systemd-timesyncd'], env={'LANG':'C'})
        if sts == 0:
            got_header = False
            for line in stdoutdata.splitlines():
                if not line:
                    got_header = True
                    continue
                if got_header:
                    idx = line.find('systemd-timesyncd')
                    if idx > 0:
                        idx = line.find(':', idx)
                        if idx > 0:
                            status_line = line[idx+1:].strip()
                            self._extract_time_server_from_status(status_line)
                else:
                    if not ':' in line:
                        continue
                    key, value = line.split(':', 1)
                    key = key.strip().replace(' ', '_').replace('-', '_').lower()
                    value = value.strip()
                    if len(value) > 2:
                        if value[0] == '"' and value[-1] == '"':
                            value = value[1:-2]
                        if value == 'yes':
                            value = 1
                        elif value == 'no':
                            value = 0
                    if key == 'status':
                        self._extract_time_server_from_status(value)
                    self._timedate_info[key] = value
    def _get_failed(self):
        (sts, stdoutdata, stderrdata) = runcmdAndGetData([self.SYSTEMCTL, '--failed', '--no-pager', '--no-legend'], env={'LANG':'C'})
        if sts == 0:
            got_header = False
            for line in stdoutdata.splitlines():
                elems = line.split(' ')
                if elems:
                    self._failed_services.append(elems[0])

    def status(self):
        if self._version:
            print("<<<systemd:sep(59)>>>")
            print('version;%s' % self._version)
            print('features_enabled;%s' % ','.join(self._features_enabled))
            print('features_disabled;%s' % ','.join(self._features_disabled))
            print('failed_services;%s' % ','.join(self._failed_services))
            for k,v in self._timedate_info.items():
                if isinstance(v, list):
                    print('timedatectl_%s;%s' % (k,';'.join(v)))
                else:
                    print('timedatectl_%s;%s' % (k,v))
        return 0

if __name__ == "__main__":
    pl = systemd_check_mk_plugin()
    sys.exit(pl.status())
