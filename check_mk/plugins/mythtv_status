#!/usr/bin/python
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; mixedindent off; indent-mode python;

from arsoft.crypto import CertificateFile
import os.path
from arsoft.timestamp import timestamp_from_datetime
from arsoft.utils import runcmdAndGetData
import time

from MythTV import MythBE
import MythTV.exceptions

class mythtv_status_check_mk_plugin(object):

    def __init__(self):
        self.myth_be = MythBE()

    def status(self):
        pending_recordings = self.myth_be.getPendingRecordings()
        upcoming_recordings = self.myth_be.getUpcomingRecordings()

        print('pending_recordings \"%s\"' % ','.join(pending_recordings))
        print('upcoming_recordings \"%s\"' % ','.join(upcoming_recordings))

        total_space, used_space = self.myth_be.getFreeSpaceSummary()

        print('total_space %i' % total_space)
        print('used_space %i' % used_space)

        load_1, load_5, load_15 = self.myth_be.getLoad()
        print('load %i %i %i' % (load_1, load_5, load_15))

        uptime = self.myth_be.getUptime()
        print('uptime %i' % (uptime.total_seconds()))

        recorder_ids = self.myth_be.getRecorderList()
        for id in recorder_ids:
            try:
                recording = self.myth_be.getCurrentRecording(id)
                if recording.programid is None:
                    recording = None
            except MythTV.exceptions.MythError:
                recording = None
            print('recorder %i %s' % (id, recording))


if __name__ == "__main__":
    print("<<<mythtv_status>>>")
    pl = mythtv_status_check_mk_plugin()
    pl.status()



