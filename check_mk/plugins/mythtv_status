#!/usr/bin/python
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; mixedindent off; indent-mode python;

def program_to_string_list(p):
    if p is None:
        return None
    return '%i|%i|%s|%s|%s|%s' % (p.chanid, p.channum if p.channum else 0, p.channame,
                                  p.recstartts.isoformat(),
                                  p.title,
                                  p.description
                                  )

def recording_list_to_string_list(reclist):
    ret = []
    for p in reclist:
        ret.append(program_to_string_list(p))
    return ret

class mythtv_status_check_mk_plugin(object):

    def __init__(self):
        self.myth_be = None
        try:
            from MythTV import MythBE
            self.myth_be = MythBE()
        except ImportError:
            pass

    def status(self):
        if self.myth_be is None:
            return

        print("<<<mythtv_status:sep(59)>>>")
        import MythTV.exceptions
        pending_recordings = recording_list_to_string_list(self.myth_be.getPendingRecordings())
        upcoming_recordings = recording_list_to_string_list(self.myth_be.getUpcomingRecordings())
        scheduled_recordings = recording_list_to_string_list(self.myth_be.getScheduledRecordings())
        conflicted_recordings = recording_list_to_string_list(self.myth_be.getConflictedRecordings())

        print('pending_recordings;%s' % ','.join(pending_recordings))
        print('upcoming_recordings;%s' % ','.join(upcoming_recordings))
        print('scheduled_recordings;%s' % ','.join(scheduled_recordings))
        print('conflicted_recordings;%s' % ','.join(conflicted_recordings))

        total_space, used_space = self.myth_be.getFreeSpaceSummary()

        print('total_space;%i' % total_space)
        print('used_space;%i' % used_space)

        load_1, load_5, load_15 = self.myth_be.getLoad()
        print('load;%i;%i;%i' % (load_1, load_5, load_15))

        uptime = self.myth_be.getUptime()
        print('uptime;%i' % (uptime.total_seconds()))

        recorder_ids = self.myth_be.getRecorderList()
        for id in recorder_ids:
            try:
                recording = self.myth_be.getCurrentRecording(id)
                print(program_to_string_list(recording))
                if recording.programid is None:
                    recording = None
            except MythTV.exceptions.MythError:
                recording = None
            print('recorder;%i;%s' % (id, program_to_string_list(recording)))


if __name__ == "__main__":
    pl = mythtv_status_check_mk_plugin()
    pl.status()



