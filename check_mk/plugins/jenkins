#!/usr/bin/python
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; mixedindent off; indent-mode python;

from arsoft.check_mk import *
import re
import os
import errno
import urllib2
import json
import sys

def str2bool(v):
    if isinstance(v, bool):
        return v
    else:
        return v.lower() in ("yes", "true", "t", "1")

class jenkins_check_mk_plugin(object):

    JENKINS_DEFAULTS = '/etc/default/jenkins'
    URI_BASE = '/jenkins'
    API_SUFFIX = '/api/json'
    PLUGIN_MANAGER_URI = '/pluginManager';
    COMPUTER_URI = '/computer'
    HOSTNAME = '127.0.0.1'
    PORT = 8080

    def __init__(self):
        self._installed = False
        self._version = ''
        self._version_info = ''
        self._pid = 0
        self._running = False
        self._base_url = 'http://%s:%i%s' % (self.HOSTNAME, self.PORT, self.URI_BASE)
        self._plugins = []
        self._plugin_updates = []
        self._disabled_plugins = []
        self._slaves = []
        self._jobs = []

        if os.path.isfile(self.JENKINS_DEFAULTS):
            self._installed = True
            self._get_process_state()
            if self._pid:
                self._get_plugin_info()
                self._get_slaves()
                self._get_jobs()


    def _get_plugin_info(self):
        url = self._base_url + self.PLUGIN_MANAGER_URI + self.API_SUFFIX + '?tree=plugins[active,enabled,hasUpdate,longName,version]'
        response = urllib2.urlopen(url)
        if response:
            headers = response.info()
            self._version = headers.get('X-Jenkins')
            plugin_tree = json.loads(response.read())
            for plugin in plugin_tree['plugins']:
                plugin_name = plugin['longName']
                if not plugin['enabled']:
                    self._disabled_plugins.append(plugin_name)
                else:
                    self._plugins.append(plugin_name)
                    if plugin['hasUpdate']:
                        self._plugin_updates.append(plugin_name)

    def _get_slaves(self):
        url = self._base_url + self.COMPUTER_URI + self.API_SUFFIX + '?tree=computer[displayName,idle,offline,offlineCauseReason,temporarilyOffline]'
        response = urllib2.urlopen(url)
        if response:
            computers_tree = json.loads(response.read())
            for computer in computers_tree['computer']:
                computer_name = computer['displayName']
                if computer_name == 'master':
                    continue

                slave_item = {
                    'display_name': computer_name,
                    'offline': str2bool(computer['offline']),
                    'offline_cause_reason': computer['offlineCauseReason'],
                    'idle': str2bool(computer['idle']),
                    'temporarily_offline': str2bool(computer['temporarilyOffline']),
                }
                self._slaves.append(slave_item)

    def _get_jobs(self):
        url = self._base_url + self.API_SUFFIX + '?tree=jobs[name,url,buildable,color,healthReport[score,description],lastBuild[number,duration,timestamp,result,building,estimatedDuration]]';
        response = urllib2.urlopen(url)
        if response:
            job_tree = json.loads(response.read())
            for job in job_tree['jobs']:
                lastBuild = job['lastBuild']

                healthReport = job['healthReport']
                healthReport = healthReport[0] if healthReport else None

                job_item = {
                    'name': job['name'],
                    'url': job['url'],
                    'color': job['color'],
                    'buildable': str2bool(job['buildable']),
                    'last_build_building': str2bool(lastBuild['building']) if lastBuild else False,
                    'last_build_number': lastBuild['number'] if lastBuild else 0,
                    'last_build_result': lastBuild['result'] if lastBuild else 'UNKNOWN',
                    'last_build_timestamp': lastBuild['timestamp'] if lastBuild else 0,
                    'last_build_duration': lastBuild['duration'] if lastBuild else 0,
                    'last_build_estimated_duration': lastBuild['estimatedDuration'] if lastBuild else 0,
                    'health_report_score': healthReport['score'] if healthReport else 0
                }
                self._jobs.append(job_item)

    def _get_process_state(self):
        if not os.path.isdir('/run/jenkins'):
            return
        (self._pid, self._running) = check_running('/run/jenkins/jenkins.pid')

    def status(self):
        if self._installed:
            print("<<<jenkins:sep(59)>>>")
            print('version;%s' % self._version)
            print('base_url;%s' % self._base_url)
            print('pid;%i' % self._pid)
            print('running;%i' % self._running)
            print('plugins;%s' % ','.join(self._plugins))
            print('plugin_updates;%s' % ','.join(self._plugin_updates))
            print('disabled_plugins;%s' % ','.join(self._disabled_plugins))
            for slave_item in self._slaves:
                display_name = slave_item['display_name']
                for k,v in slave_item.items():
                    if isinstance(v, bool):
                        print('slave;%s;%s;%i' % (display_name, k, v))
                    else:
                        print('slave;%s;%s;%s' % (display_name, k, v))
            for job_item in self._jobs:
                job_name = job_item['name']
                for k,v in job_item.items():
                    if isinstance(v, bool):
                        print('job;%s;%s;%i' % (job_name, k, v))
                    else:
                        print('job;%s;%s;%s' % (job_name, k, v))
        return 0

if __name__ == "__main__":
    pl = jenkins_check_mk_plugin()
    sys.exit(pl.status())
