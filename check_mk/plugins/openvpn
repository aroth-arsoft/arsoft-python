#!/usr/bin/python
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; mixedindent off; indent-mode python;

import arsoft.openvpn
import os.path
from arsoft.timestamp import timestamp_from_datetime
from arsoft.crypto.utils import check_mk_cert_file_info, check_mk_crl_file_info
import time
import sys

class openvpn_mk_check_plugin(object):

    def __init__(self):
        self._config = arsoft.openvpn.Config()
        self._systemconfig = arsoft.openvpn.SystemConfig()
        self._selected_vpns = self._config.names

    def status(self):
        for vpnname in self._selected_vpns:
            config_file = arsoft.openvpn.ConfigFile(config_name=vpnname)
            if not config_file.valid:
                sys.stderr.write('Failed to open configuration for VPN %s; error %s\n' % (vpnname, config_file.last_error))
                ret = self.ExitCode.ConfigurationError
            else:
                is_running = config_file.running
                status_file = arsoft.openvpn.StatusFile(config_file=config_file)
                autostart = True if vpnname in self._systemconfig.autostart else False
                last_update = timestamp_from_datetime(status_file.last_update) if status_file.last_update else 0
                last_state_change = timestamp_from_datetime(status_file.state.timestamp) if status_file.state and status_file.state.timestamp else 0
                now = time.time()
                print('%s;autostart;%i' % (vpnname, autostart))
                print('%s;running;%i' % (vpnname, is_running))
                print('%s;state;%s' % (vpnname, status_file.state.name))
                print('%s;state_text;%s' % (vpnname, status_file.state.long_state))
                print('%s;last_state_change;%i' % (vpnname, last_state_change))
                print('%s;state_age;%i' % (vpnname, now - last_state_change))
                print('%s;localip;%s' % (vpnname, status_file.state.localip))
                print('%s;remoteip;%s' % (vpnname, status_file.state.remoteip))
                print('%s;last_updated;%i' % (vpnname, last_update))
                print('%s;last_updated_age;%i' % (vpnname, now - last_update))
                check_mk_cert_file_info(config_file.cert_file, prefix=vpnname)
                check_mk_cert_file_info(config_file.ca_file, ca=True, prefix=vpnname)
                check_mk_crl_file_info(config_file.crl_file, prefix=vpnname)
                if config_file.server:
                    if config_file.client_config_files is not None:
                        print('%s;configured_clients;%s' % (vpnname, ','.join(config_file.client_config_files.keys())))
                    if status_file.connected_clients is not None:
                        print('%s;connected_clients;%s' % (vpnname, ','.join(status_file.connected_clients.keys())))
                if len(config_file.routes):
                    print('%s;routes;%s' % (vpnname, ','.join([ '%s/%s' % (network, netmask) for (network, netmask) in config_file.routes ])))
                if status_file.routing_table:
                    print('%s;routing_tabl;%s' % (vpnname, ','.join([ str(entry) for entry in status_file.routing_table.values() ])))
                if status_file.statistics:
                    for name in status_file.statistics:
                        print('%s;statistics.%s;%s' % (vpnname, name, getattr(status_file.statistics, name)))
        return 0

if __name__ == "__main__":
    print("<<<openvpn:sep(59)>>>")
    pl = openvpn_mk_check_plugin()
    sys.exit(pl.status())
