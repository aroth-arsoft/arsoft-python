#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#

from arsoft.check_mk import check_state

default_memory_usage_warn_threshold = None
default_memory_usage_crit_threshold = None

default_thread_count_warn_threshold = None
default_thread_count_crit_threshold = None

default_queuesize_warn_threshold = 2
default_queuesize_crit_threshold = 5

default_cacheratio_warn_threshold = None
default_cacheratio_crit_threshold = None

def inventory_puppetdb(checkname, info):

    ret = []
    if len(info) > 1:
        ret.append( ('daemon', (True) ) )
        ret.append( ('memory', (default_memory_usage_warn_threshold, default_memory_usage_crit_threshold) ) )
        ret.append( ('threads', (default_thread_count_warn_threshold, default_thread_count_crit_threshold) ) )
        ret.append( ('queue', (default_queuesize_warn_threshold, default_queuesize_crit_threshold) ) )
        ret.append( ('database', (default_cacheratio_warn_threshold, default_cacheratio_crit_threshold) ) )
    return ret

def check_puppetdb(item, params, info):

    state = check_state()
    data = {
        'running':0,
        'pid':0,
        'version':'',
        'memory_heapmemoryusage_max':0,
        'memory_heapmemoryusage_init':0,
        'memory_heapmemoryusage_used':0,
        'memory_heapmemoryusage_committed':0,
        'memory_nonheapmemoryusage_max':0,
        'memory_nonheapmemoryusage_init':0,
        'memory_nonheapmemoryusage_used':0,
        'memory_nonheapmemoryusage_committed':0,
                
        'threading_threadcount':0,
        'threading_daemonthreadcount':0,
        
        'mq_queuesize':0,
        'mq_averageenqueuetime':0.0,
        'mq_dispatchcount':0,
    
        'db_statementexecutetimeavg':0.0,
        'db_cachemiss':0,
        'db_cachehits':0,
        
        }

    for line in info:
        # if we don't have any upgrades listed, the line list
        # will only contain one element, eg. "upgrades\n"
        if len(line) < 2:
            continue

        key = line[0]
        value = line[1]
        if key == 'version':
            pass
        elif '.' in value:
            try:
                value = float(value)
            except ValueError:
                value = 0.0
        elif key != 'version':
            value = saveint(value)
        data[key] = value

    if item == 'daemon':
        (must_be_running) = params
        if must_be_running:
            if data['running'] == 0 or data['pid'] == 0:
                state.critical('Not running')
        else:
            if data['running'] != 0 or data['pid'] != 0:
                state.critical('Running PID %i' % data['pid'])

        state.append('Version %s' % (data['version']))
        if data['running'] != 0:
            state.append('PID %i' % (data['pid']))
    elif item == 'memory':
        if params:
            (memory_usage_warn_threshold, memory_usage_crit_threshold) = params
        else:
            (memory_usage_warn_threshold, memory_usage_crit_threshold) = (default_memory_usage_warn_threshold, default_memory_usage_crit_threshold)

        if data['running'] == 0 or data['pid'] == 0:
            state.unknown('puppetdb not running')
        else:
            state.perfdata.append( ('nonheapmemoryusage_max', data['memory_nonheapmemoryusage_max']) )
            state.perfdata.append( ('nonheapmemoryusage_init', data['memory_nonheapmemoryusage_init']) )
            state.perfdata.append( ('nonheapmemoryusage_used', data['memory_nonheapmemoryusage_used']) )
            state.perfdata.append( ('nonheapmemoryusage_committed', data['memory_nonheapmemoryusage_committed']) )

            state.perfdata.append( ('heapmemoryusage_max', data['memory_heapmemoryusage_max']) )
            state.perfdata.append( ('heapmemoryusage_init', data['memory_heapmemoryusage_init']) )
            state.perfdata.append( ('heapmemoryusage_used', data['memory_heapmemoryusage_used']) )
            state.perfdata.append( ('heapmemoryusage_committed', data['memory_heapmemoryusage_committed']) )

            heapmemoryusage_max = data['memory_heapmemoryusage_max']
            heapmemoryusage_init = data['memory_heapmemoryusage_init']
            heapmemoryusage_used = data['memory_heapmemoryusage_used']
            heapmemoryusage_committed = data['memory_heapmemoryusage_committed']

            nonheapmemoryusage_max = data['memory_nonheapmemoryusage_max']
            nonheapmemoryusage_init = data['memory_nonheapmemoryusage_init']
            nonheapmemoryusage_used = data['memory_nonheapmemoryusage_used']
            nonheapmemoryusage_committed = data['memory_nonheapmemoryusage_committed']

            if nonheapmemoryusage_max > 0:
                nonheapmemoryusage = float(nonheapmemoryusage_used) / float(nonheapmemoryusage_max)
            else:
                nonheapmemoryusage = None
            heapmemoryusage = float(heapmemoryusage_used) / float(heapmemoryusage_max)

            state.perfdata.append( ('nonheapmemoryusage', nonheapmemoryusage, memory_usage_warn_threshold, memory_usage_crit_threshold) )
            state.perfdata.append( ('heapmemoryusage', heapmemoryusage, memory_usage_warn_threshold, memory_usage_crit_threshold) )

            if memory_usage_crit_threshold is not None and memory_usage_warn_threshold is not None:
                if nonheapmemoryusage is not None:
                    if nonheapmemoryusage >= memory_usage_crit_threshold:
                        state.critical('Non-Heap memory usage %i %%' % (int(nonheapmemoryusage * 100)))
                    elif nonheapmemoryusage >= memory_usage_warn_threshold:
                        state.warning('Non-Heap memory usage %i %%' % (int(nonheapmemoryusage * 100)))
                if heapmemoryusage >= memory_usage_crit_threshold:
                    state.critical('Heap memory usage %i %%' % (int(heapmemoryusage * 100)))
                elif heapmemoryusage >= memory_usage_warn_threshold:
                    state.warning('Heap memory usage %i %%' % (int(heapmemoryusage * 100)))
            if state.is_ok:
                if nonheapmemoryusage is not None:
                    state.append('Non-Heap %i %%' % (int(nonheapmemoryusage * 100)))
                state.append('Heap %i %%' % (int(heapmemoryusage * 100)))
    elif item == 'threads':
        if params:
            (thread_count_warn_threshold, thread_count_crit_threshold) = params
        else:
            (thread_count_warn_threshold, thread_count_crit_threshold) = (default_thread_count_warn_threshold, default_thread_count_crit_threshold)
        if data['running'] == 0 or data['pid'] == 0:
            state.unknown('puppetdb not running')
        else:
            
            threading_threadcount = data['threading_threadcount']
            threading_daemonthreadcount = data['threading_daemonthreadcount']
            
            state.perfdata.append( ('threadcount', threading_threadcount, thread_count_warn_threshold, thread_count_crit_threshold) )
            state.perfdata.append( ('daemonthreadcount', threading_daemonthreadcount, thread_count_warn_threshold, thread_count_crit_threshold) )
            
            if thread_count_warn_threshold is not None and thread_count_crit_threshold is not None:
                if threading_threadcount >= thread_count_crit_threshold:
                    state.critical('High thread count %i' % (int(threading_threadcount)))
                elif threading_threadcount >= thread_count_warn_threshold:
                    state.warning('High thread count %i' % (int(threading_threadcount)))
                if threading_daemonthreadcount >= thread_count_crit_threshold:
                    state.critical('High daemon thread count %i' % (int(threading_daemonthreadcount)))
                elif threading_daemonthreadcount >= thread_count_warn_threshold:
                    state.warning('High daemon thread count %i' % (int(threading_daemonthreadcount)))
            if state.is_ok:
                state.ok('%i threads, %i daemon threads' % (int(threading_threadcount), int(threading_daemonthreadcount) ))
    elif item == 'queue':
        if params:
            (queuesize_warn_threshold, queuesize_crit_threshold) = params
        else:
            (queuesize_warn_threshold, queuesize_crit_threshold) = (default_queuesize_warn_threshold, default_queuesize_crit_threshold)
        if data['running'] == 0 or data['pid'] == 0:
            state.unknown('puppetdb not running')
        else:
            queuesize = data['mq_queuesize']
            averageenqueuetime = data['mq_averageenqueuetime']
            dispatchcount = data['mq_dispatchcount']

            state.perfdata.append( ('queuesize', queuesize, queuesize_warn_threshold, queuesize_crit_threshold) )
            state.perfdata.append( ('dispatchcount', dispatchcount) )
            state.perfdata.append( ('averageenqueuetime', averageenqueuetime) )

            if queuesize > queuesize_crit_threshold:
                state.critical('Queue size %i' % (queuesize))
            elif queuesize > queuesize_warn_threshold:
                state.warning('Queue size %i' % (queuesize))
            if state.is_ok:
                state.append('Avg enqueue time %0.1fs' % (averageenqueuetime))
                state.append('Queue is empty' if queuesize == 0 else 'Queue size %i' % (queuesize))
    elif item == 'database':
        if params:
            (cacheratio_warn_threshold, cacheratio_crit_threshold) = params
        else:
            (cacheratio_warn_threshold, cacheratio_crit_threshold) = (default_cacheratio_warn_threshold, default_cacheratio_crit_threshold)
        if data['running'] == 0 or data['pid'] == 0:
            state.unknown('puppetdb not running')
        else:
            statementexecutetimeavg = data['db_statementexecutetimeavg']
            cachemiss = data['db_cachemiss']
            cachehits = data['db_cachehits']
            cachetotal = data['db_cachemiss'] + data['db_cachehits']
            if cachetotal != 0:
                cacheratio = float(cachehits) / float(cachetotal)
            else:
                cacheratio = 0.0

            state.perfdata.append( ('cachehits', cachehits) )
            state.perfdata.append( ('cachemiss', cachemiss) )
            state.perfdata.append( ('cacheratio', cacheratio, cacheratio_warn_threshold, cacheratio_crit_threshold) )
            state.perfdata.append( ('avgquerytime', statementexecutetimeavg) )

            if cacheratio_warn_threshold is not None and cacheratio_crit_threshold is not None:
                if cacheratio < cacheratio_warn_threshold:
                    state.warning('Cache ratio %i %% below %i %%' % (int(cacheratio*100), int(cacheratio_warn_threshold*100)))
                elif cacheratio < cacheratio_crit_threshold:
                    state.critical('Cache ratio %i %% below %i %%' % (int(cacheratio*100), int(cacheratio_crit_threshold*100)))
            
            if state.is_ok:
                state.append('Avg query time %0.1fs' % (statementexecutetimeavg))
                state.append('Cache ratio %i %%' % (int(cacheratio*100)))

    return state.return_value

# declare the check to Check_MK.
check_info['puppetdb'] = {
    'check_function':            check_puppetdb,
    'inventory_function':        inventory_puppetdb,
    'service_description':       'PuppetDB',
    'has_perfdata':              True,
}
