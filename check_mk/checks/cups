#!/usr/bin/env python
#
# Check_MK CUPS Plugin - Check for status of CUPS daemon.
#
from arsoft.crypto.utils import check_mk_cert_check, check_mk_cert_inventory
from arsoft.check_mk import check_state

def inventory_cups(checkname, info):

    ret = []
    if len(info) >= 1:
        data = { 'version_IPP':'', 'version_CUPS':'' }
        for line in info:
            if len(line) < 2:
                continue
            data[line[0]] = line[1]

        ret.append(('status', (data['version_CUPS'], data['version_IPP'])))
        cert_checks = check_mk_cert_inventory(checkname, info, prefix=False, warn_time=30, crit_time=14)
        ret.extend(cert_checks)
    return ret

def check_cups(item, params, info):

    state = check_state()
    data = { 'version_IPP':'', 'version_CUPS':'', 'running':'0' }

    for line in info:
        if len(line) < 2:
            continue

        data[line[0]] = line[1]

    if item == 'status':
        (expected_cups_version, expected_ipp_version) = params
        running = saveint(data['running'])
        if not running:
            state.critical('Not running')
        else:
            if data['version_CUPS'] != expected_cups_version:
                state.warning('CUPS version %s != %s' % (data['version_CUPS'], expected_cups_version))

            if data['version_IPP'] != expected_ipp_version:
                state.warning('IPP version %s != %s' % (data['version_IPP'], expected_ipp_version))
            if state.is_ok:
                state.ok('CUPS %s, IPP %s' % (data['version_CUPS'], data['version_IPP']))
    else:
        return check_mk_cert_check(item, params, info, prefix=False)

    return state.return_value


# declare the check to Check_MK.
check_info['cups'] = {
    'check_function':            check_cups,
    'inventory_function':        inventory_cups,
    'service_description':       'cups',
    'has_perfdata':              True,
    'group':                     'cups',
}

