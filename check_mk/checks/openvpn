#!/usr/bin/env python
#
# Check_MK APT Plugin - Check for upgradeable packages.
#
# Copyright 2010, Stefan Schlesinger <sts@ono.at>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
from arsoft.timestamp import format_timedelta
from arsoft.crypto.utils import check_mk_cert_check, check_mk_cert_inventory
from arsoft.check_mk import check_state

def inventory_openvpn(checkname, info):

    openvpn_configs = set()
    for line in info:
        if line:
            openvpn_configs.add(line[0])

    ret = []
    for cfgname in openvpn_configs:
        ret.append( ('%s status' % cfgname, None) )

    cert_checks = check_mk_cert_inventory(checkname, info, prefix=True, warn_time=30, crit_time=14)
    ret.extend(cert_checks)
    return ret

def check_openvpn(item, params, info):

    state = check_state()

    (cfgname, check_name) = item.split(' ', 1)
    cfgdata = {}

    for line in info:
        # if we don't have any upgrades listed, the line list
        # will only contain one element, eg. "upgrades\n"
        if len(line) < 2:
            continue

        if line[0] != cfgname:
            continue

        cfgdata[line[1]] = line[2]

    if check_name == 'status':

        for stat_key in ['device_read',
                            'device_write',
                            'connection_read',
                            'connection_write',
                            'auth_read',
                            'auth_write',
                            'pre_compress',
                            'post_compress',
                            'compress_ratio',
                            'pre_decompress',
                            'post_decompress',
                            'decompress_ratio',
                        ]:
            if 'statistics.%s' % stat_key in cfgdata:
                value = cfgdata['statistics.%s' % stat_key]
            else:
                value = 0
            state.perfdata.append( (stat_key, value) )

        if 'connected_clients' in cfgdata:
            connected_clients = cfgdata.get('connected_clients', '').split(',')
            state.perfdata.append( ('numclients', len(connected_clients) ) )
        if 'configured_clients' in cfgdata:
            configured_clients = cfgdata.get('configured_clients', '').split(',')
            state.perfdata.append( ('confclients', len(configured_clients) ) )

        autostart = saveint(cfgdata.get('autostart', False))
        running = saveint(cfgdata.get('running', False))
        if autostart != 0:
            expected_state = 'CONNECTED'
        else:
            expected_state = 'DOWN'
        actual_state = cfgdata.get('state', 'UNKNOWN')
        if actual_state != expected_state:
            state.warning('%s != %s' % (actual_state, expected_state))
        else:
            state_age = saveint(cfgdata['state_age']) if 'state_age' in cfgdata else 0
            if state_age:
                state.append('%s for %s' % (actual_state, format_timedelta(state_age)))
            else:
                state.append('%s' % (actual_state))
        if autostart != running:
            state.critical('VPN running' if running != 0 else 'VPN not running')

        if running != 0:
            state.append('local %s' % (cfgdata.get('localip', 'UNKNOWN')))
            state.append('remote %s' % (cfgdata.get('remoteip', 'UNKNOWN')))
            last_updated_age = saveint(cfgdata.get('last_updated_age', 0))
            if last_updated_age > 600:
                state.warning('Status has not been updated for %s' % format_timedelta(last_updated_age))
    else:
        return check_mk_cert_check(item, params, info, prefix=True)

    return state.return_value

# declare the check to Check_MK.
check_info['openvpn'] = {
    'check_function':            check_openvpn,
    'inventory_function':        inventory_openvpn,
    'service_description':       'openvpn',
    'has_perfdata':              True,
}
