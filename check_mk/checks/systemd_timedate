#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
from arsoft.check_mk import check_state, systemd_parse_status, timedatectl_parse_status
from arsoft.timestamp import strptime_as_datetime

def extract_time_server_from_status(status_line):
    addr = None
    name = None
    idx = status_line.find('time server') if status_line else -1
    if idx >= 0:
        server_info = status_line[idx + 12:]
        if ' ' in server_info:
            addr, name = server_info.split(' ', 1)
            if name[0] == '(':
                if name[-1] == ')':
                    name = name[1:-1]
                elif name[-2] == ')' and name[-1] == '.':
                    name = name[1:-2]
        else:
            addr = server_info
            name = server_info
    return (addr, name)

def parse_systemd_timedate(info):
    timedatectl_lines = []
    timesync_lines = []
    got_separator = False
    for i in info:
        if i[0] == '--------':
            got_separator = True
            continue
        if got_separator:
            timesync_lines.append(i[0])
        else:
            timedatectl_lines.append(i[0])

    timedatectl_data = timedatectl_parse_status(timedatectl_lines)
    timesync_data = systemd_parse_status(timesync_lines)

    if not 'time_server' in timesync_data:
        timesync_data['time_server'] = extract_time_server_from_status(timesync_data.get('status'))

    parsed = { 'timedate': timedatectl_data, 'timesync': timesync_data }
    return parsed


def inventory_systemd_timedate(checkname, info):
    return [('timedate', None), ('timesync', None) ]

def check_systemd_timedate(item, params, info):
    state = check_state()

    if item == 'timedate':
        data = info['timedate']
        timedatectl_ntp_synchronized = data.get('ntp_synchronized', 0)
        timedatectl_network_time_on = data.get('network_time_on', 0)
        timedatectl_time_zone = data.get('time_zone', 'unkown')
        timedatectl_local_time = data.get('local_time', 0)
        timedatectl_universal_time = data.get('universal_time', 0)
        timedatectl_rtc_in_local_tz = data.get('rtc_in_local_tz', 0)

        if timedatectl_rtc_in_local_tz != 0:
            state.warning('RTC is running with local time')

        if state.is_ok:
            state.ok('%s (%s)' % (timedatectl_universal_time, timedatectl_time_zone))
    elif item == 'timesync':
        timedatectl_data = info['timedate']
        data = info['timesync']

        ntp_enabled = data.get('enabled', False)
        ntp_synchronized = timedatectl_data.get('ntp_synchronized', 0)
        network_time_on = timedatectl_data.get('network_time_on', 0)
        time_server = None

        if ntp_enabled != 0 or network_time_on != 0:
            if ntp_synchronized:
                time_server_addr, time_server_name = data.get('time_server')
                if time_server_addr is not None and time_server_name is not None:
                    time_server = '%s (%s)' % (time_server_addr, time_server_name)
                else:
                    time_server = 'Unknown'
            else:
                state.critical('Time not synchronized with NTP server')
        else:
            state.warning('NTP synchronization disabled.')

        if state.is_ok:
            state.ok('Synced on %s' % (time_server))
    else:
        state.unknown('item %s' % item)

    return state.return_value

# declare the check to Check_MK.
check_info['systemd_timedate'] = {
    'parse_function':            parse_systemd_timedate,
    'check_function':            check_systemd_timedate,
    'inventory_function':        inventory_systemd_timedate,
    'service_description':       'systemd',
    'has_perfdata':              False,
}
