#!/usr/bin/env python
#
from arsoft.check_mk import check_state

def inventory_fritz_ddns(checkname, info):
    ret = []
    if len(info) > 1:
        for line in info:
            # if we don't have any upgrades listed, the line list
            # will only contain one element, eg. "upgrades\n"
            if len(line) < 3:
                continue
            name = line[0]
            ret.append( (name, {}) )
    return ret

def check_fritz_ddns(item, params, info):
    # hostname, ipaddress are defined by check_mk

    state = check_state()
    data = {}

    for line in info:
        # if we don't have any upgrades listed, the line list
        # will only contain one element, eg. "upgrades\n"
        line_len = len(line)
        if line_len < 5:
            continue
        (name, status, ip, wan_ip, error_msg) = line[:5]
        status = saveint(status)
        data[name] = (ip, wan_ip, status, error_msg)

    if item in data:
        (ip, wan_ip, status, error_msg) = data[item]
        #print('item %s: %s' % (item, data[item] ))
        if status == 0:
            state.ok('%s matches %s' % (ip, item))
        elif status == 3: #unknown
            if not wan_ip:
                state.ok('%s is OK (no internet connection)' % (item))
            elif not ip:
                state.critical('No address for %s (should be %s) (%s)' % (item, wan_ip, error_msg))
            else:
                state.warning('%s!=%s does not match %s' % (ip, wan_ip, item))
        else:
            state.warning('%s!=%s does not match %s (%s)' % (ip, wan_ip, item, error_msg))

    else:
        state.unknown('%s not found in agent data' % (item))

    return state.return_value

# declare the check to Check_MK.
check_info['fritz_ddns'] = {
    'check_function':            check_fritz_ddns,
    'inventory_function':        inventory_fritz_ddns,
    'service_description':       'Dynamic DNS',
    'has_perfdata':              True,
}

