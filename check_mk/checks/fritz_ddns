#!/usr/bin/env python
#

def inventory_fritz_ddns(checkname, info):
    ret = []
    if len(info) > 1:
        for line in info:
            # if we don't have any upgrades listed, the line list
            # will only contain one element, eg. "upgrades\n"
            if len(line) < 3:
                continue
            name = line[0]
            ret.append( (name, {}) )
    return ret

def check_fritz_ddns(item, params, info):
    # hostname, ipaddress are defined by check_mk
    level   = 0 # 0:OK, 1:WARNING 2:CRITICAL, 3: UNKNOWN
    msg = None
    perfdata = []
    details = []
    data = {}

    for line in info:
        # if we don't have any upgrades listed, the line list
        # will only contain one element, eg. "upgrades\n"
        line_len = len(line)
        if line_len < 3:
            continue
        if line_len == 3:
            (name, ip, status) = line[:3]
            wan_ip = None
        else:
            (name, ip, wan_ip, status) = line[:4]
        status = saveint(status)
        data[name] = (ip, wan_ip, status)

    if item in data:
        (ip, wan_ip, status) = data[item]
        if status:
            level = 0
            details.append('%s matches %s' % (ip, item))
        else:
            level = 1
            details.append('%s!=%s does not match %s' % (ip, wan_ip, item))
    else:
        level = 2
        details.append('%s not found in agent data' % (item))

    # Construct a the status message.
    if level == 0:
        msg = "OK - %s" % (','.join(details))
    elif level == 1:
        msg = "WARN - %s" % (','.join(details))
    elif level == 2:
        msg = "CRIT - %s" % (','.join(details))
    return (level, msg, perfdata)

# declare the check to Check_MK.
check_info['fritz_ddns'] = {
    'check_function':            check_fritz_ddns,
    'inventory_function':        inventory_fritz_ddns,
    'service_description':       'Dynamic DNS',
    'has_perfdata':              True,
}

