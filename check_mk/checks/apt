#!/usr/bin/env python
#
# Check_MK APT Plugin - Check for upgradeable packages.
#
# Copyright 2010, Stefan Schlesinger <sts@ono.at>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
from arsoft.timestamp import format_timedelta, format_time, format_time_and_delta
from arsoft.check_mk import check_state

cache_age_warn_level = 2 * (24 * (60 * 60))
cache_age_critical_level = 4 * (24 * (60 * 60))

check_age_warn_level = 2 * (60 * 60)
check_age_critical_level = 4 * (60 * 60)

def inventory_apt(checkname, info):

    ret = []
    if len(info) >= 1:
        ret.append( ('upgrades', None) )
        ret.append( ('cache', None) )

    return ret

def check_apt(item, params, info):

    state = check_state()
    data = {'check_time':0, 'up_time':0, 'boot_time':0, 'cache_time':0, 'upgrades':[], 'secupgrades':[]}

    for line in info:
        # if we don't have any upgrades listed, the line list
        # will only contain one element, eg. "upgrades\n"
        if len(line) < 2:
            continue

        key = line[0]
        if key == 'upgrades' or key == 'secupgrades':
            if line[1]:
                data[key] = line[1].split(',')
        else:
            data[key] = saveint(line[1])

    if item == 'cache':
        now = time.time()
        cache_time = data.get('cache_time', 0)
        check_time = data.get('check_time', 0)
        boot_time = data.get('boot_time', 0)
        up_time = now - boot_time
        print(format_time(check_time), format_time(cache_time), format_time(boot_time))
        check_age = now - check_time
        cache_age = now - cache_time

        if check_time > boot_time:
            last_cache_update = 'Cache has been updated %s' % (format_time_and_delta(cache_time, -cache_age))
            if cache_age > cache_age_critical_level:
                state.critical(last_cache_update)
            elif cache_age > cache_age_warn_level:
                state.warning(last_cache_update)
            else:
                state.ok(last_cache_update)

            last_check = "last check %s" % (format_time_and_delta(check_time, -check_age))
            if check_age > check_age_critical_level:
                state.critical(last_check)
            elif check_age > check_age_warn_level:
                state.warning(last_check)
            else:
                state.ok(last_check)
        else:
            last_boot = "boot %s, cache not checked" % (format_time_and_delta(boot_time, -up_time))
            if up_time > check_age_critical_level:
                state.critical(last_boot)
            elif up_time > check_age_warn_level:
                state.warning(last_boot)
            else:
                state.ok(last_boot)

        state.perfdata.append( ('check_age', check_age, check_age_warn_level, check_age_critical_level ) )
        state.perfdata.append( ('cache_age', cache_age, cache_age_warn_level, cache_age_critical_level ) )

    elif item == 'upgrades':
        num_secupgrades = len(data['secupgrades'])
        num_upgrades = len(data['upgrades'])
        state.perfdata.append( ('secupgrades', num_secupgrades) )
        state.perfdata.append( ('upgrades', num_upgrades) )

        if num_secupgrades:
            state.critical('%i security upgrades: %s' % (num_secupgrades, ",".join(data['secupgrades'])))
        if num_upgrades:
            state.warning('%i upgrades: %s' % (num_upgrades, ",".join(data['upgrades'])))
        if state.is_ok:
            state.ok('All packages are up to date.')
    else:
        state.unknown(item)
    return state.return_value

# declare the check to Check_MK.
check_info['apt'] = {
    'check_function':            check_apt,
    'inventory_function':        inventory_apt,
    'service_description':       'APT',
    'group':                     'apt',
    'has_perfdata':              True,
}
