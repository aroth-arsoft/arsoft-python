#!/usr/bin/env python
#
# Check_MK APT Plugin - Check for upgradeable packages.
#
# Copyright 2010, Stefan Schlesinger <sts@ono.at>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
from arsoft.timestamp import format_timedelta

cache_age_warn_level = 2 * (24 * (60 * 60))
cache_age_critical_level = 4 * (24 * (60 * 60))

check_age_warn_level = 2 * (60 * 60)
check_age_critical_level = 4 * (60 * 60)

def inventory_apt(checkname, info):

    ret = []
    if len(info) >= 1:
        ret.append( ('upgrades', None) )
        ret.append( ('cache', None) )

    return ret

def check_apt(item, params, info):

    level   = 0 # 0:OK, 1:WARNING 2:CRITICAL, 3: UNKNOWN
    perfdata = []
    details = []
    data = {'check_time':0, 'cache_time':0, 'upgrades':[], 'secupgrades':[]}

    for line in info:
        # if we don't have any upgrades listed, the line list
        # will only contain one element, eg. "upgrades\n"
        if len(line) < 2:
            continue

        key = line[0]
        if key == 'upgrades' or key == 'secupgrades':
            data[key] = line[1].split(',')
        else:
            data[key] = saveint(line[1])

    if item == 'cache':
        check_age = time.time() - data['check_time']
        cache_age = time.time() - data['cache_time']
        perfdata.append( ('check_age', check_age, check_age_warn_level, check_age_critical_level ) )
        perfdata.append( ('cache_age', cache_age, cache_age_warn_level, cache_age_critical_level ) )
        if cache_age > cache_age_critical_level or check_age > check_age_critical_level:
            level = 2
        elif cache_age > cache_age_warn_level or check_age > check_age_warn_level:
            level = 1

        details.append("Cache has been updated %s, last check %s" % (format_timedelta(cache_age), format_timedelta(check_age)) )
    else:
        perfdata.append( ('secupgrades', len(data['secupgrades']) ) )
        perfdata.append( ('upgrades', len(data['upgrades']) ) )

        if secupgrades:
            if level < 2:
                level = 2
            details.append('%i security upgrades: %s' % (len(data['secupgrades']), ",".join(data['secupgrades'])))
        if upgrades:
            if level < 1:
                level = 1
            details.append('%i upgrades: %s' % (len(data['upgrades']), ",".join(data['upgrades'])))
        if len(details) == 0:
            details.append('All packages are up to date.')
    # Construct a the status message.
    if level == 0:
        msg = "OK - %s" % (','.join(details))
    elif level == 1:
        msg = "WARN - %s" % (','.join(details))
    elif level == 2:
        msg = "CRIT - %s" % (','.join(details))

    return (level, msg, perfdata)

# declare the check to Check_MK.
check_info['apt'] = {
    'check_function':            check_apt,
    'inventory_function':        inventory_apt,
    'service_description':       'APT',
    'has_perfdata':              True,
}
