#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
from arsoft.timestamp import format_timedelta, utc_timestamp_to_datetime
from arsoft.check_mk import check_state

def inventory_networkd(checkname, info):

    ret = []
    for line in info:
        #print(line)
        fields = filter(bool, line[0].split(' '))
        #print(fields)
        (num, lnk_name, lnk_type, lnk_op, lnk_setup) = fields
        if lnk_name != 'lo':
            ret.append( (str(lnk_name), {'type':str(lnk_type), 'setup':str(lnk_setup) } ) )
    return ret

def check_networkd(item, params, info):

    state = check_state()
    data = {}

    for line in info:
        #print(line)
        fields = filter(bool, line[0].split(' '))
        #print(fields)
        (num, lnk_name, lnk_type, lnk_op, lnk_setup) = fields
        if lnk_name != 'lo':
            data[lnk_name] = { 'type':str(lnk_type), 'op': str(lnk_op), 'setup':str(lnk_setup) }
    if item in data:
        if data[item]['type'] != params['type']:
            state.critical('Type mismatch %s!=%s' % (data[item]['type'], params['type']) )
        if data[item]['setup'] != params['setup']:
            state.critical('Setup mismatch %s!=%s' % (data[item]['setup'], params['setup']) )
        if state.is_ok:
            state.ok('Type %s' % data[item]['type'])
            state.ok('Operational %s' % data[item]['op'])
            state.ok('Setup %s' % data[item]['setup'])
    else:
        state.critical('Network link %s missing' % item)

    return state.return_value

# declare the check to Check_MK.
check_info['networkd'] = {
    'check_function':            check_networkd,
    'inventory_function':        inventory_networkd,
    'service_description':       'networkd',
    'has_perfdata':              False,
}
