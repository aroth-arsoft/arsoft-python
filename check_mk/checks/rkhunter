#!/usr/bin/env python
#
# Check_MK APT Plugin - Check for upgradeable packages.
#
# Copyright 2010, Stefan Schlesinger <sts@ono.at>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
from arsoft.timestamp import format_timedelta

def inventory_rkhunter(checkname, info):

    ret = []
    if len(info) >= 1:
        ret.append( ('status', (48, 96) ) )
        ret.append( ('result', None) )

    return ret

def check_rkhunter(item, params, info):

    level   = 0 # 0:OK, 1:WARNING 2:CRITICAL, 3: UNKNOWN
    perfdata = []
    details = []
    data = {
        'check_age':0,
        'num_infects':0,
        'num_criticals':0,
        'num_errors':0,
        'num_warnings':0,
        'num_infos':0,
        'num_file_properties_changed':0,
        'num_services_changed':0,
        'num_users_changed':0,
        'num_groups_changed':0,
        'changed_file_properties':[],
        'changed_services':[],
        'changed_users':[],
        'changed_groups':[],
        }

    for line in info:
        # if we don't have any upgrades listed, the line list
        # will only contain one element, eg. "upgrades\n"
        if len(line) < 2:
            continue

        # there are upgrades availiable, evaluate the importency.
        # secupgrades return CRITICAL, normal upgrades only WARNING.
        if line[0].startswith('num_') or line[0].startswith('check_'):
            value = saveint(line[1])
        else:
            value = line[1].split(",")
        data[line[0]] = value

    if item == 'status':
        (warn_time_hours, crit_time_hours) = params if params is not None else (48, 96)
        warn_time = (warn_time_hours * 3600)
        crit_time = (crit_time_hours * 3600)
        check_age = data['check_age']
        perfdata.append( ('check_age', int(check_age/3600), warn_time_hours, crit_time_hours ) )
        if check_age > crit_time:
            level = 2
        elif check_age > warn_time:
            level = 1
        else:
            level = 0
        details.append('last check %s ago' % format_timedelta(check_age))
    else:
        num_infects = data['num_infects']

        if data['num_infects'] > 0:
            if level < 2:
                level = 2
            details.append('%i infected' % data['num_infects'])
        if data['num_criticals'] > 0:
            if level < 2:
                level = 2
            details.append('%i critical' % data['num_criticals'])
        if data['num_errors'] > 0:
            if level < 2:
                level = 2
            details.append('%i errors' % data['num_errors'])
        if data['num_warnings'] > 0:
            if level < 1:
                level = 1
            details.append('%i warnings' % data['num_warnings'])

        if data['num_file_properties_changed'] > 0:
            if level < 1:
                level = 1
            details.append('%i changed files %s' % (data['num_file_properties_changed'], ','.join(data['changed_file_properties']) ) )

        if data['num_services_changed'] > 0:
            if level < 1:
                level = 1
            details.append('%i changed services %s' % (data['num_services_changed'], ','.join(data['changed_services']) ) )

        if data['num_users_changed'] > 0:
            if level < 1:
                level = 1
            details.append('%i changed users %s' % (data['num_users_changed'], ','.join(data['changed_users']) ) )

        if data['num_groups_changed'] > 0:
            if level < 1:
                level = 1
            details.append('%i changed groups %s' % (data['num_groups_changed'], ','.join(data['changed_groups']) ) )

        if len(details) == 0:
            details.append('No issues detected.')

        perfdata.append( ('num_infects', data['num_infects'], 1, 1) )
        perfdata.append( ('num_criticals', data['num_criticals'], 1, 1) )
        perfdata.append( ('num_errors', data['num_errors'], 1, 1) )
        perfdata.append( ('num_warnings', data['num_warnings'], 1, 0) )
        perfdata.append( ('num_infos', data['num_infos']) )
        perfdata.append( ('num_file_properties_changed', data['num_file_properties_changed'], 1, 0) )
        perfdata.append( ('num_services_changed', data['num_services_changed'], 1, 0) )
        perfdata.append( ('num_users_changed', data['num_users_changed'], 1, 0) )
        perfdata.append( ('num_groups_changed', data['num_groups_changed'], 1, 0) )

    # Construct a the status message.
    if level == 0:
        msg = "OK - %s" % (','.join(details))
    elif level == 1:
        msg = "WARN - %s" % (','.join(details))
    elif level == 2:
        msg = "CRIT - %s" % (','.join(details))
    return (level, msg, perfdata)

# declare the check to Check_MK.
check_info['rkhunter'] = {
    'check_function':            check_rkhunter,
    'inventory_function':        inventory_rkhunter,
    'service_description':       'rkhunter',
    'has_perfdata':              True,
}
