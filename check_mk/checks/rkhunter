#!/usr/bin/env python
#
# Check_MK APT Plugin - Check for upgradeable packages.
#
# Copyright 2010, Stefan Schlesinger <sts@ono.at>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
from arsoft.timestamp import format_timedelta

check_age_warn_level = 2 * (24 * (60 * 60))
check_age_critical_level = 4 * (24 * (60 * 60))

def inventory_rkhunter(checkname, info):

    ret = []
    if len(info) >= 1:
        ret.append( ('status', None) )
        ret.append( ('result', None) )

    return ret

def check_rkhunter(item, params, info):

    level   = 0 # 0:OK, 1:WARNING 2:CRITICAL, 3: UNKNOWN
    perfdata = []
    check_age = 0
    num_infects = 0
    num_criticals = 0
    num_errors = 0
    num_warnings = 0
    num_infos = 0
    num_file_properties_changed = 0
    changed_file_properties = []

    for line in info:
        # if we don't have any upgrades listed, the line list
        # will only contain one element, eg. "upgrades\n"
        if len(line) < 2:
            continue

        # there are upgrades availiable, evaluate the importency.
        # secupgrades return CRITICAL, normal upgrades only WARNING.
        type = line[0]
        if type == 'check_age':
            if item == 'status':
                check_age = saveint(line[1])
                perfdata.append( ('check_age', check_age, check_age_warn_level, check_age_critical_level ) )
                if check_age > check_age_critical_level:
                    level = 2
                elif check_age > check_age_warn_level:
                    level = 1
                else:
                    level = 0
        else:
            if item == 'result':
                if type == "num_infects":
                    num_infects = saveint(line[1])
                    if num_infects > 0:
                        if level < 2:
                            level = 2
                elif type == "num_criticals":
                    num_criticals = saveint(line[1])
                    if num_criticals > 0:
                        if level < 2:
                            level = 2
                elif type == "num_errors":
                    num_errors = saveint(line[1])
                    if num_errors > 0:
                        if level < 2:
                            level = 2
                elif type == "num_warnings":
                    num_warnings = saveint(line[1])
                    if num_warnings > 0:
                        if level < 1:
                            level = 1
                elif type == "num_infos":
                    num_infos = saveint(line[1])
                elif type == "num_file_properties_changed":
                    num_file_properties_changed = saveint(line[1])
                    if num_file_properties_changed > 0:
                        if level < 1:
                            level = 1
                elif type == "changed_file_properties":
                    changed_file_properties = line[1].strip("\"").split(",")
    if item == 'status':
        # Construct a the status message.
        if level == 0:
            msg = "OK - last check %s ago" % format_timedelta(check_age)
        elif level == 1:
            msg = "rkhunter has not been run for %s" % format_timedelta(check_age)
        elif level == 2:
            msg = "rkhunter has not been run for %s" % format_timedelta(check_age)
    else:
        details = []
        if num_infects:
            details.append('%i infected' % num_infects)
        if num_criticals:
            details.append('%i critical' % num_criticals)
        if num_errors:
            details.append('%i errors' % num_errors)
        if num_warnings:
            details.append('%i warnings' % num_warnings)
        if num_infos:
            details.append('%i infos' % num_infos)
        if num_file_properties_changed:
            details.append('%i changed files %s' % (num_file_properties_changed, ','.join(changed_file_properties) )
        if len(details) == 0:
            details.append('No issues detected.')
        perfdata.append( ('num_infects', num_infects, 1, 1) )
        perfdata.append( ('num_criticals', num_criticals, 1, 1) )
        perfdata.append( ('num_errors', num_errors, 1, 1) )
        perfdata.append( ('num_warnings', num_warnings, 1, 0) )
        perfdata.append( ('num_infos', num_infos) )
        perfdata.append( ('num_file_properties_changed', num_file_properties_changed, 1, 0) )
        # Construct a the status message.
        if level == 0:
            msg = "OK - %s" % (','.join(details))
        elif level == 1:
            msg = "WARN - %s" % (','.join(details))
        elif level == 2:
            msg = "CRIT - %s" % (','.join(details))

    return (level, msg, perfdata)

# declare the check to Check_MK.
check_info['rkhunter'] = {
    'check_function':            check_rkhunter,
    'inventory_function':        inventory_rkhunter,
    'service_description':       'rkhunter',
    'has_perfdata':              True,
}
