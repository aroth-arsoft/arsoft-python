#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#

from arsoft.check_mk import check_state

def inventory_samba_status(checkname, info):

    ret = []
    if len(info) > 1:
        shares = []
        server_role = None
        workgroup = None
        for line in info:
            # if we don't have any upgrades listed, the line list
            # will only contain one element, eg. "upgrades\n"
            if len(line) < 2:
                continue

            if line[0] == 'shares':
                shares = line[1].split(',')
            elif line[0] == 'server_role':
                server_role = line[1]
            elif line[0] == 'workgroup':
                workgroup = line[1]

        ret.append( ('status', (server_role, workgroup)) )
        for share in shares:
            ret.append( ('share.%s' % share, None) )

    return ret

def role_to_pretty_string(role):
    if role == 'ROLE_ACTIVE_DIRECTORY_DC':
        return 'ActiveDirectory'
    elif role == 'ROLE_STANDALONE':
        return 'Standalone'
    elif role == 'ROLE_DOMAIN_MEMBER':
        return 'Member'
    elif role == 'ROLE_DOMAIN_PDC':
        return 'PDC'
    elif role == 'ROLE_DOMAIN_BDC':
        return 'BDC'
    else:
        return role

def check_samba_status(item, params, info):

    state = check_state()
    data = { 'server_role':'',
            'shares':[],
            'version':'',
            'version_info':'',
            'workgroup':'',
            'process_smbd':0,
            'process_nmbd':0
            }

    if '.' in item:
        item_class, item_name = item.split('.', 1)
    else:
        item_class = item
        item_name = None

    for line in info:
        # if we don't have any upgrades listed, the line list
        # will only contain one element, eg. "upgrades\n"
        if len(line) < 2:
            continue

        key = line[0]
        if key == 'shares':
            data[key] = line[1].split(',')
        elif 'process' in key:
            data[key] = saveint(line[1])
        else:
            data[key] = line[1]

    if item_class == 'status':
        if params is not None:
            (expected_server_role, expected_workgroup) = params
            if expected_server_role != data['server_role']:
                state.warning('Server role %s!=%s' % (role_to_pretty_string(data['server_role']), role_to_pretty_string(expected_server_role)))
            if expected_workgroup != data['workgroup']:
                state.warning('Workgroup %s!=%s' % (data['workgroup'], expected_workgroup))
        else:
            expected_server_role = None
            expected_workgroup = None

        if data['process_smbd'] == 0:
            state.critical('smbd process not running')

        expect_nmbd_running = False if expected_server_role == 'ROLE_ACTIVE_DIRECTORY_DC' else True
        if expect_nmbd_running:

            if data['process_nmbd'] == 0:
                state.critical('nmbd process not running')
        else:
            if data['process_nmbd'] != 0:
                state.critical('nmbd process is running')
        if state.is_ok:
            state.append('Version %s, Workgroup %s, %s' % (data['version'], data['workgroup'], role_to_pretty_string(data['server_role']) ) )

    elif item_class == 'share':
        if item_name in data['shares']:
            state.ok('%s ok' % (item_name))
        else:
            state.critical('%s is missing' % (item_name))

    return state.return_value

# declare the check to Check_MK.
check_info['samba_status'] = {
    'check_function':            check_samba_status,
    'inventory_function':        inventory_samba_status,
    'service_description':       'Samba',
    'has_perfdata':              True,
}
