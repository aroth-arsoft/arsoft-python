#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
from arsoft.check_mk import check_state

def inventory_jenkins(checkname, info):

    ret = []
    if len(info) > 1:
        ret.append( ('daemon', None) )
        data = {}
        slaves = set()
        jobs = set()
        for line in info:
            # if we don't have any upgrades listed, the line list
            # will only contain one element, eg. "upgrades\n"
            if len(line) < 2:
                continue

            if line[0] == 'slave':
                slaves.add(line[1])
            elif line[0] == 'job':
                jobs.add(line[1])

        for slave in slaves:
            ret.append( ('slave.%s' % slave, None) )

        for job in jobs:
            ret.append( ('job.%s' % job, None) )

    return ret

def check_jenkins(item, params, info):

    state = check_state()
    data = { 'slaves': {}, 'jobs': {} }

    if '.' in item:
        item_class, item_name = item.split('.', 1)
    else:
        item_class = item
        item_name = None

    for line in info:
        # if we don't have any upgrades listed, the line list
        # will only contain one element, eg. "upgrades\n"
        if len(line) < 2:
            continue

        if line[0] == 'slave':
            slave_name = line[1]
            key = line[2]
            value = line[3]
        elif line[0] == 'job':
            job_name = line[1]
            key = line[2]
            value = line[3]
        else:
            key = line[0]
            value = line[1]

        if line[0] == 'slave':
            if not slave_name in data['slaves']:
                data['slaves'][slave_name] = {}
            data['slaves'][slave_name][key] = value
        elif line[0] == 'job':
            if not job_name in data['jobs']:
                data['jobs'][job_name] = {}
            data['jobs'][job_name][key] = value
        else:
            data[key] = value

    if item_class == 'daemon':
        if data['pid'] == 0:
            state.critical('Jenkins process not running')
        if state.is_ok:
            state.ok('Version %s' % (data['version']))
    elif item_class == 'slave':
        if item_name in data['slaves']:
            #slave_data = data['slaves'][item_name]
            state.ok('%s ok' % (item_name))
        else:
            state.critical('%s not available' % (item_name))
    elif item_class == 'job':
        if item_name in data['jobs']:
            state.ok('%s ok' % (item_name))
            job_data = data['jobs'][item_name]
            state.perfdata.append( ('buildnumber', job_data['last_build_number']) )
            state.perfdata.append( ('duration', job_data['last_build_duration']) )
        else:
            state.critical('%s not available' % (item_name))

    return state.return_value

# declare the check to Check_MK.
check_info['jenkins'] = {
    'check_function':            check_jenkins,
    'inventory_function':        inventory_jenkins,
    'service_description':       'Jenkins',
    'has_perfdata':              True,
}
