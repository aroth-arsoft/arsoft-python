#!/usr/bin/env python
from arsoft.timestamp import format_timedelta

# default times in hours
default_warn_time = 24
default_crit_time = 48


def inventory_dovecot(checkname, info):

    ret = []
    data = {}
    if len(info) > 1:
        ret.append( ('daemon', (True, True) ) )
    return ret

def check_dovecot(item, params, info):

    level   = 0 # 0:OK, 1:WARNING 2:CRITICAL, 3: UNKNOWN
    msg = None
    details = []
    perfdata = []
    data = {
        'running':0,
        'enabled':1,
        'pid':0,
        'version':'',
        'gitrev':'',
        }

    for line in info:
        # if we don't have any upgrades listed, the line list
        # will only contain one element, eg. "upgrades\n"
        if len(line) < 2:
            continue

        key = line[0]
        value = line[1]
        if key.startswith('stats_'):
            value_dict = {}
            for e in value.split(','):
                if '=' in e:
                    k,v = split('=', 1)
                    value_dict[k] = v
            value = value_dict
        elif key != 'version' and key != 'girev':
            value = saveint(value)
        data[key] = value

    if item == 'daemon':
        if params:
            (must_be_running, enabled) = params
        else:
            (must_be_running, enabled) = (True, True)
            
        actually_running = False if data['running'] == 0 or data['pid'] == 0 else True
        actually_enabled = True if data['enabled'] else False
            
        if must_be_running:
            if not actually_running:
                if level < 2:
                    level = 2
                details.append('Daemon not running')
        else:
            if actually_running:
                if level < 2:
                    level = 2
                details.append('Daemon is running, but it should be stopped')

        if len(details) == 0:
            details.append('Version %s-%s' % (data['version'], data['gitrev']))

    # Construct a the status message.
    if level == 0:
        msg = "OK - %s" % (','.join(details))
    elif level == 1:
        msg = "WARN - %s" % (','.join(details))
    elif level == 2:
        msg = "CRIT - %s" % (','.join(details))
    return (level, msg, perfdata)

# declare the check to Check_MK.
check_info['dovecot'] = {
    'check_function':            check_dovecot,
    'inventory_function':        inventory_dovecot,
    'service_description':       'Dovecot',
    'has_perfdata':              True,
}
