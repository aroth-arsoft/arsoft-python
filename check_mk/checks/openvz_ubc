#!/usr/bin/env python

def inventory_openvz_ubc(checkname, info):

    ret = []
    if len(info) > 1:
        ret.append( ('counters', None) )

    return ret

def check_openvz_ubc(item, params, info):

    level   = 0 # 0:OK, 1:WARNING 2:CRITICAL, 3: UNKNOWN
    msg = None
    perfdata = []
    data = {}
    machine_data = {}
    current_machine = None

    for line in info:
        # if we don't have any upgrades listed, the line list
        # will only contain one element, eg. "upgrades\n"
        if len(line) < 2:
            continue

        key = line[0]
        if key == 'Version:':
            data['version'] = line[1]
            continue
        elif ':' in key:
            current_machine = key[:-1]
            machine_data[current_machine] = {}
            line.pop(0)

        if current_machine:
            (resource, held, maxheld, barrier, limit, failcnt) = line[0:6]
            if resource != 'dummy':
                machine_data[current_machine][resource] = (saveint(held), saveint(maxheld), saveint(barrier), saveint(limit), saveint(failcnt))

    if item == 'counters':
        details = []
        machine_uid = None
        if len(machine_data) == 1:
            machine_uid = machine_data.keys()[0]
            for (key, value) in machine_data[machine_uid].iteritems():
                (held, maxheld, barrier, limit, failcnt) = value
                perfdata.append( (key, held, barrier, limit ) )
                if held >= limit:
                    if level < 2:
                        level = 2
                    details.append('%s %i>=%i' % (key, held, limit))
                elif held >= barrier:
                    if level < 1:
                        level = 1
                    details.append('%s %i>=%i' % (key, held, barrier))

        if len(details) == 0:
            details.append('Version %s, uid %s' % (data['version'], machine_uid))

        # Construct a the status message.
        if level == 0:
            msg = "OK - %s" % (','.join(details))
        elif level == 1:
            msg = "WARN - %s" % (','.join(details))
        elif level == 2:
            msg = "CRIT - %s" % (','.join(details))
    return (level, msg, perfdata)

# declare the check to Check_MK.
check_info['openvz_ubc'] = {
    'check_function':            check_openvz_ubc,
    'inventory_function':        inventory_openvz_ubc,
    'service_description':       'OpenVZ',
    'has_perfdata':              True,
}
