#!/usr/bin/env python

def inventory_eiscp_status(checkname, info):
    ret = []
    if len(info) > 1:
        ret.append( ('status', None) )
    return ret

def check_eiscp_status(item, params, info):

    level   = 0 # 0:OK, 1:WARNING 2:CRITICAL, 3: UNKNOWN
    msg = None
    details = []
    perfdata = []
    data = {}

    for line in info:
        if len(line) < 2:
            continue
        key = line[0]
        data[key] = line[1]

    if item == 'status':
        if 'power' in data:
            details.append('Power %s' % ('on' if saveint(data['power']) != 0 else 'off'))
        if 'mute' in data:
            details.append('Mute %s' % ('on' if saveint(data['mute']) != 0 else 'off'))
        if 'input' in data:
            details.append('Input %s' % (data['input']))
        if 'volume' in data:
            details.append('Volume %i' % (saveint(data['volume'])))
        if 'sleep' in data:
            if saveint(data['sleep']) == 0:
                details.append('Sleep off')
            else:
                details.append('Sleep %i minutes' % saveint(data['sleep']))
        if len(details) == 0:
            level = 1
            details.append('Unknown status')

        # Construct a the status message.
        if level == 0:
            msg = "OK - %s" % (','.join(details))
        elif level == 1:
            msg = "WARN - %s" % (','.join(details))
        elif level == 2:
            msg = "CRIT - %s" % (','.join(details))
    else:
        level = 3
        msg = "UNKNOWN - item %s unknown" % (item)
    return (level, msg, perfdata)

# declare the check to Check_MK.
check_info['eiscp'] = {
    'check_function':            check_eiscp_status,
    'inventory_function':        inventory_eiscp_status,
    'service_description':       'eISCP',
    'has_perfdata':              True,
}
