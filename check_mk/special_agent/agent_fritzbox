#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# This agent uses UPNP API calls to the Fritz!Box to gather information
# about connection configuration and status.

# UPNP API CALLS THAT HAVE BEEN PROVEN WORKING
# Tested on:
# - AVM FRITZ!Box Fon WLAN 7360 111.05.51
# General Device Infos:
# http://fritz.box:49000/igddesc.xml
#
# http://fritz.box:49000/igdconnSCPD.xml
#get_upnp_info('WANIPConn1', 'urn:schemas-upnp-org:service:WANIPConnection:1', 'GetStatusInfo')
#get_upnp_info('WANIPConn1', 'urn:schemas-upnp-org:service:WANIPConnection:1', 'GetExternalIPAddress')
#get_upnp_info('WANIPConn1', 'urn:schemas-upnp-org:service:WANIPConnection:1', 'GetConnectionTypeInfo')
#get_upnp_info('WANIPConn1', 'urn:schemas-upnp-org:service:WANIPConnection:1', 'GetNATRSIPStatus')
#
# http://fritz.box:49000/igdicfgSCPD.xml
#get_upnp_info('WANCommonIFC1', 'urn:schemas-upnp-org:service:WANCommonInterfaceConfig:1', 'GetAddonInfos')
#get_upnp_info('WANCommonIFC1', 'urn:schemas-upnp-org:service:WANCommonInterfaceConfig:1', 'GetCommonLinkProperties')
#
# http://fritz.box:49000/igddslSCPD.xml
#get_upnp_info('WANDSLLinkC1', 'urn:schemas-upnp-org:service:WANDSLLinkConfig:1', 'GetDSLLinkInfo')

import getopt, sys, socket, urllib2, traceback, re, pprint

import arsoft.dnsutils
import dns.resolver
import os

def usage():
    sys.stderr.write("""Check_MK Fritz!Box Agent

USAGE: agent_fritzbox [OPTIONS] HOST
       agent_fritzbox -h

ARGUMENTS:
  HOST                          Host name or IP address of your Fritz!Box

OPTIONS:
  -h, --help                    Show this help message and exit
  -t, --timeout SEC             Set the network timeout to <SEC> seconds.
                                Default is 4 seconds. Note: the timeout is not
                                applied to the whole check, instead it is used for
                                each API query.
  --debug                       Debug mode: let Python exceptions come through
  -o, --pre-v6                  Use old uPNP URL for device with Fritz OS < 6
  --ddns=HOSTNAME               dynamic DNS name which is checked against the
                                external IP address
  -H HOSTNAME                   name of the host to be checked. Used to retrieve
                                the list of DDNS names.
  -C cfgfile                    name of an alternative config file. default is
                                /etc/check_mk/fritzbox.mk
  -E, --ext-dns                 Use DNS servers of the WAN interface.
  -D=DNS                        Use given DNS servers (must be a valid IP address).
""")

short_options = 'Ehdot:H:C:D:'
long_options  = [
    'help', 'timeout=', 'debug', 'pre-v6', 'ddns=', 'ext-dns'
]

host_address      = None
opt_debug         = False
opt_timeout       = 4
opt_pre_v6        = False
opt_ddns          = []
opt_host          = None
opt_cfgfile       = None
opt_ext_dns       = False
opt_dns_server    = None

try:
    opts, args = getopt.getopt(sys.argv[1:], short_options, long_options)
except getopt.GetoptError, err:
    sys.stderr.write("%s\n" % err)
    sys.exit(1)

for o,a in opts:
    if o in [ '--debug' ]:
        opt_debug = True
    elif o in [ '-t', '--timeout' ]:
        try:
            opt_timeout = float(a)
        except ValueError:
            sys.stderr.write("ERROR: Value %s for timeout is not a valid number.\n" % a)
            sys.exit(1)

    elif o in [ '-o', '--pre-v6' ]:
        opt_pre_v6 = True
    elif o in [ '--ddns' ]:
        opt_ddns.append(a)
    elif o in [ '-E', '--ext-dns' ]:
        opt_ext_dns = True
    elif o in [ '-D' ]:
        opt_dns_server = a
    elif o in [ '-H' ]:
        opt_host = a
        if host_address is None:
            host_address = a
    elif o in [ '-C' ]:
        opt_cfgfile = a
    elif o in [ '-h', '--help' ]:
        usage()
        sys.exit(0)

if host_address is None:
    if len(args) == 1:
        host_address = args[0]
    elif not args:
        sys.stderr.write("ERROR: No host given.\n")
        sys.exit(1)
    else:
        sys.stderr.write("ERROR: Please specify exactly one host.\n")
        sys.exit(1)
elif len(args) == 1:
    host_address = args[0]

if opt_cfgfile is None:
    opt_cfgfile = '/etc/check_mk/fritzbox.mk'

fritzbox_ddns = {}
if opt_cfgfile and os.path.exists(opt_cfgfile):
    try:
        execfile(opt_cfgfile)
    except Exception as e:
        sys.stderr.write('Unhandled error: %s' % traceback.format_exc())

if not opt_ddns:
    if opt_host in fritzbox_ddns:
        opt_ddns = fritzbox_ddns[opt_host]
    elif host_address in fritzbox_ddns:
        opt_ddns = fritzbox_ddns[host_address]

socket.setdefaulttimeout(opt_timeout)

class RequestError(Exception):
    pass

g_device  = None
g_version = None

def get_upnp_info(control, namespace, action, pre_v6=False):
    global g_device, g_version

    if opt_pre_v6:
        url = 'http://%s:49000/upnp/control/%s' % (host_address, control)
    else:
        url = 'http://%s:49000/igdupnp/control/%s' % (host_address, control)

    headers = {
        'User-agent':   'Check_MK agent_fritzbox',
        'Content-Type': 'text/xml',
        'SoapAction':   namespace + '#' + action,
    }

    data = '''<?xml version='1.0' encoding='utf-8'?>
    <s:Envelope s:encodingStyle='http://schemas.xmlsoap.org/soap/encoding/' xmlns:s='http://schemas.xmlsoap.org/soap/envelope/'>
        <s:Body>
            <u:%s xmlns:u="%s" />
        </s:Body>
    </s:Envelope>''' % (action, namespace)

    if opt_debug:
        sys.stdout.write('============================\n')
        sys.stdout.write('URL: %s\n' % url)
        sys.stdout.write('SoapAction: %s\n' % headers['SoapAction'])

    try:
        req = urllib2.Request(url, data, headers)
        handle = urllib2.urlopen(req)
    except Exception, e:
        if opt_debug:
            sys.stdout.write('----------------------------\n')
            sys.stdout.write(traceback.format_exc())
            sys.stdout.write('============================\n')
        raise RequestError('Error during UPNP call')

    infos    = handle.info()
    contents = handle.read()

    parts = infos['SERVER'].split("UPnP/1.0 ")[1].split(' ')
    g_device  = ' '.join(parts[:-1])
    g_version = parts[-1]

    if opt_debug:
        sys.stdout.write('----------------------------\n')
        sys.stdout.write('Server: %s\n' % infos['SERVER'])
        sys.stdout.write('----------------------------\n')
        sys.stdout.write(contents + '\n')
        sys.stdout.write('============================\n')

    # parse the response body
    match = re.search('<u:%sResponse[^>]+>(.*)</u:%sResponse>' % (action, action), contents, re.M | re.S)
    if not match:
        raise APIError('Response is not parsable')
    response = match.group(1)
    matches = re.findall('<([^>]+)>([^<]+)<[^>]+>', response, re.M | re.S)

    attrs = {}
    for key, val in matches:
        attrs[key] = val

    if opt_debug:
        sys.stdout.write('Parsed: %s\n' % pprint.pformat(attrs))

    return attrs

def check_ddns_status(dnsservers, names=[], external_ip=None, timeout=4):
    results = {}
    if dnsservers:
        resolver = dns.resolver.Resolver()
        resolver.nameservers = dnsservers
        resolver.timeout = timeout
    else:
        resolver = None
    for name in names:
        name_ips = ''
        error_text = ''
        if external_ip is None:
            # If we do not have an external IP this check if quite pointless
            # so let's assume the DDNS names are ok
            name_status = 3 # unknown
            error_text = 'No external IP'
        elif resolver is None:
            # No resolver because no DNS servers available
            name_status = 3 # unknown
            error_text = 'No DNS servers available'
        else:
            answers = None
            rtype = dns.rdatatype.AAAA if name.startswith('ipv6:') else dns.rdatatype.A
            try:
                answers = resolver.query(name, rtype)
            except (dns.resolver.NoAnswer, dns.resolver.NoNameservers, dns.resolver.NXDOMAIN, dns.resolver.Timeout) as e:
                error_text = str(e)
            if answers is None:
                name_status = 3 # unknown
                if not error_text:
                    error_text = 'No answer for %s:%s, nameservers %s' % (dns.rdatatype.to_text(rtype), name, ','.join(resolver.nameservers))
            else:
                r = []
                for rdata in answers:
                    r.append(str(rdata))
                name_ips = ','.join(r)
                if external_ip in r:
                    name_status = 0 # OK
                else:
                    name_status = 2 # Critical
        results[name] = (name_status, name_ips, error_text )
    return results

try:
    if not arsoft.dnsutils.is_valid_ipv4(host_address):
        resolver = dns.resolver.Resolver()
        rtype = dns.rdatatype.A
        try:
            answers = resolver.query(host_address, rtype)
            if answers:
                host_address = str(answers[0])
        except (dns.resolver.NoAnswer, dns.resolver.NoNameservers, dns.resolver.NXDOMAIN, dns.resolver.Timeout) as e:
            pass
    
    status = {}
    for control, namespace, action in [
        ('WANIPConn1', 'urn:schemas-upnp-org:service:WANIPConnection:1', 'GetStatusInfo'),
        ('WANIPConn1', 'urn:schemas-upnp-org:service:WANIPConnection:1', 'GetExternalIPAddress'),
        ('WANCommonIFC1', 'urn:schemas-upnp-org:service:WANCommonInterfaceConfig:1', 'GetAddonInfos'),
        ('WANCommonIFC1', 'urn:schemas-upnp-org:service:WANCommonInterfaceConfig:1', 'GetCommonLinkProperties'),
        ('WANDSLLinkC1', 'urn:schemas-upnp-org:service:WANDSLLinkConfig:1', 'GetDSLLinkInfo'),
        ('WANDSLLinkC1', 'urn:schemas-upnp-org:service:WANDSLLinkConfig:1', 'GetModulationType'),
        ('WANDSLLinkC1', 'urn:schemas-upnp-org:service:WANDSLLinkConfig:1', 'GetDestinationAddress'),
        ]:
        try:
            status.update(get_upnp_info(control, namespace, action, opt_pre_v6))
        except:
            if opt_debug:
                raise

    sys.stdout.write('<<<check_mk>>>\n')
    sys.stdout.write('Version: %s\n' % g_version)
    sys.stdout.write('AgentOS: %s\n' % g_device)

    sys.stdout.write('<<<fritz:sep(59)>>>\n')
    for key, value in status.items():
        sys.stdout.write('%s;%s\n' % (key, value))

    sys.stdout.write('<<<fritz_ddns:sep(59)>>>\n')
    dns_servers = []
    if opt_dns_server is not None:
        dns_servers.append(opt_dns_server)
    else:
        if opt_ext_dns:
            prim_dns = status.get('NewDNSServer1', None)
            second_dns = status.get('NewDNSServer2', None)
            if prim_dns is not None:
                dns_servers.append(prim_dns)
            if second_dns is not None:
                dns_servers.append(second_dns)
                
        dns_servers.append(host_address)

    #print(dns_servers)
    #print(opt_ddns)
    external_ip = status.get('NewExternalIPAddress', None)
    ddns_status = check_ddns_status(dns_servers, names=opt_ddns, external_ip=external_ip, timeout=opt_timeout)
    for key, (name_status, name_ips, error_text) in ddns_status.items():
        sys.stdout.write('%s;%i;%s;%s;%s\n' % (key, name_status, name_ips, '' if not external_ip else str(external_ip), error_text))

except:
    if opt_debug:
        raise
    sys.stderr.write('Unhandled error: %s' % traceback.format_exc())
