#!/usr/bin/python3
# encoding: utf-8
#
# Check_MK APT Plugin - Check for upgradeable packages.
#
# Copyright 2010, Stefan Schlesinger <sts@ono.at>
#
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import sys
import os
import time

try:
    import apt
except ImportError:
    sys.exit

class AptCache(apt.Cache):

    # apt-cache update interval in seconds
    update_interval = 3600

    # path to the apt cache directory
    cache_dir = '/var/cache/apt'

    def _get_mtime(self):
        mtime = 0
        for f in ['pkgcache.bin', 'srcpkgcache.bin']:
            path = self.cache_dir + '/' + f
            if not os.path.isfile(path):
                continue
            f_mtime = os.path.getmtime(path)
            if f_mtime > mtime:
                mtime = f_mtime

        now = time.time()
        self.cache_mtime = mtime
        self.cache_age   = now - self.cache_mtime
        #print('cache age %s' %  self.cache_age)

        return self.cache_age

    def __init__(self, update_if_not_up_to_date=False):
        apt.Cache.__init__(self)
        self._get_mtime()
        if update_if_not_up_to_date:
            self.update_cache()
        self.open(None)

    # automatically update the apt cache once a hour
    def update_cache(self):
        if not self.cache_age or self.cache_age > self.update_interval:
            try:
                self.update()
            except apt.cache.FetchFailedException as e:
                pass


def get_upgradeable():
    pkgs_to_upgrade     = []
    pkgs_to_sec_upgrade = []
    cache = AptCache()

    for pkg in cache:
        # the comments show the way on how we could implement this with the
        # new APT API. Since its only supported on the most current Debian
        # platforms, we still use the older one and supress the warnings
        # at the beginning of the script.
        #
        if pkg.is_upgradable:
        #if pkg.isUpgradable:
            name      = pkg.name
            candidate = pkg.candidate.origins[0]
            #candidate = pkg.candidateOrigin[0]

            # Debian security archive
            if candidate.label == "Debian-Security":
                pkgs_to_sec_upgrade.append(name)
            # Ubuntu security archive
            elif candidate.archive.find("security") > -1:
                pkgs_to_sec_upgrade.append(name)
            else:
                pkgs_to_upgrade.append(name)
            #candidate = pkg.candidate
            #print candidate.origins
            #pkgs_to_upgrade.append(pkg.name.rstrip("\n"))

    return [cache.cache_mtime, pkgs_to_upgrade, pkgs_to_sec_upgrade]

if __name__ == "__main__":
    age, upgrades, secupgrades = get_upgradeable()

    stats_file = os.path.join(AptCache.cache_dir, 'check_mk_stats')
    now = time.time()
    try:
        f = open(stats_file, 'w')
        f.write("<<<apt:sep(59)>>>\n")
        f.write("check_time;%i\n" % now)
        f.write("cache_time;%i\n" % age)
        f.write("upgrades;%s\n" % ",".join(upgrades))
        f.write("secupgrades;%s\n" % ",".join(secupgrades))
        f.close()
    except:
        try:
            os.remove(stats_file)
        except:
            pass

