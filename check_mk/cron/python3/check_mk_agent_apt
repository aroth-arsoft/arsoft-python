#!/usr/bin/python3
# encoding: utf-8
#
# Check_MK APT Plugin - Check for upgradeable packages.
#
# Copyright 2010, Stefan Schlesinger <sts@ono.at>
#
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import sys
import os
import time

check_mk_spool_dir = '/var/lib/check_mk_agent/spool'
update_cache_if_not_up_to_date = True
# apt-cache update interval in seconds
update_cache_interval = 3600

try:
    import apt
except ImportError:
    sys.exit(0)

def get_boot_time():
    """Return the system boot time expressed in seconds since the epoch."""
    with open('/proc/stat', 'rb') as f:
        for line in f:
            if line.startswith(b'btime'):
                ret = float(line.strip().split()[1])
                return ret
    return 0.0

class AptCache(apt.Cache):

    # path to the apt cache directory
    cache_dir = '/var/cache/apt'

    def _get_mtime(self):
        mtime = 0
        for f in ['pkgcache.bin', 'srcpkgcache.bin']:
            path = self.cache_dir + '/' + f
            if not os.path.isfile(path):
                continue
            f_mtime = os.path.getmtime(path)
            if f_mtime > mtime:
                mtime = f_mtime

        now = time.time()
        self.cache_mtime = mtime
        self.cache_age   = now - self.cache_mtime
        #print('cache age %s' %  self.cache_age)

        return self.cache_age

    def __init__(self):
        apt.Cache.__init__(self)
        self._get_mtime()
        if update_cache_if_not_up_to_date:
            self.update_cache()
        self.open(None)

    # automatically update the apt cache once a hour
    def update_cache(self):
        if not self.cache_age or self.cache_age > update_cache_interval:
            try:
                self.update()
            except apt.cache.FetchFailedException as e:
                pass
            except apt.cache.LockFailedException as e:
                pass
            self._get_mtime()

def get_upgradeable():
    try:
        pkgs_to_upgrade     = []
        pkgs_to_sec_upgrade = []
        cache = AptCache()
        for pkg in cache:
            # the comments show the way on how we could implement this with the
            # new APT API. Since its only supported on the most current Debian
            # platforms, we still use the older one and supress the warnings
            # at the beginning of the script.
            #
            if pkg.is_upgradable:
            #if pkg.isUpgradable:
                name      = pkg.name
                candidate = pkg.candidate.origins[0]
                #candidate = pkg.candidateOrigin[0]

                # Debian security archive
                if candidate.label == "Debian-Security":
                    pkgs_to_sec_upgrade.append(name)
                # Ubuntu security archive
                elif candidate.archive.find("security") > -1:
                    pkgs_to_sec_upgrade.append(name)
                else:
                    pkgs_to_upgrade.append(name)
                #candidate = pkg.candidate
                #print candidate.origins
                #pkgs_to_upgrade.append(pkg.name.rstrip("\n"))
        return (cache.cache_mtime, pkgs_to_upgrade, pkgs_to_sec_upgrade)
    except SystemError:
        return (None, None, None)

if __name__ == "__main__":
    cache_mtime, upgrades, secupgrades = get_upgradeable()
    if cache_mtime is None:
        # happens when apt update is in progress
        sys.exit(0)

    boot_time = get_boot_time()

    if len(sys.argv) > 1:
        stats_file = sys.argv[1]
        use_stdout = True if sys.argv[1] == '-' else False
    else:
        use_stdout = False
        stats_file = os.path.join(check_mk_spool_dir, 'check_mk_stats')
    now = time.time()
    try:
        if use_stdout:
            f = sys.stdout
        else:
            f = open(stats_file, 'w')
        f.write("<<<apt:sep(59)>>>\n")
        f.write("check_time;%i\n" % now)
        f.write("cache_time;%i\n" % cache_mtime)
        f.write("boot_time;%i\n" % boot_time)
        f.write("upgrades;%s\n" % ",".join(upgrades))
        f.write("secupgrades;%s\n" % ",".join(secupgrades))
        if not use_stdout:
            f.close()
    except IOError:
        try:
            os.remove(stats_file)
        except:
            pass

