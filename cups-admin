#!/usr/bin/python
import os, sys
import argparse

from arsoft.cups import *

class CupsAdminApp(object):

    def __init__(self):
        self._verbose = False

    def main(self, argv=None):
        #=============================================================================================
        # process command line
        #=============================================================================================
        parser = argparse.ArgumentParser(description='manage CUPS')
        parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='enable verbose output of this script.')
        parser.add_argument('-d', '--debug', dest='debug', action='store_true', help='enable debugging of this script.')
        parser.add_argument('-l', '--localhost', dest='localhost', action='store_true', help='connect to local CUPS server.')
        parser.add_argument('--server', dest='server', type=str, help='specifies the CUPS server to use.')
        parser.add_argument('--add-remote', dest='add_remote_server', type=str, help='adds all printers from the given remote CUPS server.')
        parser.add_argument('--remove-remote', dest='remove_remote_server', type=str, help='removes all printers on the given remote CUPS server.')
        parser.add_argument('--default', dest='default_printer', type=str, help='sets the default printer.')

        args = parser.parse_args()

        self._verbose = args.verbose
        if args.localhost:
            self._conn = CupsConnection('localhost')
        elif args.server:
            self._conn = CupsConnection(args.server)
        else:
            self._conn = CupsConnection()

        display_printers = True
        ret = 0
        if args.add_remote_server:
            display_printers = False
            self._remote_conn = CupsConnection(args.add_remote_server)
            if not self._conn.add_remote_printers(self._remote_conn):
                ret = 1
        elif args.remove_remote_server:
            display_printers = False
            if not self._conn.remove_remote_printers(args.remove_remote_server):
                ret = 1
        if args.default_printer:
            display_printers = False
            if not self._conn.set_default_printer(self.default_printer):
                ret = 1
        if display_printers:
            if not self._conn.show_printers(include_raw=True if args.debug is True else False):
                ret = 1
        return ret

if __name__ == "__main__":
    app = CupsAdminApp()
    sys.exit(app.main(sys.argv))
