#!/usr/bin/python
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; mixedindent off; indent-mode python;

import sys
import argparse

import arsoft.dns

class dns_update_app(object):

    DEFAULT_RRTYPE = 'A'
    DEFAULT_TTL = 86400
    DEFAULT_SERVER = 'localhost'
    DEFAULT_KEYFILE = None

    def __init__(self):
        self.verbose = False
        self._updates = []

    @staticmethod
    def parse_name(Origin, Name):
        try:
            n = dns.name.from_text(Name)
        except:
            return None, None
        if Origin is None:
            Origin = dns.resolver.zone_for_name(n)
            Name = n.relativize(Origin)
            return Origin, Name
        else:
            try:
                Origin = dns.name.from_text(Origin)
                Name = n - Origin
            except:
                Origin = None
                Name = None
            return Origin, Name
        
    def _get_update_object(self, name, keyring):
        Origin, Name = self.parse_name(Origin=None, Name=name)
        if Origin is not None:
            for update in self._updates:
                if update.origin == Origin:
                    return update
            update = dns.update.Update(Origin, keyring=keyring)
            self._updates.append(update)
            return update
        return None

    def main(self):
        #=============================================================================================
        # process command line
        #=============================================================================================
        parser = argparse.ArgumentParser(description='update the DNS information')
        parser.add_argument('--verbose', dest='verbose', action='store_true', help='enable verbose output of this script.')
        parser.add_argument('--noop', dest='noop', action='store_true', help='no not actual update anything, just show what would be done.')
        parser.add_argument('--available', dest='available', action='store_true', help='checks if EFI is available on this machine.')
        parser.add_argument('--server', dest='server', default=self.DEFAULT_SERVER, help='name of the DNS server for updates')
        parser.add_argument('--rrtype', dest='rrtype', default=self.DEFAULT_RRTYPE, help='specify the RR type for the next operation')
        parser.add_argument('--ttl', dest='ttl', default=self.DEFAULT_TTL, help='specify the TTL for the records')
        parser.add_argument('--key', dest='keyfile', default=self.DEFAULT_KEYFILE, help='key to use for the update')
        
        parser.add_argument('-a', '--add', dest='add', nargs=2, help='adds the given DNS A record')
        parser.add_argument('-d', '--delete', dest='delete', nargs='+', help='deletes the specified DNS record')
        parser.add_argument('-u', '--update', dest='update', nargs=2, help='updates the specified DNS record')
        parser.add_argument('--update-host', dest='update_host', nargs=argparse.REMAINDER, help='updates the given host for the specified address.')
        parser.add_argument('--import-host', dest='import_host', nargs=argparse.REMAINDER, help='import the result from the specified DNS server and update the local DNS server.')

        args = parser.parse_args()

        self.verbose = args.verbose
        
        if args.keyfile:
            keyring = arsoft.dns.read_key_file(args.keyfile)
        else:
            keyring = None


        if args.add:
            (name, payload) = args.add
            update = self._get_update_object(name, keyring)
            update.add(name, args.ttl, args.rrtype, payload)
        if args.delete:
            for name in args.delete:
                update = self._get_update_object(name, keyring)
                self._update.delete(name, args.rrtype)
        if args.update:
            (name, payload) = args.update
            update = self._get_update_object(name, keyring)
            update.replace(name, args.ttl, args.rrtype, payload)

        if args.update_host:
            print(args.update_host)

        if args.import_host:
            print(args.import_host)
            
        if len(self._updates) == 0:
            print('Nothing to do.')
            ret = 0
        else:
            for update in self._updates:
                response = dns.query.tcp(update, args.server)
            ret = 0
        
        return ret

if __name__ == "__main__":
    app =  dns_update_app()
    sys.exit(app.main())
