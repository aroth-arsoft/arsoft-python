#!/usr/bin/python
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; mixedindent off; indent-mode python;

import sys
import os
import argparse
from arsoft.disks.edskmgr import ExternalDiskManager

class ExternalDiskManagerApp(object):

    def __init__(self):
        self._mgr = ExternalDiskManager()

    def main(self, argv=None):
        #=============================================================================================
        # process command line
        #=============================================================================================
        parser = argparse.ArgumentParser(description='manages external hard disks.')
        parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='enable verbose output of this script.')
        parser.add_argument('-C', '--config-directory', dest='configdir', default=self._mgr.config_dir, help='name of the directory containing the external disk manager configuration.')
        parser.add_argument('--noop', dest='noop', action='store_true', help='just tests and shows what would be done.')
        parser.add_argument('--load', dest='load', action='store_true', help='rescans all empty host interfaces.')
        parser.add_argument('--reset-config', dest='reset_config', action='store_true', help='reset configuration and treat all disks as internal ones.')
        parser.add_argument('--eject', dest='eject', action='store_true', help='removes the given external disks or all present external disks.')
        parser.add_argument('--udev-disk', dest='udev_disk', nargs=1, metavar='DISK', help='handles disk event within udev.')
        parser.add_argument('--udev-partition', dest='udev_partition', nargs=1, metavar='PART', help='handles partition event within udev.')
        parser.add_argument('--register', dest='register', nargs='+', metavar='DISK', help='registers the given disk as external HDD to the system.')
        parser.add_argument('--unregister', dest='unregister', nargs='+', metavar='DISK', help='unregisters the given disk from the known external HDDs of the system.')
        parser.add_argument('--status', dest='status', action='store_true', help='shows the status of all external disks.')

        args = parser.parse_args()

        self._verbose = args.verbose
        self._noop = args.noop

        self._mgr.load_config(args.configdir)
        
        if args.reset_config:
            if self._mgr.reset_config():
                if not self._mgr.write_config():
                    sys.stderr.write('Failed to write config')
                    ret = 2
                else:
                    ret = 0
            else:
                ret = 1
        elif args.load:
            if self._mgr.checkRoot():
                ret = self._mgr.rescan_empty_scsi_hosts()
            else:
                ret = 1
        elif args.eject:
            if self._mgr.checkRoot():
                ret = self._mgr.remove_external_disks()
            else:
                ret = 1
        elif args.udev_disk is not None:
            if self._mgr.checkRoot():
                self._load_udev_env()
                ret = self._mgr.load_udev_disk(args.udev_disk)
            else:
                ret = 1
        elif args.udev_partition is not None:
            if self._mgr.checkRoot():
                self._load_udev_env()
                ret = self._mgr.load_udev_partition(args.udev_partition)
            else:
                ret = 1
        elif args.register is not None:
            if self._mgr.checkRoot():
                if self._mgr.register_disk(args.register):
                    self._mgr.write_config()
                    ret = 0
                else:
                    ret = 1
            else:
                ret = 1
        elif args.unregister is not None:
            if self._mgr.checkRoot():
                if self._mgr.unregister_disk(args.unregister):
                    self._mgr.write_config()
                    ret = 0
                else:
                    ret = 1
            else:
                ret = 1
        elif args.status:
            ret = self._mgr.show_status()
        else:
            sys.stderr.write("no operation specified.\n")
            ret = 1
        return ret


if __name__ == "__main__":
    app = ExternalDiskManagerApp()
    sys.exit(app.main(sys.argv))
