#!/usr/bin/python
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; mixedindent off; indent-mode python;

from __future__ import print_function
import sys
import argparse
import os
import ldap
import ldap.modlist as modlist
import socket
import string
import shlex, subprocess

from arsoft.ldap.slapd import *

class SlapdConfigApp(object):

    def __init__(self):
        self._verbose = False
        self._quiet = False
        self._commands = None
        self._uri = None
        self._ldapbase = None
        self._username = None
        self._password = None
        self._saslmech = None
        self._cxn = None

    def verbose(self, msg):
        if self._verbose:
            print(msg)
    def error(self, msg):
        print(msg, file=sys.stderr)

    def ldapsearch_ext(uri, base, filter, attrs):
        #cmdline = ['/usr/bin/ldapsearch', '-LLL', '-Q', '-Y', 'EXTERNAL', '-H', uri]
        cmdline = ['/usr/bin/ldapsearch', '-LLL', '-x', '-H', uri]

        if base is not None:
            cmdline.append( '-b' )
            cmdline.append( base )
        if filter is not None:
            cmdline.append( filter )
        if attrs is not None:
            for a in attrs:
                cmdline.append( a )

        try:
            self.verbose("ldapsearch_ext cmdline " + str(cmdline))
            p = subprocess.Popen(cmdline, stdout=subprocess.PIPE)
        except OSError, e:
            p = None
            self.error("Execution failed:" + str(e))
        if p is not None:
            p.wait()
            curline = ''
            lines = []
            for l in p.stdout.readlines():
                l = l.rstrip('\n')
                if len(l) > 0 and l[0] == ' ':
                    curline += l
                else:
                    curline += l
                    lines.append(curline)
                    curline = ''
                    
            #print "all lines:\n" + str(lines)

            entries = {}
            entry = {}
            entry_dn = None
            for l in lines:
                if len(l) == 0:
                    entries[entry_dn] = entry
                    entry_dn = None
                else:
                    elems = l.split(':')
                    if len(elems) > 1:
                        (key, value) = (elems[0], elems[1].lstrip(' ') )
                    else:
                        key = elems[0]
                        value = ''
                    if entry_dn is None:
                        entry_dn = value
                    else:
                        entry[key] = value
            if entry_dn is not None:
                entries[entry_dn] = entry

            ret = entries
        else:
            ret = None
        return ret

    def connect(self):
        try:
            self.verbose("Connecting to " + self._uri + "...")
            self._cxn = ldap.initialize(self._uri)
        except ldap.LDAPError, e:
            self.error("Failed to connect to ldap server " + self._uri + ". Error: " + e.desc)
            self._cxn = None

        if self._cxn is not None:
            # you should  set this to ldap.VERSION2 if you're using a v2 directory
            self._cxn.protocol_version = ldap.VERSION3
            ret = True
        else:
            ret = False
        return ret

    def bind(self):
        # Pass in a valid username and password to get 
        # privileged directory access.
        # If you leave them as empty strings or pass an invalid value
        # you will still bind to the server but with limited privileges.
        
        ldapusername = '' if self._username is None else self._username
        ldappassword = '' if self._password is None else self._password
        
        try:
            # Any errors will throw an ldap.LDAPError exception 
            # or related exception so you can ignore the result
            if self._saslmech == 'simple':
                if ldapusername != '':
                    self.verbose("simple_bind user:" + ldapusername + " pwd:" + ldappassword)
                else:
                    self.verbose("simple_bind anonymous")
                self._cxn.simple_bind_s(ldapusername, ldappassword)
                ret = True
            else:
                self.verbose('bind ' + self._saslmech + " user:" + ldapusername + " pwd:" + ldappassword)
                self._cxn.bind_s(ldapusername, ldappassword, self._saslmech)
                ret = True
        except ldap.LDAPError, e:
            self.error("Failed to bind to ldap server as " + ldapusername + ". Error: " + str(e))
            ret = False
        return ret
        
    def unbind(self):
        self._cxn.unbind_s()
        self._cxn = None

    def main(self, argv=None):
        if argv is None:
            argv = sys.argv

        #=============================================================================================
        # process command line
        #=============================================================================================
        parser = argparse.ArgumentParser(description='configures and manages an OpenLDAP server.')
        parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='enable verbose output of this script.')
        parser.add_argument('-q', '--quiet', dest='quiet', action='store_true', help='disable any output, except errors.')
        parser.add_argument('-d', '--debug', dest='debug', action='store_true', help='enable debugging of this script.')
        parser.add_argument('-l', '--localhost', dest='localhost', action='store_true', help='connect to local OpenLDAP server.')
        parser.add_argument('--uri', dest='uri', type=str, help='specify the address of the ldap server.')
        parser.add_argument('--username', dest='username', type=str, help='specify the user to access the ldap directory.')
        parser.add_argument('--password', dest='password', type=str, help='password for the ldap user.')
        parser.add_argument('--base', dest='base', type=str, help='specify the base dn for ldap search operation.')
        parser.add_argument('-Y', '--saslmech', dest='saslmech', type=str, default='simple', help='specify mechanism used to SASL authentication.')
        parser.add_argument('action', type=str, nargs=argparse.REMAINDER, help='specifies the action to perform.')

        args = parser.parse_args()

        self._verbose = args.verbose
        self._quiet = args.quiet
        self._saslmech = args.saslmech

        if args.uri is not None:
            if args.uri.startswith('ldap://') or \
                args.uri.startswith('ldaps://') or \
                args.uri.startswith('ldapi://'):
                self._uri = args.uri
            else:
                if args.uri[0] == '/':
                    self._uri = "ldapi://" + str(args.uri)
                else:
                    self._uri = "ldap://" + str(args.uri)
        else:
            if args.localhost == True:
                self._uri = "ldap://localhost"
            else:
                self._uri = ldap.get_option(ldap.OPT_URI)
                if self._uri is None:
                    ldapserver  = ldap.get_option(ldap.OPT_SERVER)
                    if ldapserver is None:
                        self._uri = "ldap://localhost"
                    else:
                        self._uri = "ldap://" + str(ldapserver)

        if args.base is None or len(args.base) == 0:
            self._base = ldap.get_option(ldap.OPT_DEFBASE)
        else:
            self._base = args.base

        if args.username is not None:
            if '=' in args.username:
                # got a full bind dn
                self._username = args.username
            else:
                self._username = 'cn=' + args.username
                if self._base is not None:
                    self._username = self._username + ',' + self._base

        self._password = args.password
        
        if args.action is None or len(args.action) == 0:
            action_name = 'status'
            action_args = []
        else:
            action_name = args.action[0]
            action_args = args.action[1:]

        if self.connect():
            if self.bind():
                if action_name == 'status':
                    action_obj = action_status(self, action_args)
                    ret = action_obj.run()
                elif action_name == 'schema':
                    action_obj = action_schema(self, action_args)
                    ret = action_obj.run()
                elif action_name == 'database':
                    action_obj = action_database(self, action_args)
                    ret = action_obj.run()
                elif action_name == 'module':
                    action_obj = action_module(self, action_args)
                    ret = action_obj.run()
                elif action_name == 'cert':
                    action_obj = action_cert(self, action_args)
                    ret = action_obj.run()
                else:
                    ret = 3
                self.unbind()
            else:
                ret = 2
        else:
            ret = 1
            
        return ret

if __name__ == "__main__":
    app = SlapdConfigApp()
    sys.exit(app.main(sys.argv))
