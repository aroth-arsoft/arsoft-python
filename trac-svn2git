#!/usr/bin/python
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; mixedindent off; indent-mode python;

from __future__ import unicode_literals
import sys
import os
import argparse
import re
from urlparse import urlparse
from arsoft.utils import rmtree, runcmdAndGetData
from arsoft.trac.admin import TracAdmin

class trac_svn2git(object):

    def __init__(self):
        self._db = None
        self._last_error = None
        self._gitrepo = None
        self._svn2git = {}
        self._git2svn = {}
        trac_svn2git.svn_revno_pattern = r'\[([0-9]+)\]'.encode('utf-8')

    def _load_lookup_table(self, filename):
        try:
            f = open(filename, 'r')
            for line in f:
                (reponame, svnrevno, gitcommithash) = line.split('\t')
                reponame = reponame.encode('utf-8')
                svnrevno = int(svnrevno)
                gitcommithash = gitcommithash.encode('utf-8')
                if svnrevno in self._svn2git:
                    self._svn2git[svnrevno].append( (reponame, gitcommithash) )
                else:
                    self._svn2git[svnrevno] = [ (reponame, gitcommithash) ]

                if not reponame in self._git2svn:
                    self._git2svn[reponame] = {}
                self._git2svn[reponame][gitcommithash] = svnrevno
            f.close()
            ret = True
        except IOError as e:
            ret = False
            pass
        return ret
        
    def _convertSVNIDToGitID(self, text, nrHashCharacters=40):
        if text is None:
            return (0, None)
        num_matches = 0
        for match in re.finditer(self.svn_revno_pattern, text):
            svnrevno = int(match.group(1))
            if svnrevno in self._svn2git:
                org_text = match.group(0)

                new_text_elems = []
                gitcommitlist = self._svn2git[svnrevno]
                for (reponame, gitcommithash) in gitcommitlist:
                    gitidstr = gitcommithash[0:nrHashCharacters]
                    new_text_elems.append(u'[' + gitidstr + u'/' + reponame + u']')
                new_text = new_text_elems.join(',') + u' (SVN r' + str(svnrevno) + u')'
                text = text.replace(org_text, new_text)
                num_matches = num_matches + 1
                print('replace ' + str(org_text) + ' with '+str(new_text))
        return (num_matches, text)

    def _convert_ticket_change(self):
        cur = self._db.cursor()
        update_cur = self._db.cursor()
        # Convert table 'ticket_change'
        cur.execute('SELECT ticket,time,field,oldvalue,newvalue FROM ticket_change')
        while True:
            row = cur.fetchone()
            if row == None:
                break
            #print (row)
            (ticket,time,field,oldvalue,newvalue) = row
            
            if oldvalue:
                oldvalue = oldvalue.decode('utf-8')
            if newvalue:
                newvalue = newvalue.decode('utf-8')
            (oldvalue_changes, oldvalue) = self._convertSVNIDToGitID(oldvalue)
            (newvalue_changes, newvalue) = self._convertSVNIDToGitID(newvalue)
            
            if oldvalue_changes != 0 or newvalue_changes != 0:
                #print('field=' + str(field) + ' oldvalue='+str(oldvalue))
                #print('field=' + str(field) + ' newvalue='+str(newvalue))
                if self._dbtype == 'sqlite':
                    stmt = "UPDATE ticket_change SET oldvalue=?, newvalue=? WHERE ticket=? AND time=? AND field=?"
                    params = [oldvalue, newvalue, ticket, time, field]
                elif self._dbtype == 'mysql':
                    stmt = "UPDATE ticket_change SET oldvalue=%(oldvalue)s, newvalue=%(newvalue)s WHERE ticket=%(ticket)s AND time=%(time)s AND field=%(field)s"
                    params = {'oldvalue':oldvalue, 'newvalue':newvalue, 'ticket': ticket, 'time':time, 'field':field}
                print(stmt, params)
                update_cur.execute(stmt, params)

        self._db.commit()
        return True

    def _convert_ticket(self):
        cur = self._db.cursor()
        update_cur = self._db.cursor()
        # Convert table 'ticket_change'
        cur.execute('SELECT id,description FROM ticket')
        while True:
            row = cur.fetchone()
            if row == None:
                break
            #print (row)
            (ticket_id,description) = row
            
            if description:
                description = description.decode('utf-8')
            (description_changes, description) = self._convertSVNIDToGitID(description)
            
            if description_changes != 0:
                #print('field=' + str(field) + ' newvalue='+str(newvalue))
                if self._dbtype == 'sqlite':
                    stmt = "UPDATE ticket SET description=? WHERE id=?"
                    params = [description, ticket_id]
                elif self._dbtype == 'mysql':
                    stmt = "UPDATE ticket SET description=%(description)s WHERE id=%(id)i"
                    params = {'description': description, 'id':ticket_id}
                print(stmt, params)
                update_cur.execute(stmt, params)
                
        self._db.commit()
        return True

    def _convert_milestone(self):
        cur = self._db.cursor()
        update_cur = self._db.cursor()
        # Convert table 'milestone'
        cur.execute('SELECT name,description FROM milestone')
        while True:
            row = cur.fetchone()
            if row == None:
                break
            #print (row)
            (milestone_name,description) = row
            
            if description:
                description = description.decode('utf-8')
            (milestone_changes, description) = self._convertSVNIDToGitID(description)
            
            if milestone_changes != 0:
                if self._dbtype == 'sqlite':
                    stmt = "UPDATE milestone SET description=? WHERE name=?"
                    params = [description, milestone_name]
                elif self._dbtype == 'mysql':
                    stmt = "UPDATE milestone SET description=%(description)s WHERE name=%(name)s"
                    params = {'description': description, 'name':milestone_name}
                print(stmt, params)
                update_cur.execute(stmt, params)

        self._db.commit()
        return True

    def _convert_wiki(self):
        cur = self._db.cursor()
        update_cur = self._db.cursor()
        # Convert table 'wiki'
        ret = True
        cur.execute('SELECT name,version,text FROM wiki')
        while True:
            row = cur.fetchone()
            if row == None:
                break
            #print (row)
            (wiki_name,wiki_version,text) = row
            
            if text:
                text = text.decode('utf-8')
            (wiki_changes, text) = self._convertSVNIDToGitID(text)
            
            if wiki_changes != 0:
                if self._dbtype == 'sqlite':
                    stmt = "UPDATE wiki SET text=? WHERE name=? AND version=?"
                    params = [text, wiki_name, wiki_version]
                elif self._dbtype == 'mysql':
                    stmt = "UPDATE wiki SET text=%(text)s WHERE name=%(name)s AND version=%(version)s"
                    params = {'text':text, 'name': wiki_name, 'version':wiki_version}
                print(stmt, params)
                update_cur.execute(stmt, params)
        self._db.commit()
        return True

    def _load_tracenv(self, tracenv):
        trac = TracAdmin(tracenv)
        if trac.database_type == 'sqlite':
            self._dbtype = trac.database_type
            self._dbfile = trac.database_file
            ret = True
        elif trac.database_type == 'mysql':
            self._dbtype = trac.database_type
            o = urlparse(trac.database)
            self._dbserver = o.hostname
            self._dbuser = o.username
            self._dbpassword = o.password
            if o.path[0] == '/':
                self._dbname = o.path[1:]
            else:
                self._dbname = o.path
            ret = True
        else:
            self._last_error = 'This script only supports SQLite3 and MySQL databases. Your database ' + str(trac.database_type) + ' is not supported.'
            ret = False
        return ret
        
    def _open_db(self):
        if self._dbtype == 'sqlite':
            try:
                import sqlite3
                ret = True
            except ImportError as e:
                self._last_error = 'unable to load sqlite3 extension for python.'
                ret = False
            if ret:
                try:
                    self._db = sqlite3.connect(self._dbfile)
                    ret = True if self._db is not None else False
                except sqlite3.Error as e:
                    self._db = None
                    self._last_error = str(e)
                    ret = False
        elif self._dbtype == 'mysql':
            try:
                import MySQLdb
                ret = True
            except ImportError as e:
                self._last_error = 'unable to load MySQLdb extension for python.'
                ret = False
            if ret:
                try:
                    self._db = MySQLdb.connect(host=self._dbserver, user=self._dbuser, passwd=self._dbpassword, db=self._dbname, 
                                                charset='utf8', init_command='SET NAMES UTF8', use_unicode=True)
                    ret = True if self._db is not None else False
                except MySQLdb.Error as e:
                    self._db = None
                    self._last_error = str(e)
                    ret = False
        else:
            ret = False
        return ret
        
    def _close_db(self):
        if self._db is not None:
            self._db.close()
            self._db = None

    def main(self, argv=None):
        if argv is None:
            argv = sys.argv
            
        #=============================================================================================
        # process command line
        #=============================================================================================
        parser = argparse.ArgumentParser(description='converts SVN reference with trac to GIT commits')
        parser.add_argument('tracenv', help='trac environment', metavar='tracenv')
        parser.add_argument('gitrepo', help='GIT repository', metavar='gitrepo')
        parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='enable verbose output of this script.')

        args = parser.parse_args()
        self._verbose = args.verbose
        self._gitrepo = args.gitrepo

        if not self._load_tracenv(args.tracenv):
            sys.stderr.write('Failed to load trac environment ' + args.tracenv + ', error ' + str(self._last_error) + '\n')
            return 1
            
        if not self._load_lookup_table(os.path.join(args.gitrepo, 'svn2git_lookup')):
            sys.stderr.write('Failed to load lookup table, error ' + str(self._last_error) + '\n')
            ret = False
        else:
            if self._open_db():
                ret = True
                if not self._convert_ticket_change():
                    sys.stderr.write('Failed to convert ticket changes, error ' + str(self._last_error) + '\n')
                    ret = False
                if not self._convert_ticket():
                    sys.stderr.write('Failed to convert tickets, error ' + str(self._last_error) + '\n')
                    ret = False
                if not self._convert_milestone():
                    sys.stderr.write('Failed to convert milestones, error ' + str(self._last_error) + '\n')
                    ret = False
                if not self._convert_wiki():
                    sys.stderr.write('Failed to convert wiki, error ' + str(self._last_error) + '\n')
                    ret = False
        
                self._close_db()
                
            else:
                ret = False
                sys.stderr.write('Failed to open database, error ' + str(self._last_error) + '\n')

        return 0 if ret else 1
        
if __name__ == "__main__":
    app =  trac_svn2git()
    sys.exit(app.main())

"""
<?php

/**
 * This script converts the commit references from SVN IDs to GIT IDs, i.e. changing in all tickets
 * [1234] to [a42v2e3] or whatever the corresponding GIT hash is
 *
 * It needs a SVN ID -> GIT ID lookup table file called lookupTable.txt to match IDs.
 *
 * Execute it with php.exe convertTracTickets.php
 *
 * Needs the sqlite3 extension enabled to access the TRAC database.
 **/
error_reporting(E_ALL);

/* CONFIGURATION */

// Path to trac DB
$pathDB = "/var/www/trac-git/tracenv/db/trac.db";

// Path to lookup table (SVN revision number to GIT revion hash)
$pathLookupTable = "lookupTable.txt";

// Number of characters for the changeset hash. This has to be 4 <= nr <= 40
$nrHashCharacters = 40;

/* END CONFIGURATION */

/**
 * Converts a text with references to an SVN revision [1234] into the corresponding GIT revision
 *
 * @param text Text to convert
 * @param lookupTable Conversion table from SVN ID to Git ID
 * @returns True if conversions have been made
 */
function convertSVNIDToGitID(&$text, $lookupTable, $nrHashCharacters)
{       
    // Extract references to SVN revisions [####]
    $pattern = '/\[([0-9]+)\]/';
    
    if (preg_match_all($pattern, $text, $matches, PREG_SET_ORDER) > 0)
    {       
        foreach($matches as $match)
        {       
            $svnID = $match[1];
            if (!isSet($lookupTable[$svnID]))
            {
                echo "Warning: unknown GIT hash for SVN revision $svnID\n";
                continue;
            }
            $gitID = substr($lookupTable[$svnID], 0, $nrHashCharacters);
            
            $text = str_replace('[' . $svnID . ']', '[' . $gitID . '] (SVN r' . $svnID . ')', $text);
        }
        
        return true;
    }
    
    return false;
}

echo "Creating SVN -> GIT conversion table table...\n";

// Create the lookup table
$lines = file($pathLookupTable);
foreach ($lines as $line)
{   
    if (empty($line)) continue; 
    list ($svnID, $gitID) = explode("\t", trim($line)); 
    $lookupTable[$svnID] = $gitID;
}

// Connect to the TRAC database
$db = new SQLite3($pathDB);

echo "Converting table 'ticket_change'...\n";

// Convert table 'ticket_change'
$result = $db->query('SELECT * FROM ticket_change'); 

$i = 1;
while ($row = $result->fetchArray())
{           
    $i++;
    $oldValue = $db->escapeString($row['oldvalue']);
    $newValue = $db->escapeString($row['newvalue']);
    
    // Only update when there is something to be changed, since SQLite isn't the fastest beast around
    if (convertSVNIDToGitID($oldValue, $lookupTable, $nrHashCharacters) || convertSVNIDToGitID($newValue, $lookupTable, $nrHashCharacters))
    {   
        $query = "UPDATE ticket_change SET oldvalue='$oldValue', newvalue='$newValue' WHERE ticket = '${row['ticket']}' AND time = '${row['time']}' AND author='${row['author']}' AND field='${row['field']}'";
        if (!$db->exec($query))
        {
            echo "Query failed: " . $query . "\n";
        }       
        
        echo "Updated ticket_change $i\n";
    }
}

echo "Converting table 'ticket'...\n";

// Convert table 'ticket'

$i = 1;

$result = $db->query('SELECT * FROM ticket');
while ($row = $result->fetchArray())
{
    $description = $db->escapeString($row['description']);
    if (convertSVNIDToGitID($description, $lookupTable, $nrHashCharacters))
    {   
        $query = "UPDATE ticket SET description='$description' WHERE id = " . $row['id'];
        $db->exec($query);
        
        echo "Updated ticket $i\n";
    }
}

// Done :)
echo "Done!\n";
?> 
"""