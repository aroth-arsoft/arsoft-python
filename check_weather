#!/usr/bin/python
import os,sys
import urllib2
import xml.etree.ElementTree as ET

from arsoft.nagios import NagiosPlugin, OK, WARNING, CRITICAL, UNKNOWN

## Create the plugin option
np = NagiosPlugin()
np.add_arg('s', 'station', 'station id')

## This starts the actual plugin activation
np.activate()

np.add_value('temp_c', 'temperature in celsius', 'temperature in celsius', units='degree', has_argument=False, value=0)
np.add_value('temp_f', 'temperature in fahrenheit', 'temperature in fahrenheit', units='degree', has_argument=False, value=0)

np.add_value('wind_degrees', 'wind direction in degree', 'wind direction in degree', units='degree', has_argument=False, value=0)
np.add_value('wind_mph', 'wind speed', 'wind speed', units='mph', has_argument=False, value=0)
np.add_value('wind_gust_mph', 'wind gust speed', 'wind gust speed', units='mph', has_argument=False, value=0)

np.add_value('pressure_mb', 'air pressure', 'air pressure', units='mbar', has_argument=False, value=0)
np.add_value('dewpoint_c', 'dewpoint temperature in celsius', 'dewpoint temperature in celsius', units='degree', has_argument=False, value=0)
np.add_value('dewpoint_f', 'dewpoint temperature in fahrenheit', 'dewpoint temperature in fahrenheit', units='degree', has_argument=False, value=0)

np.add_value('precip_1hr', 'precipitation in last hour', 'precipitation in last hour', units='cm', has_argument=False, value=0)
np.add_value('precip_today', 'precipitation today', 'precipitation today', units='cm', has_argument=False, value=0)

station_id = np['station']
current_observation_url='http://api.wunderground.com/weatherstation/WXCurrentObXML.asp?ID=' + station_id

response = urllib2.urlopen(current_observation_url)
current_observation = response.read()

def _get_node_float(root, name, default=0):
    node = root.find(name)
    if node is not None:
        if node.text is not None:
            try:
                ret = float(node.text)
            except ValueError:
                ret = default
        else:
            ret = default
    else:
        ret = default
    return ret

def _get_node_str(root, name, default=''):
    node = root.find(name)
    if node is not None:
        if node.text is not None:
            ret = node.text
        else:
            ret = default
    else:
        ret = default
    return ret

if current_observation:
    tree = ET.fromstring(current_observation)
    if tree is not None:
        location_node = tree.find('location')
        if location_node is not None:
            station_full_name = _get_node_str(location_node, 'full')
            if station_full_name is not None:
                station_full_name = station_full_name.strip()
                while station_full_name[-1] in ',.':
                    station_full_name = station_full_name[:-1]
        else:
            station_full_name = None
        if station_full_name is not None and len(station_full_name) != 0:
            np.set_value('temp_c', _get_node_float(tree, 'temp_c'))
            np.set_value('temp_f', _get_node_float(tree, 'temp_f'))
            
            np.set_value('wind_degrees', _get_node_float(tree, 'wind_degrees'))
            np.set_value('wind_mph', _get_node_float(tree, 'wind_mph'))
            np.set_value('wind_gust_mph', _get_node_float(tree, 'wind_gust_mph'))
            
            np.set_value('pressure_mb', _get_node_float(tree, 'pressure_mb'))
            np.set_value('dewpoint_c', _get_node_float(tree, 'dewpoint_c'))
            np.set_value('dewpoint_f', _get_node_float(tree, 'dewpoint_f'))
            
            np.set_value('precip_1hr', _get_node_float(tree, 'precip_1hr_metric'))
            np.set_value('precip_today', _get_node_float(tree, 'precip_today_metric'))
            
            (exit_code, exit_message) = np.check_values()
            if exit_code == OK:
                exit_message = '%s' % (station_full_name)
        else:
            exit_code = CRITICAL
            exit_message = 'invalid station id %s' % (station_id)
        np.nagios_exit(exit_code, exit_message)
    else:
        np.nagios_exit("CRITICAL", 'Unable to parse observeration data for station %s' % str(station_id))
else:
    np.nagios_exit("CRITICAL", 'Unable to get current observeration data for station %s from ' % str(station_id, current_observation_url))
