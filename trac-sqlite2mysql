#!/usr/bin/python

from __future__ import unicode_literals
import sys
import os
import argparse
import re
import sqlite3
import tempfile
import codecs
from arsoft.utils import rmtree, runcmdAndGetData
from arsoft.trac.admin import TracAdmin

class trac_sqlite2mysql(object):
    
    def __init__(self):
        self._verbose = False
        self._db = None
        self._db_dump = ''
        self._db_struct = ''
        self._dbfile = None
        self._mysql_server = 'localhost'
        self._mysql_user = 'root'
        self._mysql_password = 'root'
        self._trac_components = None
        self._trac_plugins = None

    def _cleanup_sql(self, sql_sqlite):
        # Strip all CREATE/COMMIT/BEGIN TRANSACTION/PRAGMA statements
        sql_sqlite = re.sub(r'(CREATE (TABLE|INDEX)[^;]*|COMMIT|BEGIN TRANSACTION|PRAGMA[^;]*);', '', sql_sqlite)
        # Use backticks (`) for table names
        sql_sqlite = re.sub(r'INSERT INTO "([^"]+)"', lambda m: 'INSERT INTO `%s`' % m.groups(1), sql_sqlite)
        # Change report SQLs: CAST(p.value AS int) -> CAST(p.value AS signed)
        sql_sqlite = sql_sqlite.replace('CAST(p.value AS int)', 'CAST(p.value AS signed)')
        # Sometimes you need to deal with those backslashes..
        sql_sqlite = sql_sqlite.replace("\\''", "\\'")
        return sql_sqlite

    def _run_mysql_query(self, query):
        (sts, stdoutdata, stderrdata) = runcmdAndGetData('mysql', ['--host=' + self._mysql_server, '--user=' + self._mysql_user, '--password=' + self._mysql_password, '-e', query ], verbose=self._verbose)
        if sts == 0:
            return True
        else:
            print(stderrdata)
            return False

    def _run_trac_admin(self, trac_directory, args):
        cmd_args = [trac_directory]
        cmd_args.extend(args)
        (sts, stdoutdata, stderrdata) = runcmdAndGetData('trac-admin', cmd_args, verbose=self._verbose)
        if sts == 0:
            return True
        else:
            print(stderrdata)
            return False

    def _get_mysql_database_structure(self, repository_path=None, repository_type='svn'):
        ret = False
        tmp_trac_dir = tempfile.mkdtemp()
        dbname = 'trac_sqlite2mysql'
        dbuser = 'sqlite2mysql'
        dbpassword = 'trac_sqlite2mysql'
        query = "DROP DATABASE IF EXISTS " + dbname + "; CREATE DATABASE " + dbname + " DEFAULT CHARACTER SET utf8 COLLATE utf8_bin;"
        if self._run_mysql_query(query):
            query = "GRANT ALL ON " + dbname + ".* TO '" + dbuser + "'@'%' IDENTIFIED BY '" + dbpassword + "';"
            if self._run_mysql_query(query):
                tmp_trac_database = 'mysql://' + dbuser + ':' + dbpassword + '@' + self._mysql_server + '/' + dbname
                trac = TracAdmin(tmp_trac_dir, verbose=self._verbose)
                if trac.initenv(dbname, tmp_trac_database, repository_path=repository_path, repository_type=repository_type):
                    trac.set_logging('trac.log')
                    if self._trac_plugins is not None:
                        for plugin in self._trac_plugins:
                            print('trac enable plugin ' + plugin)
                            trac.enable_plugin(plugin)
                    if self._trac_components is not None:
                        if self._verbose:
                            for (c, v) in self._trac_components:
                                print('activate trac component ' + c)
                        trac.set_configured_components(self._trac_components)
                    if trac.save_config():
                        print('trac configuration saved.')
                    else:
                        print('failed to save trac configuration. error ' + trac.last_error)
                    if trac.upgrade():
                        print('trac database upgrade.')
                        (sts, stdoutdata, stderrdata) = runcmdAndGetData('mysqldump', ['--host=' + self._mysql_server, '--user=' + self._mysql_user, '--password=' + self._mysql_password, '--no-data', dbname ], verbose=self._verbose)
                        if sts == 0:
                            print('dump successful.')
                            self._db_struct = stdoutdata
                            ret = True
                        else:
                            print('mysql dump database failed. ' + stderrdata)
                    else:
                        print('trac database upgrade failed: ' + trac.last_error)
                else:
                    print('Failed to initialize temporary trac environment. ' + trac.last_error)
            query = "DROP DATABASE " + dbname + ";"
            self._run_mysql_query(query)
        else:
            print('create mysql database failed')
        rmtree(tmp_trac_dir)
        return ret

    def _dump_db(self, dbfile, cleanup_sql=True):
        self._db_data = ''
    
        cmd_args = [dbfile, '.dump']
        (sts, stdoutdata, stderrdata) = runcmdAndGetData('sqlite3', cmd_args, verbose=self._verbose)
        if sts == 0:
            stdoutdata = stdoutdata.decode('utf-8')
            if cleanup_sql:
                stdoutdata = self._cleanup_sql(stdoutdata)
            self._db_data = stdoutdata
            ret = True
        else:
            print(stderrdata)
            ret = False
        return ret

    def _write_sql_file(self, outfile):
        try:
            f = codecs.open(outfile, 'w', 'utf-8')
            f.write('SET autocommit=0;\n')
            f.write(self._db_struct)
            f.write(self._db_data)
            f.write('COMMIT;\n')
            f.close()
            ret = True
        except IOError as e:
            print(e)
            ret = False
        return ret
        
    def _import_sql_file_to_database(self, sqlfile, database_name):
        query = "DROP DATABASE IF EXISTS " + database_name + "; CREATE DATABASE " + database_name + " DEFAULT CHARACTER SET utf8 COLLATE utf8_bin;"
        if self._run_mysql_query(query):
            try:
                sqlfile = codecs.open(sqlfile, 'r', 'utf-8')
            except IOError as e:
                print(e)
                sqlfile = None
            if sqlfile:
                (sts, stdoutdata, stderrdata) = runcmdAndGetData('mysql', ['--host=' + self._mysql_server, '--user=' + self._mysql_user, '--password=' + self._mysql_password, database_name ], stdin=sqlfile, verbose=self._verbose)
                if sts == 0:
                    ret = True
                else:
                    print(stderrdata)
                    ret = False
            else:
                ret = False
        else:
            ret = False
        return ret

    def _load_tracenv(self, tracenv):
        trac = TracAdmin(tracenv)
        if trac.database_type != 'sqlite':
            print('This script is designed to convert SQLite3 database only.')
            ret = False
        else:
            self._trac_components = trac.configured_components
            self._dbfile = trac.database_file
            ret = True
        return ret

    def main(self, argv=None):
        if argv is None:
            argv = sys.argv
            
        #=============================================================================================
        # process command line
        #=============================================================================================
        parser = argparse.ArgumentParser(description='converts the trac database from SQLite3 to MySQL')
        parser.add_argument('tracenv', help='trac environment', metavar='tracenv')
        parser.add_argument('outfile', help='output SQL file', nargs='?', metavar='sqlfile')
        parser.add_argument('dbfile', help='trac database file', nargs='?', metavar='dbfile')
        parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='enable verbose output of this script.')
        parser.add_argument('-S', dest='mysql_server', default='localhost', help='name of the MySQL server.')
        parser.add_argument('-u', dest='mysql_user', default='root', help='username to access the MySQL server.')
        parser.add_argument('-p', dest='mysql_password', default='', help='password to access the MySQL server.')
        parser.add_argument('-d', '--database', dest='mysql_database', default='', nargs='?', help='name of new database on the MySQL server.')
        parser.add_argument('--plugins', dest='trac_plugins', nargs='*', help='name of new database on the MySQL server.')
        #parser.add_argument('gitrepo', help='GIT repository', metavar='gitrepo')

        args = parser.parse_args()
        
        self._verbose = args.verbose
        self._mysql_server = args.mysql_server
        self._mysql_user = args.mysql_user
        self._mysql_password = args.mysql_password
        self._dbfile = args.dbfile

        if args.trac_plugins:
            plugins = []
            for p in args.trac_plugins:
                plugins.extend(p.split(','))
            self._trac_plugins = plugins
        else:
            self._trac_plugins = None

        if not self._load_tracenv(args.tracenv):
            return 1

        ret = self._get_mysql_database_structure()
        if ret:
            ret = self._dump_db(self._dbfile)
            if ret:
                if args.outfile:
                    output_sqlfile = args.outfile
                else:
                    output_sqlfile = tempfile.mktemp()
            
                self._write_sql_file(output_sqlfile)

                if args.mysql_database:
                    ret = self._import_sql_file_to_database(output_sqlfile, args.mysql_database)
                    if ret:
                        print('import converted database to mysql successful.')
        
                if not args.outfile:
                    # remove temp sql file
                    os.remove(output_sqlfile)

        return 0 if ret else 1
        
if __name__ == "__main__":
    app =  trac_sqlite2mysql()
    sys.exit(app.main())
