#!/usr/bin/python
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; mixedindent off; indent-mode python;

import sys
import argparse
import ldap
import ldap.modlist as modlist

from arsoft.ldap import *
from arsoft.timestamp import parse_date, parse_timedelta, format_timedelta, UTC
from datetime import datetime, timedelta, tzinfo
import time

class heimdal_password_expire:
    def __init__(self):
        self._verbose = False
        self._uri = None
        self._ldapbase = None
        self._username = None
        self._password = None
        self._saslmech = None
        self._cxn = None

    def connect(self, uri, username, password, saslmech):
        self._cxn = LdapConnection(uri, username, password, saslmech)
        return self._cxn.connect()

    def close(self):
        self._cxn.close()
        
    def _search( self, searchBase, searchFilter, attrsFilter, scope=ldap.SCOPE_ONELEVEL):
        return self._cxn.search(searchBase, searchFilter, attrsFilter, scope)

    def run(self):
        
        now = datetime.utcnow().replace(tzinfo=UTC)
        
        searchBase = self._base
        searchFilter = '(&(objectClass=krb5KDCEntry)(krb5PasswordEnd=*))'
        attrsFilter = ['uid', 'krb5PrincipalName','krb5PasswordEnd', 'mail']

        result_set = self._search(searchBase, searchFilter, attrsFilter, ldap.SCOPE_SUBTREE)
        if result_set is not None:
            for rec in result_set:
                (dn, values) = rec[0]
                uid = values['uid'][0]
                princ = values['krb5PrincipalName'][0]
                if 'krb5PasswordEnd' in values:
                    pwend = parse_date(values['krb5PasswordEnd'][0])
                else:
                    pwend = None
                if 'mail' in values:
                    mail = values['mail'][0]
                else:
                    mail = None

                if pwend is not None:
                    diff = pwend - now
                    if diff < self._critical:
                        self._send_message(uid, mail, expireat=pwend, timeleft=diff, critical=True)
                    elif diff < self._warning:
                        self._send_message(uid, mail, expireat=pwend, timeleft=diff, warning=True)
                    else:
                        print(uid + ' (' + princ + ') ' + str(pwend))
                        pass
                
                
    def _send_message(self, uid, mail, expireat, timeleft, critical=False, warning=False):
        if mail:
            print('_send_message for ' + uid + ' to ' + mail)
            print('Your password expires in ' + format_timedelta(timeleft) + '.')


    def main(self):
        #=============================================================================================
        # process command line
        #=============================================================================================
        parser = argparse.ArgumentParser(description='shows information about expiring password in the Heimdal Kerberos DIT.')
        parser.add_argument('--verbose', dest='verbose', action='store_true', help='enable verbose output of this script.')
        parser.add_argument('--uri', dest='uri', type=str, help='specify the address of the ldap server.')
        parser.add_argument('-l', '--localhost', dest='localhost', action='store_true', help='connect to local OpenLDAP server.')
        parser.add_argument('--username', dest='username', type=str, help='specify the user to access the ldap directory.')
        parser.add_argument('--password', dest='password', type=str, help='password for the ldap user.')
        parser.add_argument('--base', dest='base', type=str, help='specify the base dn for ldap search operation.')
        parser.add_argument('-Y', '--saslmech', dest='saslmech', type=str, default='simple', help='specify mechanism used to SASL authentication.')
        parser.add_argument('--warn', dest='warning', type=str, default='30d', help='specify the time when a warning message will be sent.')
        parser.add_argument('--crit', dest='critical', type=str, default='8d', help='specify the time when a critical message will be sent.')

        args = parser.parse_args()

        self._verbose = args.verbose
        self._saslmech = args.saslmech
        
        self._warning = parse_timedelta(args.warning)
        self._critical = parse_timedelta(args.critical)

        if args.uri is not None:
            if args.uri.startswith('ldap://') or \
                args.uri.startswith('ldaps://') or \
                args.uri.startswith('ldapi://'):
                self._uri = args.uri
            else:
                if args.uri[0] == '/':
                    self._uri = "ldapi://" + str(args.uri)
                else:
                    self._uri = "ldap://" + str(args.uri)
        else:
            if args.localhost == True:
                self._uri = "ldap://localhost"
            else:
                self._uri = ldap.get_option(ldap.OPT_URI)
                if self._uri is None:
                    ldapserver  = ldap.get_option(ldap.OPT_SERVER)
                    if ldapserver is None:
                        self._uri = "ldap://localhost"
                    else:
                        self._uri = "ldap://" + str(ldapserver)

        if args.base is None or len(args.base) == 0:
            self._base = ldap.get_option(ldap.OPT_DEFBASE)
        else:
            self._base = args.base
        
        if self.connect(self._uri, self._username, self._password, self._saslmech):
            ret = self.run()
            self.close()

        return ret

if __name__ == "__main__":
    app =  heimdal_password_expire()
    sys.exit(app.main())
