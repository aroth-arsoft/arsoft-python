#!/usr/bin/python
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; mixedindent off; indent-mode python;

import sys
import argparse
import ldap
import ldap.modlist as modlist
import socket

from arsoft.ldap import *
from arsoft.timestamp import parse_date, parse_timedelta, format_timedelta, UTC
from datetime import datetime, timedelta, tzinfo
import time
from arsoft.mail.mail import mail
from arsoft.mail.sendmail import sendmail

class heimdal_password_expire:
    BODYTEXT = """You %s receive this message because your password for %s expires in %s.

You have to change your password within the specified time frame. If you do not change your password in the given time, 
you will not be able to use the services.

To change your password either use the kpasswd tool from your operating system or use the following web service with your browser:

%s

Your Administrator
"""
    BODYTEXT_FATAL = """You %s receive this message because your password for %s expired at %s.

You will not be able to use any services until you change your password.

To change your password either use the kpasswd tool from your operating system or use the following web service with your browser:

%s

Your Administrator
"""

    SUBJECT_FATAL = 'FATAL: %s your password has expired %s.'
    SUBJECT_CRITICAL = 'CRITICAL: %s your password expires in %s.'
    SUBJECT_WARNING = 'WARNING: %s your password expires in %s.'
    SUBJECT_REMINDER = 'REMINDER: %s your password expires in %s.'
    
    def __init__(self):
        self._verbose = False
        self._uri = None
        self._ldapbase = None
        self._username = None
        self._password = None
        self._saslmech = None
        self._cxn = None
        self._fqdn = socket.getfqdn()

    def connect(self, uri, username, password, saslmech):
        if self._verbose:
            print('connect to ' + uri)

        self._cxn = LdapConnection(uri, username, password, saslmech)
        return self._cxn.connect()

    def close(self):
        self._cxn.close()
        
    def _search( self, searchBase, searchFilter, attrsFilter, scope=ldap.SCOPE_ONELEVEL):
        return self._cxn.search(searchBase, searchFilter, attrsFilter, scope)

    def run(self):
        
        now = datetime.utcnow().replace(tzinfo=UTC)
        
        searchBase = self._base
        searchFilter = '(&(objectClass=krb5KDCEntry)(krb5PasswordEnd=*))'
        attrsFilter = ['uid', 'krb5PrincipalName','krb5PasswordEnd', 'mail']

        result_set = self._search(searchBase, searchFilter, attrsFilter, ldap.SCOPE_SUBTREE)
        if result_set is not None:
            for rec in result_set:
                (dn, values) = rec[0]
                uid = values['uid'][0]
                princ = values['krb5PrincipalName'][0]
                if 'krb5PasswordEnd' in values:
                    pwend = parse_date(values['krb5PasswordEnd'][0])
                else:
                    pwend = None
                if 'mail' in values:
                    mailaddr = values['mail'][0]
                else:
                    mailaddr = None

                if self._verbose:
                    print(uid + ' (' + princ + ') ' + str(pwend))
                if pwend is not None:
                    diff = pwend - now
                    if diff < timedelta(0):
                        self._send_message(uid, mailaddr, expireat=pwend, timeleft=diff, fatal=True)
                    elif diff < self._critical:
                        self._send_message(uid, mailaddr, expireat=pwend, timeleft=diff, critical=True)
                    elif diff < self._warning:
                        self._send_message(uid, mailaddr, expireat=pwend, timeleft=diff, warning=True)
                    else:
                        self._send_message(uid, mailaddr, expireat=pwend, timeleft=diff)
        else:
            print('Nothing found.')
                
    def _send_message(self, uid, mailaddr, expireat, timeleft, critical=False, warning=False, fatal=False):
        timeleft_text = format_timedelta(timeleft)
        if fatal:
            bodytext = self.BODYTEXT_FATAL % (uid, self._realm, str(expireat), self._weburl)
        else:
            bodytext = self.BODYTEXT % (uid, self._realm, timeleft_text, self._weburl)
        if fatal:
            subject = self.SUBJECT_FATAL % (uid, str(expireat))
        elif critical:
            subject = self.SUBJECT_CRITICAL % (uid, timeleft_text)
        elif warning:
            subject = self.SUBJECT_WARNING % (uid, timeleft_text)
        else:
            subject = self.SUBJECT_REMINDER % (uid, timeleft_text)

        if not mailaddr:
            # send message to root to always get a message out to someone
            mailaddr = 'root'

        msg = mail(sender=self._sender, to=[mailaddr], subject=subject, bodytext=bodytext)
        sendmail(msg)

    def main(self):
        #=============================================================================================
        # process command line
        #=============================================================================================
        parser = argparse.ArgumentParser(description='shows information about expiring password in the Heimdal Kerberos DIT.')
        parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='enable verbose output of this script.')
        parser.add_argument('--uri', dest='uri', type=str, help='specify the address of the ldap server.')
        parser.add_argument('-l', '--localhost', dest='localhost', action='store_true', help='connect to local OpenLDAP server.')
        parser.add_argument('--username', dest='username', type=str, help='specify the user to access the ldap directory.')
        parser.add_argument('--password', dest='password', type=str, help='password for the ldap user.')
        parser.add_argument('--base', dest='base', type=str, help='specify the base dn for ldap search operation.')
        parser.add_argument('-Y', '--saslmech', dest='saslmech', type=str, default='simple', help='specify mechanism used to SASL authentication.')
        parser.add_argument('--warn', dest='warning', type=str, default='30d', help='specify the time when a warning message will be sent.')
        parser.add_argument('--crit', dest='critical', type=str, default='8d', help='specify the time when a critical message will be sent.')
        parser.add_argument('--sender', dest='sender', type=str, default='root', help='specify the sender mail address.')
        parser.add_argument('--realm', dest='realm', type=str, default='Kerberos on ' + self._fqdn, help='specify the name of the service in the message.')
        parser.add_argument('--weburl', dest='weburl', type=str, default='https://' + self._fqdn + '/changepw', help='specify the name of the service in the message.')

        args = parser.parse_args()

        self._verbose = args.verbose
        self._saslmech = args.saslmech

        self._sender = args.sender
        self._realm = args.realm
        self._weburl = args.weburl
        self._warning = parse_timedelta(args.warning)
        self._critical = parse_timedelta(args.critical)

        if args.uri is not None:
            if args.uri.startswith('ldap://') or \
                args.uri.startswith('ldaps://') or \
                args.uri.startswith('ldapi://'):
                self._uri = args.uri
            else:
                if args.uri[0] == '/':
                    self._uri = "ldapi://" + str(args.uri)
                else:
                    self._uri = "ldap://" + str(args.uri)
        else:
            if args.localhost == True:
                self._uri = "ldap://localhost"
            else:
                self._uri = ldap.get_option(ldap.OPT_URI)
                if self._uri is None:
                    ldapserver  = ldap.get_option(ldap.OPT_SERVER)
                    if ldapserver is None:
                        self._uri = "ldap://localhost"
                    else:
                        self._uri = "ldap://" + str(ldapserver)

        if args.base is None or len(args.base) == 0:
            self._base = ldap.get_option(ldap.OPT_DEFBASE)
        else:
            self._base = args.base
            
        if self.connect(self._uri, self._username, self._password, self._saslmech):
            ret = self.run()
            self.close()
        else:
            print('Failed to connect to ' + self._uri)
            ret = 1

        return ret

if __name__ == "__main__":
    app =  heimdal_password_expire()
    sys.exit(app.main())
