#!/usr/bin/python
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; mixedindent off; indent-mode python;

import sys
import os
import argparse
from arsoft.trac.admin import TracAdmin
from arsoft.inifile import IniFile

class trac_manage(object):

    def __init__(self):
        self._last_error = None
        self._trac = None

    def _load_tracenv(self, tracenv):
        self._trac = TracAdmin(tracenv)
        if self._trac.valid:
            ret = True
        else:
            self._last_error = self._trac.last_error
            ret = False
        return ret
    
    def _enable_svn(self):
        self._trac.enable_component('tracopt.versioncontrol.svn.svn_fs.*')
        self._trac.enable_component('tracopt.versioncontrol.svn.svn_prop.*')
        self._trac.save_config()
        self._trac.reinitialize()
        
    def _enable_git(self):
        self._trac.enable_component('tracopt.versioncontrol.git.git_fs.*')
        self._trac.save_config()
        self._trac.reinitialize()

    def main(self, argv=None):
        if argv is None:
            argv = sys.argv

        #=============================================================================================
        # process command line
        #=============================================================================================
        parser = argparse.ArgumentParser(description='manage a Trac instance')
        parser.add_argument('tracenv', help='trac environment', metavar='tracenv')
        parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='enable verbose output of this script.')
        parser.add_argument('--list-repos', dest='action_list_repos', action='store_true', help='list all configured repositories.')
        parser.add_argument('--config-repos', nargs=1, dest='action_config_repos', help='configures the repositories from the given file.')
        parser.add_argument('--sync-repos', nargs='*', dest='action_sync_repos', help='synchronize all configured repositories or the specified ones.')
        parser.add_argument('--resync-repos', nargs='*', dest='action_resync_repos', help='re-synchronize all configured repositories or the specified ones.')

        args = parser.parse_args()
        self._verbose = args.verbose

        if not self._load_tracenv(args.tracenv):
            sys.stderr.write('Failed to load trac environment ' + args.tracenv + ', error ' + str(self._last_error) + '\n')
            return 1

        if args.action_list_repos:
            for (reponame, repoprops) in self._trac.repositories:
                repodir = repoprops['dir'] if 'dir' in repoprops else 'unknown'
                repotype = repoprops['type'] if 'type' in repoprops else 'unknown'
                repoalias = repoprops['alias'] if 'alias' in repoprops else None
                if reponame == '':
                    reponame = '(default)'
                if repoalias:
                    print('%s: alias for %s' %(reponame, repoalias))
                else:
                    print('%s: %s (%s)' %(reponame, repodir, repotype))
            ret = True
        elif args.action_config_repos:
            inifile = IniFile(commentPrefix='#', keyValueSeperator='=', disabled_values=False)
            if not inifile.open(args.action_config_repos[0]):
                print('Failed to open %s' % (args.action_config_repos[0]))
                ret = False
            else:
                supported_repository_types = self._trac.supported_repository_types
                repos_to_remove = set()
                for (reponame, repoprops) in self._trac.repositories:
                    repos_to_remove.add(reponame)

                result = True
                for section in inifile.sections:
                    reponame = inifile.get(section, 'name', None)
                    repopath = inifile.get(section, 'path', None)
                    repotype = inifile.get(section, 'type', None)
                    repoalias = inifile.get(section, 'alias', None)
                    repodesc = inifile.get(section, 'description', None)
                    
                    if reponame is None:
                        continue
                    elif reponame == '(default)':
                        reponame = ''

                    if repoalias is not None:
                        pass
                    elif repopath is None or repotype is None:
                        continue

                    if repoalias:
                        result = self._trac.add_repository_alias(reponame, repoalias)
                        if not result:
                            print('Failed to modify repository %s, error %s' % (reponame, self._trac.last_error))
                    else:
                        if repotype not in supported_repository_types:
                            if repotype == 'svn':
                                self._enable_svn()
                                supported_repository_types = self._trac.supported_repository_types
                            elif repotype == 'git':
                                self._enable_git()
                                supported_repository_types = self._trac.supported_repository_types
                            else:
                                print('Repository type %s of repository %s is not supported (only %s is supported).' % 
                                    (repotype, reponame, ','.join(supported_repository_types)))
                        changes = {}
                        if reponame in repos_to_remove:
                            # repo already exists, so check if we need to modify it
                            repos_to_remove.remove(reponame)
                            changes['description'] = repodesc
                            changes['type'] = repotype
                            changes['dir'] = repopath
                            result = True
                        else:
                            result = self._trac.add_repository(reponame, repopath, repotype)
                        if result:
                            print('modify repository %s changes=%s' % (reponame, str(changes)))
                            result = self._trac.modify_repository(reponame, changes)
                            if not result:
                                print('Failed to modify repository %s, error %s' % (reponame, self._trac.last_error))
                        else:
                            print('Failed to add repository %s, error %s' % (reponame, self._trac.last_error))
                    if not result:
                        break

                inifile.close()
                
                if result:
                    for reponame in repos_to_remove:
                        print('remove repository %s' % (reponame))
                        if not self._trac.remove_repository(reponame):
                            print('Failed to remove repository %s, error %s' % (reponame, self._trac.last_error))
                            result = False
                            break
                ret = True if result else False
        elif args.action_sync_repos is not None or args.action_resync_repos is not None:
            resync = True if args.action_resync_repos is not None else False
            action_args = args.action_resync_repos if resync else args.action_sync_repos

            selected_repos = set()
            if len(action_args) == 0:
                # sync all
                for (reponame, repoprops) in self._trac.repositories:
                    selected_repos.add(reponame)
            else:
                for reponame in action_args:
                    selected_repos.add(reponame)
            ret = True
            for reponame in selected_repos:
                if not self._trac.sync_repository(reponame, clean=True if resync else False):
                    print('Failed to %s repository %s, error %s' % ('re-sync' if resync else 'sync', reponame, self._trac.last_error))
                    ret = False
        else:
            print('No action specified.')
            ret = False

        return 0 if ret else 1
        
if __name__ == "__main__":
    app =  trac_manage()
    sys.exit(app.main())

