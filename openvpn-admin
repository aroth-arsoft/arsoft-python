#!/usr/bin/python
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; mixedindent off; indent-mode python;

import os
import os.path
import argparse
import sys
import datetime
import tempfile
import arsoft.openvpn
import arsoft.crypto
import arsoft.mail
import shutil
from arsoft.timestamp import UTC

__version__ = '1.0'

class OpenVPNAdmin(object):
    def __init__(self):
        self.verbose = False
        self._config = None

    def version(self):
        print('Version: %s' % str(__version__))
        return 0
    
    def _get_config(self):
        if self._config is None:
            self._config = arsoft.openvpn.Config()
            
    def _save_stdin_to_file(self):
        self._stdin_file = tempfile.NamedTemporaryFile()
        buf_length = 4096
        while 1:
            buf = sys.stdin.read(buf_length)
            if not buf:
                break
            self._stdin_file.write(buf)
        self._stdin_file.seek(0)

    def _print_cert(self, prefix, cert):
        if cert:
            cert_file = str(cert.filename)
            if os.path.isfile(cert_file):
                num_certs = len(cert.certificates)
                if num_certs == 0:
                    print('  %s: %s (%s)' % (prefix, cert_file, cert.last_error))
                else:
                    now = datetime.datetime.utcnow().replace(tzinfo=UTC)
                    min_expire_in = datetime.timedelta(days=100*365)
                    min_expire_cert = None
                    for cert in cert.certificates:
                        expire_in = cert.expire_date - now
                        if expire_in < min_expire_in:
                            min_expire_in = expire_in
                            min_expire_cert = cert

                    if min_expire_cert:
                        expire_date = str(min_expire_cert.expire_date) + ' in ' + str(min_expire_in)
                    else:
                        expire_date = 'unavailable'
                    print('  %s: %s (expires %s)' % (prefix, cert_file, expire_date))
            else:
                print('  %s: %s (does not exist)' % (prefix, cert_file))
        else:
            print('  %s: none' % (prefix))

    def action_status(self, selected_vpns):
        self._get_config()
        all_vpn_names = self._config.names
        if len(selected_vpns) == 0:
            selected_vpns = all_vpn_names
            ret = 0
        else:
            all_vpns_found = True
            for vpnname in selected_vpns:
                if vpnname not in all_vpn_names:
                    sys.stderr.write('VPN %s not configured.\n' % (vpnname))
                    all_vpns_found = False
            ret = 0 if all_vpns_found else 2
        
        if ret == 0:
            if len(selected_vpns) == 0:
                print('No VPNs configured.')
            else:
                for vpnname in selected_vpns:
                    config_file = arsoft.openvpn.ConfigFile(config_name=vpnname)
                    if not config_file.valid:
                        sys.stderr.write('Failed to open configuration for VPN %s; error %s\n' % (vpnname, config_file.last_error))
                        ret += 1
                    else:
                        is_running = self._config.is_running(vpnname)
                        status_file = arsoft.openvpn.StatusFile(config_file=config_file)
                        print('%s (%s):' % (vpnname, 'server' if config_file.server else 'client') )

                        print('  Running: %s' % is_running)
                        print('  State: %s' % status_file.state.long_state)
                        print('  Last updated: %s' % status_file.last_update)
                        self._print_cert('Certificate file', config_file.cert_file)
                        print('  Key file: %s' % config_file.key_file)
                        self._print_cert('CA file', config_file.ca_file)
                        self._print_cert('CRL file', config_file.crl_file)
                        print('  DH file: %s' % config_file.dh_file)
                        
                        if config_file.server:
                            print('  Configured clients:')
                            if config_file.client_config_files:
                                for (clientname, ccdfile) in config_file.client_config_files.iteritems():
                                    
                                    if status_file.connected_clients:
                                        client_is_connected = True if clientname in status_file.connected_clients else False
                                    else:
                                        client_is_connected = False
                                    print('    %s (%s; %s)' % (ccdfile.name, 'Connected' if client_is_connected else 'Not connected', ccdfile.ostype))
                                    if len(ccdfile.routes):
                                        print('    Routes:')
                                        for (network, netmask) in ccdfile.routes:
                                            print('      %s/%s' % (network, netmask))
                                    if len(ccdfile.push_options):
                                        print('    Pushed options:')
                                        for (option, value) in ccdfile.push_options:
                                            print('      %s %s' % (option, value))
                            print('  Connected clients:')
                            if status_file.connected_clients:
                                for (clientname, clientinfo) in status_file.connected_clients.iteritems():
                                    print('    %s' % (clientinfo))
                        if len(config_file.routes):
                            print('    Routes:')
                            for (network, netmask) in ccdfile.routes:
                                print('      %s/%s' % (network, netmask))
                        if len(config_file.push_options):
                            print('    Pushed options:')
                            for (option, value) in ccdfile.push_options:
                                print('      %s %s' % (option, value))
                        if status_file.routing_table:
                            print('  Routing table:')
                            for (address, entry) in status_file.routing_table.iteritems():
                                print('    %s' % (entry))
                        if status_file.statistics:
                            print('  Statistics:')
                            for name in status_file.statistics:
                                print('    %s: %s' % (name, getattr(status_file.statistics, name)))
        return ret
    
    def action_zip_info(self, zipfile):
        ret = 0
        if os.path.exists(zipfile):
            zipcfg = arsoft.openvpn.ZippedConfigFile(zipfile)
            if zipcfg.valid:
                print('Config file: %s' % (zipcfg.config_file.filename))
                self._print_cert('Certificate file', zipcfg.config_file.cert_file)
                print('  Key file: %s' % zipcfg.config_file.key_file)
                self._print_cert('CA file', zipcfg.config_file.ca_file)
                self._print_cert('CRL file', zipcfg.config_file.crl_file)
                print('  DH file: %s' % zipcfg.config_file.dh_file)
                
                print('Files in %s:' % (zipfile))
                for f in iter(zipcfg):
                    print('  ' + f.name)
                ret = 0
            else:
                sys.stderr.write('ZIP file %s does not contain a valid VPN configuration.\n' % (zipfile))
                ret = 1
        else:
            sys.stderr.write('ZIP file %s does not exist.\n' % (zipfile))
            ret = 2
        return ret

    def action_zip_compress(self, selected_vpns, output_directory):
        self._get_config()
        all_vpn_names = self._config.names
        if len(selected_vpns) == 0:
            selected_vpns = all_vpn_names
            ret = 0
        else:
            all_vpns_found = True
            for vpnname in selected_vpns:
                if vpnname not in all_vpn_names:
                    sys.stderr.write('VPN %s not configured.\n' % (vpnname))
                    all_vpns_found = False
            ret = 0 if all_vpns_found else 2
        
        if ret == 0:
            if len(selected_vpns) == 0:
                print('No VPNs configured.')
            else:
                list_of_changed_zip_files = []
                ret = 0
                for vpnname in selected_vpns:
                    config_file = arsoft.openvpn.ConfigFile(config_name=vpnname)
                    if config_file.valid:
                        output_zip_file = os.path.join(output_directory, config_file.suggested_zip_filename)
                        outfile_obj = tempfile.NamedTemporaryFile() if os.path.exists(output_zip_file) else None
                        zipcfg = arsoft.openvpn.ZippedConfigFile.create(config_file, outfile_obj if outfile_obj else output_zip_file)
                        zip_ok = True if zipcfg and zipcfg.last_error is None else False
                        
                        if zip_ok:
                            if outfile_obj:
                                if not zipcfg.compare(output_zip_file):
                                    # zip file has changed, so copy the temp file to the real output file
                                    shutil.copy2(outfile_obj.name, output_zip_file)
                                    list_of_changed_zip_files.append(zipcfg)
                            else:
                                # zip file does not exists until now, so it's changed
                                list_of_changed_zip_files.append(zipcfg)
                            print('Compressed %s to %s' % (vpnname, output_zip_file))
                            if config_file.server:
                                for (clientname, ccdfile) in config_file.client_config_files.iteritems():
                                    client_cfgfile = config_file.client_config_file(ccdfile)
                                    output_zip_file = os.path.join(output_directory, vpnname + '_' + client_cfgfile.suggested_zip_filename)
                                    zipcfg = arsoft.openvpn.ZippedConfigFile.create(client_cfgfile, output_zip_file)
                                    if zipcfg and zipcfg.last_error is None:
                                        print('Compressed %s/%s to %s' % (vpnname, clientname, output_zip_file))
                                    else:
                                        if zipcfg:
                                            sys.stderr.write('Failed to compress VPN %s/%s to %s. %s\n' % (vpnname, clientname, output_zip_file, zipcfg.last_error))
                                        else:
                                            sys.stderr.write('Failed to compress VPN %s/%s to %s (unspecified error).\n' % (vpnname, clientname, output_zip_file))
                        else:
                            if zipcfg:
                                sys.stderr.write('Failed to compress VPN %s to %s. %s\n' % (vpnname, output_zip_file, zipcfg.last_error))
                            else:
                                sys.stderr.write('Failed to compress VPN %s to %s (unspecified error).\n' % (vpnname, output_zip_file))
                    else:
                        sys.stderr.write('VPN %s not configured.\n' % (vpnname))
                        ret = 1
                for zipcfg in list_of_changed_zip_files:
                    print('Zip config %s changed' % (zipcfg))
        return ret
    
    def mail_config(self, zipcfg, recipient=None):

        cfgfile = zipcfg.config_file
        
        if recipient is None:
            recipient = cfgfile.mailnotify

        if recipient is None:
            return False

        mail_subject="OpenVPN configuration %s" % (cfgfile.name)
        mail_message_header="""Your OpenVPN configuration has changed. The attached configuration has
been automatically generated with the latest configuration.

The latest OpenVPN manuals are avialable at:
http://openvpn.net/index.php/open-source/documentation/manuals.html

"""

        mail_message_footer="""

Have a nice day,
   your administrator
"""
        if cfgfile.ostype == 'linux':
            mail_message_os = """
- extract the attached configuration to
  /etc/openvpn
- restart the OpenVPN service
  service openvpn restart $name
"""
        elif cfgfile.ostype == 'win' or cfgfile.ostype == 'windows':
            mail_message_os = """
Make sure you have installed the latest version of OpenVPN (Community Version).
http://openvpn.net/index.php/download/community-downloads.html

- Quit the OpenVPN GUI (click the system tray icon)
- Unzip the attached configuration to 
  C:\Program Files\OpenVPN\config
- Restart the OpenVPN GUI (with Administrator privileges)
- Right click the system tray icon and click Connect to initiate
  your VPN connection
"""
        elif cfgfile.ostype == 'macosx':
            mail_message_os = """
Make sure you have installed the latest version of Tunnelblick.
http://code.google.com/p/tunnelblick/

The wiki page 'Setting up Tunnelblick' provides the necessary
instructions to install or update your Tunnelblick configuration.
http://code.google.com/p/tunnelblick/wiki/cConfigT
"""
        elif cfgfile.ostype == 'android':
            mail_message_os = """
Please install the OpenVPN Settings App from Google Play and unzip the
attached configuration to 
/sdcard/openvpn/

OpenVPN Settings Website: http://code.google.com/p/android-openvpn-settings
Android OpenVPN How to: http://vpnblog.info/android-openvpn-strongvpn.html
"""
        else:
            mail_message_os = """
Your operating system %s is not handled (yet) on. 
Please check the OpenVPN documentation and/or your system documentation for how 
to use the provided configuration.
""" % (zipcfg.config_file.ostype)

        mail_message = mail_message_header + mail_message_os + mail_message_footer
        notification_mail = arsoft.mail.Mail(sender=None, to=[recipient], subject=mail_subject, bodytext=mail_message)
        notification_mail.add_attachment(zipcfg.filename)
        print(notification_mail)
        #arsoft.mail.sendmail(notification_mail)
        return True

    def action_install(self, filename, root_directory=None):
        ret = 0
        conf_file_ok = False
        file_ok = False
        zip_ok = False
        if filename == '-':
            self._save_stdin_to_file()
            filename = self._stdin_file.name
            file_ok = True
            zip_ok = True
        else:
            file_ok = os.path.exists(filename)
            if file_ok:
                zip_ok = arsoft.openvpn.ZippedConfigFile.is_zip_config_file(filename)
                if not zip_ok:
                    conf_file_ok = arsoft.openvpn.ConfigFile.is_config_file(filename)
        if file_ok:
            if zip_ok:
                zipcfg = arsoft.openvpn.ZippedConfigFile(filename)
                if zipcfg.install(root_directory=root_directory):
                    ret = 0
                else:
                    sys.stderr.write('Failed to install OpenVPN configuration from %s. Error %s\n' % (filename, zipcfg.last_error))
                    ret = 1
            elif conf_file_ok:
                print('use raw config file %s' % filename)
                ret = 0
            else:
                sys.stderr.write('Given file %s is neither a ZIP file nor a valid OpenVPN configuration.\n' % (filename))
                ret = 1
        else:
            sys.stderr.write('File %s does not exist.\n' % (filename))
            ret = 2
        return ret

    def action_zip_send(self, filename, recipient=None):
        ret = 0
        conf_file_ok = False
        file_ok = False
        zip_ok = False
        if filename == '-':
            self._save_stdin_to_file()
            filename = self._stdin_file.name
            file_ok = True
            zip_ok = True
        else:
            file_ok = os.path.exists(filename)
            if file_ok:
                zip_ok = arsoft.openvpn.ZippedConfigFile.is_zip_config_file(filename)
        if zip_ok:
            zipcfg = arsoft.openvpn.ZippedConfigFile(filename)
            if self.mail_config(zipcfg, recipient):
                ret = 0
            else:
                sys.stderr.write('Failed to send OpenVPN configuration from %s. Error %s\n' % (filename, zipcfg.last_error))
                ret = 1
        else:
            sys.stderr.write('Given file %s is not a ZIP file with valid OpenVPN configuration.\n' % (filename))
            ret = 1
        return ret

    def action_start(self, vpnname):
        cfgfile = arsoft.openvpn.ConfigFile(config_name=vpnname)
        if cfgfile.valid:
            if self._config.start(vpnname):
                print('Started %s' % vpnname)
                ret = 0
            else:
                sys.stderr.write('Failed to start VPN %s. %s\n' % (vpnname, self._config.last_error))
        else:
            sys.stderr.write('Failed to open configuration for VPN %s. %s\n' % (vpnname, cfgfile.last_error))
            ret = 2
        return ret

    def action_stop(self, vpnname):
        cfgfile = arsoft.openvpn.ConfigFile(config_name=vpnname)
        if cfgfile.valid:
            if self._config.stop(vpnname):
                print('Stopped %s' % vpnname)
                ret = 0
            else:
                sys.stderr.write('Failed to stop VPN %s. %s\n' % (vpnname, self._config.last_error))
        else:
            sys.stderr.write('Failed to open configuration for VPN %s. %s\n' % (vpnname, cfgfile.last_error))
            ret = 2
        return ret

    def action_restart(self, vpnname):
        cfgfile = arsoft.openvpn.ConfigFile(config_name=vpnname)
        if cfgfile.valid:
            if self._config.restart(vpnname):
                print('Restart %s' % vpnname)
                ret = 0
            else:
                sys.stderr.write('Failed to restart VPN %s. %s\n' % (vpnname, self._config.last_error))
        else:
            sys.stderr.write('Failed to open configuration for VPN %s. %s\n' % (vpnname, cfgfile.last_error))
            ret = 2
        return ret

    def action_reload(self, vpnname):
        cfgfile = arsoft.openvpn.ConfigFile(config_name=vpnname)
        if cfgfile.valid:
            if self._config.reload(vpnname):
                print('Reload %s' % vpnname)
                ret = 0
            else:
                sys.stderr.write('Failed to reload VPN %s. %s\n' % (vpnname, self._config.last_error))
        else:
            sys.stderr.write('Failed to open configuration for VPN %s. %s\n' % (vpnname, cfgfile.last_error))
            ret = 2
        return ret

    def main(self):
        #=============================================================================================
        # process command line
        #=============================================================================================
        parser = argparse.ArgumentParser(description='helper script to manage/configure a local OpenVPN installation.')
        parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='enable verbose output.')
        parser.add_argument('--version', dest='version', action='store_true', help='shows the version and exits.')
        parser.add_argument('--status', dest='action_status', metavar='VPNNAME', nargs='*', help='show the status of the configured VPNs')
        parser.add_argument('--zipinfo', dest='action_zip_info', metavar='ZIPFILE', help='shows information about the configuration in the given ZIP file.')
        parser.add_argument('--zipsend', dest='action_zip_send', metavar='ZIPFILE', help='send ZIP file to the administrator of the VPN.')
        parser.add_argument('--zip', dest='action_zip_compress', metavar='VPNNAME', nargs='*', help='generate ZIP files for all OpenVPN configurations in the given directory.')
        parser.add_argument('--root-directory', dest='root_directory', default='/', metavar='DIR', help='specifies the root directory for the configuration.')
        parser.add_argument('--output-directory', dest='output_directory', default='/tmp', metavar='DIR', help='specifies the output directory for the configuration.')
        parser.add_argument('--install', dest='action_install', metavar='CFGFILE', help='installs the given OpenVPN configuration (can be either a ZIP file or plain config)')
        parser.add_argument('--start', dest='action_start', metavar='VPNNAME', help='starts the specified VPN')
        parser.add_argument('--stop', dest='action_stop', metavar='VPNNAME', help='stops the specified VPN')
        parser.add_argument('--restart', dest='action_restart', metavar='VPNNAME', help='restart the specified VPN')
        parser.add_argument('--reload', dest='action_reload', metavar='VPNNAME', help='reload the configuration of the specified VPN')
        parser.add_argument('--recipient', dest='recipient', metavar='RECIPIENT', help='override the mail recipient of the VPN configuration.')

        args = parser.parse_args()
        self.verbose = args.verbose
        self.root_directory = args.root_directory
        self.output_directory = args.output_directory

        if args.version:
            return self.version()
        
        if args.action_status is not None:
            ret = self.action_status(args.action_status)
        elif args.action_zip_info is not None:
            ret = self.action_zip_info(args.action_zip_info)
        elif args.action_zip_send is not None:
            ret = self.action_zip_send(args.action_zip_send, args.recipient)
        elif args.action_zip_compress is not None:
            ret = self.action_zip_compress(args.action_zip_compress, output_directory=self.output_directory)
        elif args.action_install is not None:
            ret = self.action_install(args.action_install, root_directory=self.root_directory)
        elif args.action_start is not None:
            ret = self.action_start(args.action_start)
        elif args.action_stop is not None:
            ret = self.action_stop(args.action_stop)
        elif args.action_restart is not None:
            ret = self.action_restart(args.action_restart)
        elif args.action_reload is not None:
            ret = self.action_reload(args.action_reload)
        else:
            sys.stderr.write('No action selected.\n')
            ret = 1
        return ret

if __name__ == "__main__":
    app =  OpenVPNAdmin()
    sys.exit(app.main())
 
