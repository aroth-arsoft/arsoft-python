#!/usr/bin/python3
# -*- coding: utf-8 -*-
# kate: space-indent on; indent-width 4; mixedindent off; indent-mode python;

import os
import os.path
import argparse
import sys
import datetime
import tempfile
import arsoft.openvpn
import arsoft.crypto
import arsoft.mail
import arsoft.sshutils
import shutil
from arsoft.inifile import *
from arsoft.timestamp import UTC, format_timedelta
from arsoft.utils import enum

__version__ = '1.0'

class PrivateKeyPasswordFile(object):
    def __init__(self, filename):
        self._conf = IniFile(filename=filename, commentPrefix='#', keyValueSeperator=' ', disabled_values=False)

    def __contains__(self, key):
        value = self._conf.get(section=None, key=key, default=None)
        return True if value else False

    def __getitem__(self, key):
        return self._conf.get(section=None, key=key, default=None)

    def __setitem__(self, key, value):
        ret = self._conf.set(section=None, key=key, value=value)
        if ret:
            #print('self.m_filename=%s' % (self._conf.m_filename))
            ret = self._conf.save()
            if ret:
                os.chmod(self._conf.filename, 0o600)

class OpenVPNAdmin(object):

    ExitCode = enum(Success=0, Failure=1, FileNotFound=2, ArgumentError=3, 
                    NoOperation=4, AccessDenied=5, VPNNotFound=6, ConfigurationError=7,
                    NotImplemented=8,
                    AlreadyRunning=10, AlreadyStopped=11, NotRunning=12)

    def __init__(self):
        self.verbose = False
        self._config = None
        self._systemconfig = None
        self._private_key_passwords = None

    def version(self):
        print(('Version: %s' % str(__version__)))
        return 0

    def _get_config(self):
        if self._config is None:
            self._config = arsoft.openvpn.Config()

    def _get_systemconfig(self):
        if self._systemconfig is None:
            self._systemconfig = arsoft.openvpn.SystemConfig()

    def _init_private_key_passwords(self):
        if self._private_key_passwords is None:
            password_file = os.path.expanduser('~/.openvpn-private-key')
            self._private_key_passwords = PrivateKeyPasswordFile(password_file)

    def _save_stdin_to_file(self):
        self._stdin_file = tempfile.NamedTemporaryFile()
        buf_length = 4096
        while 1:
            buf = sys.stdin.read(buf_length)
            if not buf:
                break
            self._stdin_file.write(buf)
        self._stdin_file.seek(0)

    def _print_cert(self, prefix, cert):
        if cert:
            cert_file = str(cert.filename)
            if os.path.isfile(cert_file):
                num_certs = len(cert.certificates)
                if num_certs == 0:
                    print(('  %s: %s (%s)' % (prefix, cert_file, cert.last_error)))
                else:
                    now = datetime.datetime.utcnow().replace(tzinfo=UTC)
                    min_expire_in = datetime.timedelta(days=100*365)
                    min_expire_cert = None
                    for cert in cert.certificates:
                        expire_in = cert.expire_date - now
                        if expire_in < min_expire_in:
                            min_expire_in = expire_in
                            min_expire_cert = cert

                    if min_expire_cert:
                        if min_expire_in.total_seconds() < 0:
                            expire_date = 'expired ' + str(min_expire_cert.expire_date) + ' was ' + format_timedelta(min_expire_in)
                        else:
                            expire_date = 'expires ' + str(min_expire_cert.expire_date) + ' in ' + format_timedelta(min_expire_in)
                    else:
                        expire_date = 'unavailable'
                    print(('  %s: %s (%s)' % (prefix, cert_file, expire_date)))
            else:
                print(('  %s: %s (does not exist)' % (prefix, cert_file)))
        else:
            print(('  %s: none' % (prefix)))

    def _print_crl(self, prefix, crl):
        if crl:
            crl_file = str(crl.filename)
            if os.path.isfile(crl_file):
                if not crl.valid:
                    print(('  %s: %s (invalid)' % (prefix, crl_file)))
                else:
                    num_revoked = len(crl.revoked)
                    if num_revoked == 0:
                        print(('  %s: %s (empty)' % (prefix, crl_file)))
                    else:
                        print(('  %s: %s (%i revoked)' % (prefix, crl_file, num_revoked)))
            else:
                print(('  %s: %s (does not exist)' % (prefix, crl_file)))
        else:
            print(('  %s: none' % (prefix)))

    def action_status(self, selected_vpns):
        self._get_config()
        self._get_systemconfig()
        all_vpn_names = self._config.names
        if len(selected_vpns) == 0:
            selected_vpns = all_vpn_names
            ret = self.ExitCode.Success
        else:
            all_vpns_found = True
            for vpnname in selected_vpns:
                if vpnname not in all_vpn_names:
                    sys.stderr.write('VPN %s not configured.\n' % (vpnname))
                    all_vpns_found = False
            ret = self.ExitCode.Success if all_vpns_found else self.ExitCode.VPNNotFound
        
        if ret == self.ExitCode.Success:
            if len(selected_vpns) == 0:
                print('No VPNs configured.')
            else:
                for vpnname in selected_vpns:
                    config_file = arsoft.openvpn.ConfigFile(config_name=vpnname)
                    if not config_file.valid:
                        sys.stderr.write('Failed to open configuration for VPN %s; error %s\n' % (vpnname, config_file.last_error))
                        ret = self.ExitCode.ConfigurationError
                    else:
                        is_running = self._config.is_running(vpnname)
                        status_file = arsoft.openvpn.StatusFile(config_file=config_file)
                        autostart = True if vpnname in self._systemconfig.autostart else False
                        print(('%s (%s):' % (vpnname, 'server' if config_file.server else 'client') ))
                        if config_file.name != vpnname:
                            print(('  Configured name mismatch %s != %s' % (vpnname, config_file.name) ))

                        print(('  Running: %s' % is_running))
                        print(('  Autostart: %s' % autostart))
                        print(('  State: %s' % status_file.state.long_state))
                        print(('  Last updated: %s' % status_file.last_update))
                        self._print_cert('Certificate file', config_file.cert_file)
                        print(('  Key file: %s' % config_file.key_file))
                        self._print_cert('CA file', config_file.ca_file)
                        self._print_crl('CRL file', config_file.crl_file)
                        print(('  DH file: %s' % config_file.dh_file))
                        
                        if config_file.server:
                            print(('  Client config directory: %s' % config_file.client_config_directory))
                            print('  Configured clients:')
                            if config_file.client_config_files:
                                for (clientname, ccdfile) in config_file.client_config_files.items():
                                    
                                    if status_file.connected_clients:
                                        client_is_connected = True if clientname in status_file.connected_clients else False
                                    else:
                                        client_is_connected = False
                                    print(('    %s (%s; %s)' % (ccdfile.name, 'Connected' if client_is_connected else 'Not connected', ccdfile.ostype)))
                                    if len(ccdfile.routes):
                                        print('    Routes:')
                                        for (network, netmask) in ccdfile.routes:
                                            print(('      %s/%s' % (network, netmask)))
                                    if len(ccdfile.push_options):
                                        print('    Pushed options:')
                                        for (option, value) in ccdfile.push_options:
                                            print(('      %s %s' % (option, value)))
                            print('  Connected clients:')
                            if status_file.connected_clients:
                                for (clientname, clientinfo) in status_file.connected_clients.items():
                                    print(('    %s' % (clientinfo)))
                        if len(config_file.routes):
                            print('  Routes:')
                            for (network, netmask) in config_file.routes:
                                print(('    %s/%s' % (network, netmask)))
                        if len(config_file.push_options):
                            print('  Pushed options:')
                            for (option, value) in config_file.push_options:
                                print(('    %s %s' % (option, value)))
                        if status_file.routing_table:
                            print('  Routing table:')
                            for (address, entry) in status_file.routing_table.items():
                                print(('    %s' % (entry)))
                        if status_file.statistics:
                            print('  Statistics:')
                            for name in status_file.statistics:
                                print(('    %s: %s' % (name, getattr(status_file.statistics, name))))
        return ret
    
    def action_zip_info(self, zipfile):
        if os.path.exists(zipfile):
            zipcfg = arsoft.openvpn.ZippedConfigFile(zipfile)
            if zipcfg.valid:
                print(('Config file: %s' % (zipcfg.config_file.filename)))
                self._print_cert('Certificate file', zipcfg.config_file.cert_file)
                print(('  Key file: %s' % zipcfg.config_file.key_file))
                self._print_cert('CA file', zipcfg.config_file.ca_file)
                self._print_cert('CRL file', zipcfg.config_file.crl_file)
                print(('  DH file: %s' % zipcfg.config_file.dh_file))
                
                print(('Files in %s:' % (zipfile)))
                for f in iter(zipcfg):
                    print(('  ' + f.name))
                ret = self.ExitCode.Success
            else:
                sys.stderr.write('ZIP file %s does not contain a valid VPN configuration.\n' % (zipfile))
                ret = self.ExitCode.ConfigurationError
        else:
            sys.stderr.write('ZIP file %s does not exist.\n' % (zipfile))
            ret = self.ExitCode.FileNotFound
        return ret
    
    def _compress_config(self, list_of_changed_zip_files, config_file, output_directory, parent_vpn_name=None):
        
        vpn_display_name = '%s/%s' % (config_file.name, parent_vpn_name) if parent_vpn_name else config_file.name
        if config_file.valid:
            self._init_private_key_passwords()

            if parent_vpn_name:
                output_zip_file_basename = parent_vpn_name + '_' + config_file.suggested_zip_filename
            else:
                output_zip_file_basename = config_file.suggested_zip_filename

            output_zip_file = os.path.join(output_directory, output_zip_file_basename)

            if output_zip_file_basename in self._private_key_passwords:
                key_passphrase = self._private_key_passwords[output_zip_file_basename]
            else:
                key_passphrase = arsoft.crypto.pwgen(pw_length=20, num_pw=1, no_numerals=False, no_capitalize=False, capitalize=False,
                         numerals=False, no_symbols=False, symbols=False, allowed_symbols=None,
                         no_ambiguous=False)
                self._private_key_passwords[output_zip_file_basename] = key_passphrase

            outfile_obj = tempfile.NamedTemporaryFile() if os.path.exists(output_zip_file) and not self.force_notify else None
            zipcfg = arsoft.openvpn.ZippedConfigFile.create(config_file, outfile_obj if outfile_obj else output_zip_file, key_passphrase=key_passphrase)
            zip_ok = True if zipcfg and zipcfg.last_error is None else False

            if zip_ok:
                zip_changed = True
                if outfile_obj:
                    if not zipcfg.compare(output_zip_file, key_passphrase=key_passphrase):
                        # zip file has changed, so copy the temp file to the real output file
                        print(('Copy %s to %s' % (outfile_obj.name, output_zip_file)))
                        shutil.copy2(outfile_obj.name, output_zip_file)
                        list_of_changed_zip_files.append(zipcfg)
                    else:
                        zip_changed = False
                else:
                    # zip file does not exists until now, so it's changed
                    list_of_changed_zip_files.append(zipcfg)
                if zip_changed:
                    print(('Compressed %s to %s' % (vpn_display_name, output_zip_file)))
                else:
                    print(('Compressed %s to %s (unchanged)' % (vpn_display_name, output_zip_file)))
                ret = self.ExitCode.Success
            else:
                ret = self.ExitCode.Failure
                if zipcfg:
                    sys.stderr.write('Failed to compress VPN %s to %s. %s\n' % (vpn_display_name, output_zip_file, zipcfg.last_error))
                else:
                    sys.stderr.write('Failed to compress VPN %s to %s (unspecified error).\n' % (vpn_display_name, output_zip_file))
        else:
            ret = self.ExitCode.ConfigurationError
            sys.stderr.write('Configuration of VPN %s is invalid. %s\n' % (vpn_display_name, config_file.last_error))
        return ret

    def action_zip_compress(self, selected_vpns, output_directory):
        self._get_config()
        all_vpn_names = self._config.names
        if len(selected_vpns) == 0:
            selected_vpns = all_vpn_names
            ret = self.ExitCode.Success
        else:
            all_vpns_found = True
            for vpnname in selected_vpns:
                if vpnname not in all_vpn_names:
                    sys.stderr.write('VPN %s not configured.\n' % (vpnname))
                    all_vpns_found = False
            ret = self.ExitCode.Success if all_vpns_found else self.ExitCode.VPNNotFound
        
        if ret == self.ExitCode.Success:
            if len(selected_vpns) == 0:
                print('No VPNs configured.')
            else:
                list_of_changed_zip_files = []
                ret = self.ExitCode.Success
                for vpnname in selected_vpns:
                    config_file = arsoft.openvpn.ConfigFile(config_name=vpnname)
                    if config_file.valid:
                        zip_ok = self._compress_config(list_of_changed_zip_files, config_file, output_directory)
                        if zip_ok:
                            if config_file.server:
                                # create a ZIP file for each client of the server
                                for (clientname, ccdfile) in config_file.client_config_files.items():
                                    client_cfgfile = config_file.client_config_file(ccdfile)
                                    zip_result = self._compress_config(list_of_changed_zip_files, client_cfgfile, output_directory, parent_vpn_name=vpnname)
                                    if zip_result != self.ExitCode.Success:
                                       ret = zip_result
                        else:
                            ret = self.ExitCode.ConfigurationError
                    else:
                        ret = self.ExitCode.ConfigurationError
                for zipcfg in list_of_changed_zip_files:
                    self._mail_config(zipcfg, self.notfication_recipient)
        return ret
    
    def _mail_config(self, zipcfg, recipient=None):

        if not zipcfg.valid:
            sys.stderr.write('Given ZIP configuration %s is invalid.\n' % (zipcfg.filename))
            return False

        cfgfile = zipcfg.config_file
        if recipient is None:
            recipient = cfgfile.mailnotify

        if recipient is None:
            sys.stderr.write('Zip config %s changed but no notification recipient configured.\n' % (cfgfile.name))
            return False

        mail_subject="OpenVPN configuration %s" % (cfgfile.name)
        mail_message_header="""Your OpenVPN configuration has changed.
The administrator has given the following reason for this update:
%s
The attached configuration has been automatically generated with the latest configuration.

The latest OpenVPN manuals are avialable at:
http://openvpn.net/index.php/open-source/documentation/manuals.html

""" % (self.notification_reason)

        mail_message_footer="""

Have a nice day,
   your administrator
"""
        if cfgfile.ostype == 'linux':
            mail_message_os = """
- extract the attached configuration ZIP to any directory
- run openvpn-admin --install /path/to/your/new/config.zip
  (make sure to run this command as root user).
"""
        elif cfgfile.ostype == 'win' or cfgfile.ostype == 'windows':
            mail_message_os = """
Make sure you have installed the latest version of OpenVPN (Community Version).
http://openvpn.net/index.php/download/community-downloads.html

- Quit the OpenVPN GUI (click the system tray icon)
- Unzip the attached configuration to 
  C:\Program Files\OpenVPN\config
- Restart the OpenVPN GUI (with Administrator privileges)
- Right click the system tray icon and click Connect to initiate
  your VPN connection
"""
        elif cfgfile.ostype == 'macosx':
            mail_message_os = """
Make sure you have installed the latest version of Tunnelblick.
http://code.google.com/p/tunnelblick/

The wiki page 'Setting up Tunnelblick' provides the necessary
instructions to install or update your Tunnelblick configuration.
http://code.google.com/p/tunnelblick/wiki/cConfigT
"""
        elif cfgfile.ostype == 'android':
            mail_message_os = """
Please install the OpenVPN Settings App from Google Play and unzip the
attached configuration to 
/sdcard/openvpn/

OpenVPN Settings Website: http://code.google.com/p/android-openvpn-settings
Android OpenVPN How to: http://vpnblog.info/android-openvpn-strongvpn.html
"""
        else:
            mail_message_os = """
Your operating system %s is not handled (yet) on. 
Please check the OpenVPN documentation and/or your system documentation for how 
to use the provided configuration.
""" % (zipcfg.config_file.ostype)

        mail_message = mail_message_header + mail_message_os + mail_message_footer
        notification_mail = arsoft.mail.Mail(sender=None, to=[recipient], subject=mail_subject, bodytext=mail_message)
        notification_mail.add_attachment(zipcfg.filename, attachment_name=cfgfile.name + '.zip')
        #print(notification_mail)
        print(('Zip config %s changed and notification sent to %s' % (cfgfile.name, recipient)))
        arsoft.mail.sendmail(notification_mail)
        return True

    def action_install(self, filename, root_directory=None):
        conf_file_ok = False
        file_ok = False
        zip_ok = False
        if filename == '-':
            self._save_stdin_to_file()
            filename = self._stdin_file.name
            file_ok = True
            zip_ok = True
        else:
            file_ok = os.path.exists(filename)
            if file_ok:
                zip_ok = arsoft.openvpn.ZippedConfigFile.is_zip_config_file(filename)
                if not zip_ok:
                    conf_file_ok = arsoft.openvpn.ConfigFile.is_config_file(filename)
        if file_ok:
            if zip_ok:
                zipcfg = arsoft.openvpn.ZippedConfigFile(filename)
                if zipcfg.install(root_directory=root_directory):
                    ret = self.ExitCode.Success
                else:
                    sys.stderr.write('Failed to install OpenVPN configuration from %s. Error %s\n' % (filename, zipcfg.last_error))
                    ret = self.ExitCode.ConfigurationError
            elif conf_file_ok:
                print(('use raw config file %s' % filename))
                ret = self.ExitCode.NotImplemented
            else:
                sys.stderr.write('Given file %s is neither a ZIP file nor a valid OpenVPN configuration.\n' % (filename))
                ret = self.ExitCode.ConfigurationError
        else:
            sys.stderr.write('File %s does not exist.\n' % (filename))
            ret = self.ExitCode.FileNotFound
        return ret

    def action_ssh_install(self, filename, sshurl):
        conf_file_ok = False
        file_ok = False
        zip_ok = False
        if filename == '-':
            self._save_stdin_to_file()
            filename = self._stdin_file.name
            file_ok = True
            zip_ok = True
        else:
            file_ok = os.path.exists(filename)
            if file_ok:
                zip_ok = arsoft.openvpn.ZippedConfigFile.is_zip_config_file(filename)
                if not zip_ok:
                    conf_file_ok = arsoft.openvpn.ConfigFile.is_config_file(filename)
        if file_ok:
            if zip_ok:
                url = arsoft.sshutils.SSHUrl(sshurl)
                zipcfg = arsoft.openvpn.ZippedConfigFile(filename)
                if zipcfg.ssh_install(url.hostname, username=url.username):
                    ret = self.ExitCode.Success
                else:
                    sys.stderr.write('Failed to install OpenVPN configuration from %s. Error %s\n' % (filename, zipcfg.last_error))
                    ret = self.ExitCode.ConfigurationError
            elif conf_file_ok:
                print(('use raw config file %s' % filename))
                ret = self.ExitCode.NotImplemented
            else:
                sys.stderr.write('Given file %s is neither a ZIP file nor a valid OpenVPN configuration.\n' % (filename))
                ret = self.ExitCode.ConfigurationError
        else:
            sys.stderr.write('File %s does not exist.\n' % (filename))
            ret = self.ExitCode.FileNotFound
        return ret

    def action_zip_send(self, filename, recipient=None):
        conf_file_ok = False
        file_ok = False
        zip_ok = False
        if filename == '-':
            self._save_stdin_to_file()
            filename = self._stdin_file.name
            file_ok = True
            zip_ok = True
        else:
            file_ok = os.path.exists(filename)
            if file_ok:
                zip_ok = arsoft.openvpn.ZippedConfigFile.is_zip_config_file(filename)
        if zip_ok:
            zipcfg = arsoft.openvpn.ZippedConfigFile(filename)
            if self._mail_config(zipcfg, recipient):
                ret = self.ExitCode.Success
            else:
                sys.stderr.write('Failed to send OpenVPN configuration from %s. Error %s\n' % (filename, zipcfg.last_error))
                ret = self.ExitCode.Failure
        else:
            sys.stderr.write('Given file %s is not a ZIP file with valid OpenVPN configuration.\n' % (filename))
            ret = self.ExitCode.VPNNotFound
        return ret

    def action_start(self, vpnname):
        cfgfile = arsoft.openvpn.ConfigFile(config_name=vpnname)
        if cfgfile.valid:
            self._get_config()
            if self._config.is_running(vpnname):
                # already started
                print(('Started %s' % vpnname))
                ret = self.ExitCode.Success
            else:
                if self._config.start(vpnname):
                    print(('Started %s' % vpnname))
                    ret = self.ExitCode.Success
                else:
                    sys.stderr.write('Failed to start VPN %s. %s\n' % (vpnname, self._config.last_error))
        else:
            sys.stderr.write('Failed to open configuration for VPN %s. %s\n' % (vpnname, cfgfile.last_error))
            ret = self.ExitCode.VPNNotFound
        return ret

    def action_stop(self, vpnname):
        cfgfile = arsoft.openvpn.ConfigFile(config_name=vpnname)
        if cfgfile.valid:
            self._get_config()
            if self._config.is_running(vpnname):
                if self._config.stop(vpnname):
                    ret = self.ExitCode.Success
                    print(('Stopped %s' % vpnname))
                else:
                    ret = self.ExitCode.Failure
                    sys.stderr.write('Failed to stop VPN %s. %s\n' % (vpnname, self._config.last_error))
            else:
                # VPN already stopped
                ret = self.ExitCode.Success
                print(('Stopped %s' % vpnname))
        else:
            ret = self.ExitCode.VPNNotFound
            sys.stderr.write('Failed to open configuration for VPN %s. %s\n' % (vpnname, cfgfile.last_error))
        return ret

    def action_restart(self, vpnname):
        cfgfile = arsoft.openvpn.ConfigFile(config_name=vpnname)
        if cfgfile.valid:
            self._get_config()
            if self._config.is_running(vpnname):
                if self._config.restart(vpnname):
                    ret = self.ExitCode.Success
                    print(('Restart %s' % vpnname))
                else:
                    ret = self.ExitCode.Failure
                    sys.stderr.write('Failed to restart VPN %s. %s\n' % (vpnname, self._config.last_error))
            else:
                ret = self.ExitCode.NotRunning
                sys.stderr.write('VPN %s not running\n' % (vpnname))
        else:
            sys.stderr.write('Failed to open configuration for VPN %s. %s\n' % (vpnname, cfgfile.last_error))
            ret = self.ExitCode.VPNNotFound
        return ret

    def action_reload(self, vpnname):
        cfgfile = arsoft.openvpn.ConfigFile(config_name=vpnname)
        if cfgfile.valid:
            self._get_config()
            if self._config.is_running(vpnname):
                if self._config.reload(vpnname):
                    print(('Reload %s' % vpnname))
                    ret = self.ExitCode.Success
                else:
                    ret = self.ExitCode.Failure
                    sys.stderr.write('Failed to reload VPN %s. %s\n' % (vpnname, self._config.last_error))
            else:
                ret = self.ExitCode.NotRunning
                sys.stderr.write('Failed to reload VPN %s because VPN not running\n' % (vpnname))
        else:
            sys.stderr.write('Failed to open configuration for VPN %s. %s\n' % (vpnname, cfgfile.last_error))
            ret = self.ExitCode.VPNNotFound
        return ret

    def action_add_ccd(self, vpnname, clients):
        cfgfile = arsoft.openvpn.ConfigFile(config_name=vpnname)
        if cfgfile.valid:
            ccd_dir = cfgfile.client_config_directory
            for client in clients:
                fullpath = os.path.join(cfgfile.client_config_directory, client)
                if not os.path.exists(fullpath):
                    try:
                        open(fullpath, 'w')
                        ccd_ok = True
                    except IOError as e:
                        sys.stderr.write('Failed to create CCD for client %s on %s. %s\n' % (client, vpnname, str(e)))
                        ccd_ok = False
                else:
                    ccd_ok = True
            if ccd_ok:
                ret = self.ExitCode.Success
            else:
                ret = self.ExitCode.Failure
        else:
            sys.stderr.write('Failed to open configuration for VPN %s. %s\n' % (vpnname, cfgfile.last_error))
            ret = self.ExitCode.VPNNotFound
        return ret

    def action_remove_ccd(self, vpnname, clients):
        cfgfile = arsoft.openvpn.ConfigFile(config_name=vpnname)
        if cfgfile.valid:
            ccd_dir = cfgfile.client_config_directory
            for client in clients:
                fullpath = os.path.join(cfgfile.client_config_directory, client)
                if not os.path.exists(fullpath):
                    ccd_removed = True
                else:
                    try:
                        os.remove(fullpath)
                        ccd_removed = True
                    except IOError as e:
                        sys.stderr.write('Failed to remove CCD of client %s on %s. %s\n' % (client, vpnname, str(e)))
                        ccd_removed = False
            if ccd_removed:
                ret = self.ExitCode.Success
            else:
                ret = self.ExitCode.Failure
        else:
            sys.stderr.write('Failed to open configuration for VPN %s. %s\n' % (vpnname, cfgfile.last_error))
            ret = self.ExitCode.VPNNotFound
        return ret

    def main(self):
        #=============================================================================================
        # process command line
        #=============================================================================================
        parser = argparse.ArgumentParser(description='helper script to manage/configure a local OpenVPN installation.')
        parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='enable verbose output.')
        parser.add_argument('--version', dest='version', action='store_true', help='shows the version and exits.')
        parser.add_argument('--status', dest='action_status', metavar='VPNNAME', nargs='*', help='show the status of the configured VPNs')
        parser.add_argument('--zipinfo', dest='action_zip_info', metavar='ZIPFILE', help='shows information about the configuration in the given ZIP file.')
        parser.add_argument('--zipsend', dest='action_zip_send', metavar='ZIPFILE', help='send ZIP file to the administrator of the VPN.')
        parser.add_argument('--zip', dest='action_zip_compress', metavar='VPNNAME', nargs='*', help='generate ZIP files for all OpenVPN configurations in the given directory.')
        parser.add_argument('--root-directory', dest='root_directory', default='/', metavar='DIR', help='specifies the root directory for the configuration.')
        parser.add_argument('--output-directory', dest='output_directory', metavar='DIR', help='specifies the output directory for the configuration.')
        parser.add_argument('--install', dest='action_install', metavar='CFGFILE', help='installs the given OpenVPN configuration (can be either a ZIP file or plain config)')
        parser.add_argument('--ssh-install', dest='action_ssh_install', metavar='ZIPFILE', nargs=2, help='installs the given OpenVPN ZIP configuration to the specified remote host')
        parser.add_argument('--start', dest='action_start', metavar='VPNNAME', help='starts the specified VPN')
        parser.add_argument('--stop', dest='action_stop', metavar='VPNNAME', help='stops the specified VPN')
        parser.add_argument('--restart', dest='action_restart', metavar='VPNNAME', help='restart the specified VPN')
        parser.add_argument('--reload', dest='action_reload', metavar='VPNNAME', help='reload the configuration of the specified VPN')
        parser.add_argument('--recipient', dest='recipient', metavar='RECIPIENT', help='override the mail recipient of the VPN configuration.')
        parser.add_argument('--force-notify', dest='force_notify', action='store_true', help='send notification even if the configuration is unchanged.')
        parser.add_argument('--reason', dest='notification_reason', default='', help='specify the reason for the updated VPN configuration.')
        parser.add_argument('--add-ccd', dest='action_add_ccd', metavar='CLIENTNAME', nargs='+', help='add a client to the given VPN')
        parser.add_argument('--remove-ccd', dest='action_remove_ccd', metavar='CLIENTNAME', nargs='+', help='remove a client from given VPN')

        args = parser.parse_args()
        self.verbose = args.verbose
        self.root_directory = args.root_directory
        if args.output_directory:
            self.output_directory = os.path.abspath(args.output_directory)
        else:
            self.output_directory = os.getcwd()
        self.force_notify = args.force_notify
        self.notfication_recipient = args.recipient
        self.notification_reason = args.notification_reason

        if args.version:
            return self.version()
        
        if args.action_status is not None:
            ret = self.action_status(args.action_status)
        elif args.action_zip_info is not None:
            ret = self.action_zip_info(args.action_zip_info)
        elif args.action_zip_send is not None:
            ret = self.action_zip_send(args.action_zip_send, self.notfication_recipient)
        elif args.action_zip_compress is not None:
            ret = self.action_zip_compress(args.action_zip_compress, output_directory=self.output_directory)
        elif args.action_install is not None:
            ret = self.action_install(args.action_install, root_directory=self.root_directory)
        elif args.action_ssh_install is not None:
            if len(args.action_ssh_install) == 2:
                ret = self.action_ssh_install(args.action_ssh_install[0], args.action_ssh_install[1])
            else:
                sys.stderr.write('Wrong number of arguments.\n')
                ret = self.ExitCode.ArgumentError
        elif args.action_start is not None:
            ret = self.action_start(args.action_start)
        elif args.action_stop is not None:
            ret = self.action_stop(args.action_stop)
        elif args.action_restart is not None:
            ret = self.action_restart(args.action_restart)
        elif args.action_reload is not None:
            ret = self.action_reload(args.action_reload)
        elif args.action_add_ccd:
            if len(args.action_add_ccd) >= 2:
                ret = self.action_add_ccd(args.action_add_ccd[0], args.action_add_ccd[1:])
            else:
                sys.stderr.write('No client to add.\n')
                ret = self.ExitCode.ArgumentError
        elif args.action_remove_ccd:
            if len(args.action_remove_ccd) >= 2:
                ret = self.action_remove_ccd(args.action_remove_ccd[0], args.action_remove_ccd[1:])
            else:
                sys.stderr.write('No client to remove.\n')
                ret = self.ExitCode.ArgumentError
        else:
            sys.stderr.write('No action selected.\n')
            ret = self.ExitCode.NoOperation
        return ret

if __name__ == "__main__":
    app =  OpenVPNAdmin()
    sys.exit(app.main())
 
